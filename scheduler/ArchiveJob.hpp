/*
 * The CERN Tape Archive (CTA) project
 * Copyright (C) 2015  CERN
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "scheduler/TapeJob.hpp"

#include <stdint.h>
#include <string>

namespace cta {
  // Forward declaration
  // class ArchivePath; 
  class ArchiveMount;
  class RemotePathAndStatus;

/**
 * Class representing the transfer of a single copy of a remote file to tape.
 */
class ArchiveJob: public TapeJob {

  /**
   * The ArchiveMount class is a friend so that it can call the private
   * constructor of ArchiveJob.
   */
  friend class ArchiveMount;

private:

  /**
   * Constructor. It is private as the ArchiveJob is generated by the 
   * ArchiveMount.
   *
//   NOT YET DECIDED
   * @param archiveMount The mount to which the job belongs.
   * @param tapePoolName The name of the destination tape pool.
   * @param fileSize The size of the file to be archived in bytes.
   * @param id The identifier of the tape job.
   * @param userRequestId The identifier of the associated user request.
   * @param copyNb The copy number.
   * @param remoteFile The URL of the remote source file.
   * @param castorNsFileId The CASTOR name server identifier of the file in the
   * archive namespace that depending on the direction of the data transfer may
   * be either the source or the destination of the tape job.
   */
  ArchiveJob(
//  NOT YET DECIDED
//  ArchiveMount &archiveMount,
    const std::string &tapePoolName,
    const uint64_t fileSize,
    const std::string &id,
    const std::string &userRequestId,
    const uint32_t copyNb,
    const std::string &remoteFile,
    const uint64_t castorNsFileId);

public:

  /**
   * Destructor.
   */
  ~ArchiveJob() throw();

  /**
   * Returns the mount to which this job belongs.
   *
   * @return the mount to which this job belongs.
   */
// TO BE DECIDED
//ArchiveMount &getMount() const;

  /**
   * Returns the mount to which this job belongs.
   *
   * @return the mount to which this job belongs.
   */
  // NO YET DECIDED
  //ArchiveMount &getMount();

  /**
   * Returns the name of the destination tape pool.
   *
   * @return the name of the destination tape pool.
   */
  const std::string &getTapePoolName() const throw();

  /**
   * Returns the size of the file to be archived in bytes.
   *
   * @return The size of the file to be archived in bytes.
   */
  uint64_t getFileSize() const throw();

  /**
   * Returns the The URL of the remote source file.
   *
   * @return The The URL of the remote source file.
   */
  std::string getRemoteFile() const throw();

  /**
   * Indicates that the job was successful
   *
   * @param checksumOfTransfer The adler-32 checksum of the file as calculated
   * during the execution of the job.
   * @param fileSizeOfTransfer The size of the file as calculated during the
   * execution of the job.
   */
  virtual void complete(const uint32_t checksumOfTransfer,
    const uint64_t fileSizeOfTransfer);

  /**
   * Indicates that the job failed
   *
   * @param ex The reason for the failure.
   */
  virtual void failed(const std::exception &ex);

  /**
   * Indicates that the job should be tried again (typically reaching the end 
   * of the tape).
   */
  virtual void retry();

private:

  /**
   * The mount to which the job belongs.
   */
// NOT YET DECIDED
//ArchiveMount &m_mount;

  /**
   * The name of the destination tape pool.
   */
  std::string m_tapePoolName;

  /**
   * The size of the file to be archived in bytes.
   */
  uint64_t m_fileSize;

}; // class ArchiveJob

} // namespace cta
