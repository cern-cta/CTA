/*
 * The CERN Tape Archive (CTA) project
 * Copyright (C) 2015  CERN
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "common/archiveNS/TapeCopyLocationAndStatus.hpp"
#include "common/archiveNS/ArchiveFileInfo.hpp"
#include "common/exception/Exception.hpp"
#include "common/remoteFS/RemotePathAndStatus.hpp"

#include <stdint.h>
#include <string>

namespace cta {
  // Forward declaration
  // class ArchivePath; 
  class ArchiveMount;
  class RemotePathAndStatus;

/**
 * Class representing the transfer of a single copy of a remote file to tape.
 */
class ArchiveJob {

  /**
   * The ArchiveMount class is a friend so that it can call the private
   * constructor of ArchiveJob.
   */
  friend class ArchiveMount;
  CTA_GENERATE_EXCEPTION_CLASS(NotImplemented);

protected:

  /**
   * Constructor. It is not protected as the ArchiveJob is generated by the 
   * ArchiveMount.
   */
  ArchiveJob();

  /**
   * Constructor. It is not protected as the ArchiveJob is generated by the 
   * ArchiveMount.
   *
   * @param tapePoolName the name of the tape pool the tape copy should be 
   * stored in.
   * @param archiveFile informations about the file for which we are storing
   * this tape copy.
   * @param remoteFile location and properties of the remote file
   * @param copyNb the copy number
   */
  ArchiveJob(
  const std::string &tapePoolName,
  const ArchiveFileInfo & archiveFile,
  const RemotePathAndStatus &remoteFile,
  const TapeCopyLocationAndStatus &tapeCopy,
  const uint16_t copyNb);

public:

  /**
   * Destructor.
   */
  virtual ~ArchiveJob() throw() = 0;

  /**
   * Returns the name of the destination tape pool.
   *
   * @return the name of the destination tape pool.
   */
  const std::string &getTapePoolName() const throw();

  /**
   * Returns the The URL of the remote source file.
   *
   * @return The The URL of the remote source file.
   */
  std::string getRemoteFile() const throw();

  /**
   * Indicates that the job was successful and updates the backend store
   *
   */
  virtual void complete();

  /**
   * Stores the reason for a failure prior to calling failed();
   * @param ex the reason for failure in the form of an exception.
   */
  void setFailureReason (const cta::exception::Exception &ex);
  
  /**
   * Triggers a scheduler update following the failure of the job.
   * The reason for the failure should have been set beforehand by calling
   * setFailureReason(), but failure to do it is non-fatal (a standard error
   * reason will be used)
   * This 2 step approach allows the reason to be recorded fast in the 
   * tape writing thread, and the slow(er) update of the DB to be executed
   * in a second thread.
   *
   */
  virtual void failed();

  /**
   * Indicates that the job should be tried again (typically reaching the end 
   * of the tape).
   */
  virtual void retry();

public:
  std::string tapePoolName; 
                /**< The name of the destination tape pool. */
  ArchiveFileInfo archiveFile;
                /**< All information related to the archive file for which we 
                 * are recording this tape copy. */
  RemotePathAndStatus remoteFile; 
                /**< The size of the file to be archived in bytes. */
  
  TapeCopyLocationAndStatus tapeCopy;
  uint16_t copyNumber; 
                /**< The copy number for this tape copy */
  CTA_GENERATE_EXCEPTION_CLASS(LocationNotSet);
                /**< Accessor to the tape location status */

}; // class ArchiveJob

} // namespace cta
