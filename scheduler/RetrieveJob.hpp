/*
 * The CERN Tape Retrieve (CTA) project
 * Copyright (C) 2015  CERN
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "common/archiveNS/ArchiveFileInfo.hpp"
#include "common/archiveNS/TapeCopyInfo.hpp"
#include "common/remoteFS/RemotePath.hpp"

#include <string>

namespace cta {

class RetrieveMount;

/**
 * The transfer of a single copy of a tape file to a remote file.
 */
class RetrieveJob {
  /**
   * The RetrieveMount class is a friend so that it can call the private
   * constructor of RetrieveJob.
   */
  friend class RetrieveMount;

protected:

  /**
   * Constructor. It is not public as the ArchiveJob is generated by the 
   * RetrieveMount.
   */
  RetrieveJob();

  /**
   * Constructor. It is not public as the ArchiveJob is generated by the 
   * RetrieveMount.
   *
// TO BE DECIDED
   * @param mount The mount to which the job belongs.
   * @param tapeCopy The location of the source tape file.
   * @param id The identifier of the tape job.
   * @param userRequestId The identifier of the associated user request.
   * @param copyNb The copy number.
   * @param remoteFile The URL of the destination source file.
   * @param castorNsFileId The CASTOR name server identifier of the file in the
   * archive namespace that depending on the direction of the data transfer may
   * be either the source or the destination of the tape job.
   */
  RetrieveJob(
// TO BE DECIDED
//  RetrieveMount &mount,
    const TapeCopyInfo &tapeCopy,
    const std::string &id,  
    const std::string &userRequestId,
    const uint32_t copyNb,
    const std::string &remoteFile,
    const uint64_t castorNsFileId);

public:

  /**
   * Destructor.
   */
  virtual ~RetrieveJob() throw() = 0;

  /**
   * Indicates that the job was successful
   *
   * @param checksumOfTransfer The adler-32 checksum of the file as calculated
   * during the execution of the job.
   * @param fileSizeOfTransfer The size of the file as calculated during the
   * execution of the job.
   */
  virtual void complete(const uint32_t checksumOfTransfer,
    const uint64_t fileSizeOfTransfer);
  
  /**
   * Indicates that the job failed
   *
   * @param ex The reason for the failure.
   */
  virtual void failed(const std::exception &ex);
  
  /**
   * Indicates that the job should be tried again (typically reaching the end 
   * of the tape).
   */
  void retry();

private:

  /**
   * The mount to which the job belongs.
   */
// TO BE DECIDED
//RetrieveMount &m_mount;

public:
  /** Positioning method options  */
  enum class PositioningMethod: uint8_t {
    ByBlock = 0,
    ByFSeq = 1
  };
  /** Translation of positioningMethod */
  std::string toString (PositioningMethod);
  
  TapeCopyInfo tapeCopy; /**<The location of the source tape file. */
  PositioningMethod positioningMethod; /**< The desired positioning method. */
  RemotePath remoteFilePath; /** <The location of the destination file. */
  std::string m_id;
  ArchiveFileInfo archiveFile;
}; // struct RetrieveJob

} // namespace cta
