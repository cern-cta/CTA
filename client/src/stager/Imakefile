COMM
COMM  Copyright (C) 2004 by CERN/IT/ADC/CA
COMM  All rights reserved
COMM
COMM  @(#)Imakefile,v 1.52 2005/11/25 14:27:22 CERN IT-ADC/CA Jean-Damien Durand

COMM 	Make stager daemon programs.

#include <Project.tmpl>

SPOOL = StageSpool
INCLUDES = FileName(..,h)
INCLUDES_CPP = FileName(..,/)

COMM
COMM Set this flag to -O for optimization, or -g for debug
COMM
#if _WIN32
CCOPTIM =
#else
CCOPTIM = -g
#endif

#ifdef StagerSuperUser
STAGEUSER = StagerSuperUser
#else
STAGEUSER = stage
#endif

STAGEHOST=StageHost

#ifdef StagerSuperGroup
STAGEGROUP = StagerSuperGroup
#else
STAGEGROUP = st
#endif

STAGEFLAGS = -DSTAGEUSER=\"$(STAGEUSER)\" -DSTAGEGROUP=\"$(STAGEGROUP)\" \
	    -DSTAGEMAP=\"StageMapFile\" -DSTAGETYPE=\"StageTypeFile\"

THREADFLAGS = $(MTCCFLAGS)
LDFLAGS += $(MTLDFLAGS)

#if SOLARIS
LDLIBS = -lsocket -lnsl
#else
#if _AIX
#if defined(_IBMR2)
LDLIBS = -lodm
#endif
#else
#if linux
LDLIBS = $(ADNSLIB) -lnsl -Wl,-rpath-link,../shlib
#else
#if _WIN32
LDLIBS = ..\lib\shift.lib wsock32.lib ws2_32.lib advapi32.lib
#endif
#endif
#endif
#endif

#if BuildSecurity
SECURITYFLAG=-DCSEC
#endif

CFLAGS = $(CCOPTIM) -I$(INCLUDES) -I$(INCLUDES_CPP) $(SECURITYFLAG) $(THREADFLAGS) $(STAGEFLAGS) -DSTAGEHOST=\"$(STAGEHOST)\"
CPPFLAGS=$(CFLAGS) -I..

DEPLIB = DepSharedLibraryTargetName(shlib,shift)

#if !defined(_WIN32)
GLOBLIB = -L../shlib -lshift
#endif

#if BuildStageDaemon
PROGS_STAGER = ProgramTargetName(stager) ProgramTargetName(stageradmin) ProgramTargetName(stagerNotifyService)
IPROGS_STAGER = FileName($(BIN),ProgramTargetName(stager)) FileName($(BIN),ProgramTargetName(stageradmin))
EPROGS_STAGER = FileName($(EXPORTBIN),stager) FileName($(EXPORTBIN),stageradmin)
GLOBLIB2 = -L../shlib
#endif
MANPAGES_STAGER = FileName($(MANDIR),stager_get.$(MANSUFFIX)) FileName($(MANDIR),stager_update.$(MANSUFFIX)) FileName($(MANDIR),stager_put.$(MANSUFFIX)) FileName($(MANDIR),stager_putdone.$(MANSUFFIX)) FileName($(MANDIR),stager_qry.$(MANSUFFIX)),FileName($(MANDIR),stager_rm.$(MANSUFFIX)),FileName($(MANDIR),stager_setFileGCWeight.$(MANSUFFIX))
EMANPAGES_STAGER = FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_get.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_update.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_put.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_putdone.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_qry.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_rm.$(MANSUFFIX))) FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),stager_setFileGCWeight.$(MANSUFFIX)))

#if BuildSecurity
GLOBLIB += -ldl
#endif

STAGER_OBJS = \
		stager.Osuf \
		stager_db_service.Osuf \
		stager_getnext_service.Osuf \
		stager_service_helper.Osuf \
		stager_gc_service.Osuf \
		stager_job_service.Osuf \
		stager_query_service.Osuf \
		stager_error_service.Osuf \
		stager_service_run.Osuf
STAGERADMIN_OBJS = stageradmin.Osuf
OBSOLETE_OBJS = \
		buildupath.Osuf \
		send2stgd_api.Osuf \
		send2stgd_compat.Osuf \
		stage_api.Osuf \
		stage_errmsg.Osuf \
		stage_updc.Osuf \
		stage_util.Osuf

STAGERLIB_OBJS = \
		stager_admin_api.Osuf \
		stager_catalogInterface.Osuf \
		stager_client_api_common.Osuf \
		stager_client_commandline.Osuf \
		stager_client_api_get.Osuf \
		stager_client_api_put.Osuf \
		stager_client_api_update.Osuf \
		stager_client_api_open.Osuf \
		stager_client_api_query.Osuf \
		stager_client_api_rm.Osuf \
		stager_client_api_setFileGCWeight.Osuf \
		stager_client_api_next.Osuf \
		stager_client_api_version.Osuf \
		stager_errmsg.Osuf \
		stager_extern_globals.Osuf \
		stager_messages.Osuf \
		stager_service.Osuf \
		stager_util.Osuf \
		stager_uuid.Osuf \
		stager_mapper.Osuf \
		$(OBSOLETE_OBJS)

#if BuildStageLibrary
STAGELIBTARGET=LibraryTargetName(stager)
#endif

#if BuildStageClient
PROGS_STAGERCLIENT=ProgramTargetName(stager_get) ProgramTargetName(stager_update) ProgramTargetName(stager_put) ProgramTargetName(stager_qry) \
        ProgramTargetName(stager_putdone) ProgramTargetName(stager_rm) ProgramTargetName(stager_setFileGCWeight)
IPROGS_STAGERCLIENT = FileName($(BIN),ProgramTargetName(stager_get)) FileName($(BIN),ProgramTargetName(stager_update)) FileName($(BIN),ProgramTargetName(stager_qry)) \
        FileName($(BIN),ProgramTargetName(stager_put)) FileName($(BIN),ProgramTargetName(stager_putdone)) \
        FileName($(BIN),ProgramTargetName(stager_rm)) FileName($(BIN),ProgramTargetName(stager_setFileGCWeight))
EPROGS_STAGERCLIENT = FileName($(EXPORTBIN),stager_get) FileName($(EXPORTBIN),stager_update) FileName($(EXPORTBIN),stager_qry) \
        FileName($(EXPORTBIN),stager_put) FileName($(EXPORTBIN),stager_putdone) \
        FileName($(EXPORTBIN),stager_rm) FileName($(EXPORTBIN),stager_setFileGCWeight)
#endif


all: $(STAGELIBTARGET) $(PROGS_STAGER) $(PROGS_STAGERCLIENT)

NormalProgramTarget(stager,$(STAGER_OBJS),$(DEPLIB) $(DEPLIB2),$(GLOBLIB) $(GLOBLIB2) $(LDLIBS))
NormalProgramTarget(stagerNotifyService,stagerNotifyService.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stageradmin,$(STAGERADMIN_OBJS),$(DEPLIB),$(GLOBLIB) $(LDLIBS))

#if BuildStageClient
NormalProgramTarget(stager_get,stager_get.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_update,stager_update.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_put,stager_put.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_putdone,stager_putdone.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_qry,stager_qry.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_rm,stager_rm.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
NormalProgramTarget(stager_setFileGCWeight,stager_setFileGCWeight.Osuf,$(DEPLIB),$(GLOBLIB) $(LDLIBS))
#endif

MakeDepLibrary(lib,shift)

MakeDepSharedLibrary(shlib,shift)

NormalLibraryTarget(stager,$(STAGERLIB_OBJS))

install: $(BIN) $(IPROGS_STAGER) $(IPROGS_STAGERCLIENT) $(SPOOL)

InstallProgram(stager,$(BIN),root,bin,0750)
InstallProgram(stageradmin,$(BIN),root,bin,0750)
#if BuildStageClient
InstallProgram(stager_get,$(BIN),root,bin,0755)
InstallProgram(stager_update,$(BIN),root,bin,0755)
InstallProgram(stager_put,$(BIN),root,bin,0755)
InstallProgram(stager_putdone,$(BIN),root,bin,0755)
InstallProgram(stager_qry,$(BIN),root,bin,0755)
InstallProgram(stager_rm,$(BIN),root,bin,0755)
InstallProgram(stager_setFileGCWeight,$(BIN),root,bin,0755)
#endif
install.man: $(MANDIR) $(MANPAGES_STAGER)

IMANPAGE(stager_get,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_update,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_put,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_putdone,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_qry,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_rm,$(MANDIR),$(MANSUFFIX))
IMANPAGE(stager_setFileGCWeight,$(MANDIR),$(MANSUFFIX))

export: $(EPROGS_STAGER) $(EPROGS_STAGERCLIENT)

IEXPORT(stager,$(EXPORTBIN),755)
IEXPORT(stageradmin,$(EXPORTBIN),755)
#if BuildStageClient
IEXPORT(stager_get,$(EXPORTBIN),755)
IEXPORT(stager_update,$(EXPORTBIN),755)
IEXPORT(stager_put,$(EXPORTBIN),755)
IEXPORT(stager_putdone,$(EXPORTBIN),755)
IEXPORT(stager_qry,$(EXPORTBIN),755)
IEXPORT(stager_rm,$(EXPORTBIN),755)
IEXPORT(stager_setFileGCWeight,$(EXPORTBIN),755)
#endif
exportman: $(EMANPAGES_STAGER)

EMANPAGE(stager_get,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_update,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_put,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_putdone,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_qry,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_rm,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(stager_setFileGCWeight,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))

MakeDir($(BIN),root,bin,0755)
MakeDir($(SPOOL),root,bin,0755)
MakeDir($(MANDIR),root,bin,0755)

COMM###################### CLEANING RULES #######################

clean:
	@echo cleaning in CurDir
	-@RemoveFiles(FilesToClean)

clobber: clean
	@echo clobbering in CurDir
	-@RemoveFiles($(PROGS_STAGER) LibraryTargetName(stager) $(PROGS_STAGERCLIENT))

#if _WIN32
depend:
	@echo Not supported on this platform
#else
depend:
	makedepend  -Y -- $(CFLAGS) -- *.c *.cpp 2> /dev/null
#endif

Makefiles:

FORCE:

COMM DO NOT DELETE THIS LINE -- make  depend  depends  on  it.
