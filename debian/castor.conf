#####################################################################################
#
# CASTOR2 Sample Configuration File
# $Id: castor.conf,v 1.170 2009/08/18 09:42:57 waldron Exp $
#
#####################################################################################

#
# Service to Host/Port Mapping
#

#RH         HOST castorrh
#STAGER     HOST castorrh
#STAGER     NOTIFYHOST castorstager
#STAGER     NOTIFYPORT 55015
#RTCPCLIENTD HOST castorrtcpcld
#RTCPCLIENTD NOTIFYPORT 5050
#JOBMANAGER HOST castorjobmanager
#JOBMANAGER NOTIFYPORT 15011
#RM         HOST castorscheduler
#RM         PORT 15003
#CNS        HOST castorns
#EXPERT     HOST castorexpert
#DLF        PORT 5036
#VDQM       HOST castorvdqm1
#VMGR       HOST castorvmgr
#UPV        HOST castorcupv
#REPACK     HOST castorrepack


## Client configuration #############################################################

# The port range to be used by clients for the stager callbacks. If not present a
# port range of 30000-30100 is used. You can disable the port range by setting both
# values to 0

CLIENT   LOWPORT        30000
CLIENT   HIGHPORT       40000

# The following option defines in bytes the maximum size of a message that can be
# read by a client or server. The default value and minimum value is 20MB
# Note: it is not advised to modify this value unless recommended to do so by the
# CASTOR team.

#CLIENT  MAX_NETDATA_SIZE 20971520

# Maximum number of responses allowed when a file query using reqexp is done. Default
# is 10000, max allowed is 30000. Can also be set by defining the environment
# variable FILEQUERY_MAXNBRESPONSES.

FILEQUERY       MAXNBRESPONSES  10000

# The default service class to be used if none is provided in the command line.
# Useful for diskservers where movers can be forced to use the service class the
# diskserver belongs to.

#STAGER SVCCLASS default

# The following option defines how longer in seconds stager clients should wait for
# a callback from the stager before timing out and giving up. The default value is
# 30 days (2592000 seconds)

#STAGER TIMEOUT 2592000


## Service Configuration ############################################################

# The following option defines the maximum possible length of a log message that can
# be sent to syslog. By default the value is empty, instructing the logging
# interface to automatically determine this value based on the machines
# configuration. If the value cannot be determined, a value of 1024 will be used for
# syslog and 2000 for rsyslog.

#DLF MaxMessageSize

# Internal monitoring and metrics collection
# SamplingInterval is the time in seconds between two updates of the monitoring data

#Metrics  SamplingInterval   30

# FileLocation is the directory where the monitoring data will be dumped. Each
# enabled daemon will create a <daemonName>.<role>.xml file in this directory.

#Metrics  FileLocation       /var/spool/castor

# The default port on which the request handler should listen. Note that this can
# be overwritten by environment variable and command line argument

#RH PORT 9002
#RH SEC_PORT 9007

# The RH/SRMHostsList is the list of nodes (as fully qualified names) running a CASTOR
# SRM service. SRM is allowed to pass into CASTOR a request UUID only if the machine(s)
# where SRM runs are declared in this list.
# It is required to enable this feature in order to run SRM release 2.9-1 and higher.
#RH SRMHostsList

# In 2.1.9-3 new functionality was added to the request handler to offer the ability
# to configure the rate at which users are allowed to send requests to the service. 
# This functionality, often referred to as DoS (Denial of Service) protection or
# request throttling works on the concept of rating groups.
#
# A rating group is a set of configuration parameters which describe a collection
# of users, the threshold value which applies to them and the response they should 
# receive should that threshold be exceeded.
#
# A rating group is composed of three configuration parameters prefixed by the name
# of the group. For example, if the group name was 'Exempt' then the configuration
# parameters would be: ExemptUsers, ExemptThreshold, ExemptResponse. All three
# options must be defined for the group configuration to be valid.
#
# The following text describes each of the above options in more detail:
#
#  Users     A list of space separated users who are subject to the groups threshold
#            and response configuration parameters. A user can be defined by their
#            user and group, group only and by the special keyword all. For example,
#            stage:st, *:st, all.
#  Threshold Defines the maximum number of allowed requests within a given time
#            interval in seconds. The value for this option must be given in the
#            following format:
#              <max_requests>/<interval>
#
#            Both the max_requests and interval components must be greater than or
#            equal to 0. A threshold value of 0/0 is the equivalent to saying that 
#            the group of users are exempt.
#
#  Response  Defines what response the user should receive when they exceed the
#            maximum number of requests over a given time interval. The valid values
#            are:
#              always-accept     : The users are exempt from checks
#              close-connection  : The connection to the client is closed
#              reject-with-error : An error message is returned to the client stating
#                                  that they have exceeded their maximum number of
#                                  allowed requests with an error code of EBUSY.
#
# The history of users requests are stored in memcached, a high performance,
# distributed memory object caching system. As a result this history can be shared
# across multiple machines and is persistent across daemon restarts. Note: memcached
# does not come with any security and therefore it is advised to restrict access to
# trusted clients using iptables.
#
# Notes:
#  - There are no restrictions to the number of rating groups.
#  - A user defined by their name and group e.g. stage:st cannot exist in multiple
#    groups.
#  - Any errors generated by calls to memcached are logged by the request handler and
#    the rate check is ignored allowing the user to proceed normally.
#  - Changes to the configuration options will only take effect upon request handler
#    restarts or when new threads are created to handle additional load.
#  - Internally the rate limiting functionality uses buckets to store the history of
#    the number of requests performed by a user. Each bucket represents 10 seconds
#    of time. It is not advised to have very large time intervals as this directly
#    translates to increased processing time.

# The following option defines the list of rating groups to be used.
#RH RateLimitGroups Exempt Default

# A comma seperated list of hosts to act as memcached servers
#RH RateLimitServerList 127.0.0.1:11211

# Example rating groups:
#RH ExemptUsers       stage:st
#RH ExemptThreshold   0/0
#RH ExemptResponse    always-accept

#RH DefaultUsers      all
#RH DefaultThreshold  1/300
#RH DefaultResponse   reject-with-error

# The CNS/CONRETRY option defines how often nameserver clients should attempt to
# reconnect to a nameserver which is not available. By default the value is 38880
# times. Which in conjunction with the CNS connection retry interval is approx 1 week
#CNS    CONRETRY        38880

# The CNS/CONRETRYINT option defines how long in seconds, nameserver clients should
# wait before making new attempts to connect to the nameserver should it be
# unavailable
#CNS    CONRETRYINT     60

# The following option defines whether or not file checksum information generated by
# the movers should be stored in and retrieved from the name server. This option is
# case insensitive and the default value is YES. Note: This functionality requires
# the name server to be running version 2.1.8 or newer.
#CNS    USE_CKSUM       YES

# The default service class and protocol used by repack2 for writing files to disk
# and back to tape.

#REPACK SVCCLASS default
#REPACK PROTOCOL rfio

# Parameters to limit concurrent repack processes

#REPACK MAXFILES 100000
#REPACK MAXTAPES 20


# rmmasterd (Resource Monitoring Daemon)
#   - responsible for collecting monitoring information from rmnoded's and
#     managing state information
#
# The frequency at which the rmmaster daemon updates/synchronises the monitoring
# information stored in the shared memory to the stager database

#RmMaster UpdateInterval        10

# Defines the maximum amount of time in seconds that an rmnode daemon can be out of
# contact with the rmmaster daemon before automatically being set to a disabled state.
# A value of -1 disables this check

#RmMaster HeartbeatTimeout      60

# Setting this parameter to yes allows RmMaster to run in noLSF mode
# In this mode, no LSF call are used and RmMaster daemons use the stager DB to elect
# a master node and decide who updates the stager DB

#RmMaster NoLSFMode      no

# rmnoded (Resource Monitoring Node Daemon)
#   - responsible for collecting monitoring information from diskservers and
#     reporting the collected data back to the rmmaster daemon.
#   - Also responsible for sub directory creation in mount points!!
#
# Defines the frequency in seconds that state updates are sent to the rmmaster daemon.
# This includes the status of the node and slow moving metrics like total memory and
# total swap which does not vary outside of reboots

#RmNode  StateUpdateInterval    60

# The frequency in seconds at which metric information is sent to the rmmaster daemon
# about the filesystems defined in RmNode/MountPoints.

#RmNode  MetricsUpdateInterval  10
#RmNode  MountPoints            /srv/castor/01/ /srv/castor/02/ /srv/castor/03/

# The location of the nodes status file detailing the status of the disk server and
# its associated filesystems as seen by the central server.
#
# Note: The rmnode daemon always sends a status of PRODUCTION, this status can only
#    be changed by forcing it into another state via the use of rmAdminNode. As the
#    the state reported by the client is always PRODUCTION the status file can be
#    used to provide input to third party monitoring systems as to the true status
#    of the diskserver i.e. how the LSF plugin and stager see the diskserver.

#RmNode  StatusFile             /etc/castor/status

# The following definition allow the min, max and minallowed free space to be defined
# at the disk server level respectively.

RmNode          MinFreeSpace           .10
RmNode          MaxFreeSpace           .15
RmNode          MinAllowedFreeSpace    .05

# scheduler (LSF 7.0 plugin)
#
# The following values define the predicated cost of starting a new job on a
# filesystem once that filesystem has been selected to run a job. A predicated value
# is  required to compensate for the latency of monitoring information between the
# client and rmmaster daemon. So for example, if a job is selected to run on
# filesystem A for a read the monitoring information for the number of read streams
# will be incremented by the value of jobNbReadStreamCost.

#SchedCoeffs     jobReadRateCost          1000     # bytes/second
#SchedCoeffs     jobWriteRateCost         1000     # bytes/second
#SchedCoeffs     jobNbReadStreamCost      1
#SchedCoeffs     jobNbReadWriteStreamCost 1
#SchedCoeffs     jobNbWriteStreamCost     1

# The following definition defines the location where the plugin should write the
# scheduler notification files. The directory should be writeable by lsfadmin

Sched   SharedLSFResource       /var/www/html/lsf

# The Sched/PolicyModule defines the location of the Python module used to select
# the best filesystem and diskserver to be used to run a transfer job.

#Sched  PolicyModule            /etc/castor/policies/scheduler.py

# The location of the Python shared object library.

#Sched  DynamicPythonLib        /usr/lib64/libpython2.3.so

# Ports on which the scheduler server and the disk manager daemon are listening
TransferManager  Port          15011
DiskManager      Port          15011

# list of scheduler servers to be connected to (to be defined on diskservers)
#DiskManager     ServerHosts   server1.fully.qualified.domain server2.fully.qualified.domain ...

# Request throttling in the scheduler. Comment it to disable throttling completely
TransferManager   MaxNbTransfersScheduledPerSecond     25

# The following option defines how long in seconds a job is allowed to remain in a
# queue waiting for resources before being killed by the transfer manager. For
# convenience, a svcclass name of "all" can be used to define a default value for
# all service classes.
#
# The format of the value is:
#   <svcclass1>:<timeout1> [svcclass2:timeout2[...]]

#TransferManager     PendingTimeouts         all:120 default:120

# Defines how long in seconds that a disk2disk copy job can be in a pending state
# before being terminated. This value is global for all service classes.

#TransferManager     DiskCopyPendingTimeout  7200

# Should the transfer manager kill jobs whose resource requirements e.g requested
# filesystems can no longer be satisfied ? [yes|no]. The default is yes.
# Note that this does not impact the handling of timeouts as described in the
# PendingTimeouts and DiskCopyPendingTimeout options above.

#TransferManager     KillRequests      yes

# The SynchronizationInterval option defines how often the transfer managers check
# that jobs pending for more than 1h in the DB are still handled by the scheduling
# system. This allows to clean up inconsistencies created by double or severe failures,
# such as a job failing while a disk server manager is being restarted, or a
# complete loss of a disk server node (kernel panic, power cut, ...)
# The default value is 3600, that is one hour

#TransferManager     SynchronizationInterval      3600

# maximum number of slots on this node. Note that these slots are virtual and that
# each transfer may take more than one, depending on the protocol
# the number of slots taken per protocol is defined in the DiskManager/<protocol>weight
# entries. Note that disk to disk copies are handled specially (d2dsrc and d2dend protocols)
DiskManager     NbSlots       60

# Relative weights of the different protocols and types of transfers, in terms of number
# of slots a given transfer will take for each protocol/type of transfer
DiskManager     xrootWeight   1
DiskManager     rootWeight    2
DiskManager     rfioWeight    3
DiskManager     rfio3Weight   3
DiskManager     gsiftpWeight  5
DiskManager     d2dsrcWeight  3
DiskManager     d2ddestWeight 3
DiskManager     recallWeight 10
DiskManager     migrWeight   10

# maximum interval (in seconds) between 2 retries on scheduling of the destination
# of the disk to disk copy when source is not ready
DiskManager     MaxRetryInterval     300

# The following option defines how long in seconds a job is allowed to remain in a
# queue waiting for resources before being killed by the job manager. For
# convenience, a svcclass name of "all" can be used to define a default value for
# all service classes. Changes to this option can be done without a job manager
# restart.
#
# The format of the value is:
#   <svcclass1>:<timeout1> [svcclass2:timeout2[...]]

#JobManager     PendingTimeouts         all:120 default:120

# Defines how long in seconds that a disk2disk copy job can be in a pending state
# before being terminate in seconds. This value is global for all service classes.

#JobManager     DiskCopyPendingTimeout  7800

# The MaxDiskCopyRunTime defines the maximum amount of time that a disk2disk copy
# job is allowed to run for in seconds before being killed by LSF. This helps
# reclaim job slots from replication jobs which are stuck when one end of the
# transfer disappears while the file is being replicated. E.g a diskserver crash.
#
# The default value is 18000 seconds (5 hours wallclock) and this functionality can
# be disabled by setting a value of -1.

#JobManager     MaxDiskCopyRunTime 18000

# Should the job manager kill jobs whose resource requirements e.g requested
# filesystems can no longer be satisfied ? [yes|no]. The default is yes. Changes to
# this option can be done without a job manager restart.

#JobManager     ResReqKill      yes

# The ManagementInterval option defines how often the job manager should query LSF in
# order to determine if an action needs to be taken on behalf of jobs waiting for
# execution. Such actions include: notifying the stager of jobs killed via a call to
# bkill and terminating jobs that have been in a PEND'ing status for too long.
#
# Note: the value must be greater then 10 seconds. The management functionality can
# be disabled completely by setting a value of 0. Default is 60s

#JobManager     ManagementInterval      300

# How many times should the job manager try and submit a job into LSF before giving
# up and terminate the request? The default value is 3 times.

#JobManager     SubmitRetryAttempts     3

# The SubmitRetryInterval defines how long in seconds the job manager should wait
# between retry attempts to submit a job into LSF. The default values is 5 seconds.

#JobManager     SubmitRetryInterval     5

# Should the job manager perform reverse uid lookups on all new job requests? [yes|no]
# The default value is yes.

#JobManager     ReverseUidLookups       yes

# In order to improve submission speeds into LSF the job manager pre creates a number
# of child processes which are instructed to submit jobs into LSF. This eliminates
# the need to fork a independent process for every submission.
#
# Note: the value must be less then 200. Setting the value too high could kill the
#       LSF master, the default is 2

#JobManager     PreforkedWorkers        2

# The following option defines how and where jobs should go to download notification
# files. The location must be prefixed with file:// or http:// to denote whether the
# file is on a shared filesystem or served via web server.
# E.g. file:///usr/share/lsf/castor_job
#
# When using http:// as a URI (Uniform resource indicator) it is possible to specify
# the download server using the LSB_MASTERNAME keyword. This keyword will be
# replaced at runtime by the name of the current LSF master.

JobManager      SharedLSFResource       http://castorscheduler.cern.ch/lsf

# The RetryAttempts option defines how many times stagerjob should try and download
# the notification file written by the scheduler. This option only applies to http://
# downloads

#Job    RetryAttempts   60

# The RetryInterval defines how long in seconds stagerjob should wait between retry
# attempts to download the notification file written by the scheduler at the
# location specified by the JobManager/SharedLSFResource option. This option only
# applies to http:// downloads

#Job    RetryInterval   10

# The RetryAttempts option defines how many times d2dtransfer should try and download
# the notification file written by the scheduler. This option only applies to
# http:// downloads

#DiskCopy       RetryAttempts   60

# The RetryInterval defines how long in seconds the d2dtransfer process should wait
# between retry attempts to download the notification file written by the scheduler
# at the location specified by the JobManager/SharedLSFResource option. This option
# only applies to http:// downloads

#DiskCopy       RetryInterval   10

# The frequency at which the GC daemon checks the stager to see whether there are
# files to be removed on the diskserver. This value is represented in seconds.

#GC      Interval       300

# The SyncInterval is the frequency in seconds between full rechecks of the
# diskservers contents with the stager catalog and nameserver. I.e once the
# synchronization check is complete, the GC daemon will wait SyncInterval seconds
# before starting the next round of checks. To disable all synchronization checks
# set this value to 0

#GC      SyncInterval   1800

# The ChunkSize defines the number of files that the GC daemon should synchronize
# with the stager catalog and nameserver in one go. Note: the largest value is 3000

#GC      ChunkSize      2000

# The ChunkInterval is the frequency in seconds between synchronization queries to
# the stager catalog and nameserver. I.e the interval between two bulk checks of
# size ChunkSize

#GC      ChunkInterval  120

# By default the startup of the GC daemon is deliberately offset by a random interval
# between 1 and 15 minutes. This randomized delay should prevent all GC's in an
# castor2 instance from deleting files at the same time causing an oscillation in
# incoming network traffic due to deletions. By uncommenting this line, you force the
# garbage collection to ignore this starting delay.

#GC      ImmediateStart yes

# This option allows to disable the synchronization between the diskservers and the
# stager catalog. The synchronization with the nameserver is not affected.

#GC      DisableStagerSync no


## Security Configuration ###########################################################

# The following option defines the list of security protocols which are supported by
# CASTOR headnodes (e.g. rhd and nsd) and diskservers

#CSEC MECH GSI KRB5

# The location of the stage user certificate.
#CSEC X509_USER_CERT /etc/grid-security/castor-csec/castor-csec-cert.pem

# The location of the stage user key.
#CSEC X509_USER_KEY /etc/grid-security/castor-csec/castor-csec-key.pem

# The location of the grid mapfile
#CSEC GRIDMAP /etc/grid-security/grid-mapfile

# The location of the keytab file owned by stage user.
#CSEC KRB5_KTNAME FILE:/etc/castor-csec-krb5.keytab

# Next configuration is required for logging purposes
#CSEC DEBUG YES
#CSEC TRACE 3

# Location of the file where the trace will be stored.
#CSEC TRACEFILE location /var/log/castor/rfiod.csec.log


## Transfer Protocols ###############################################################

# The rootsys configuration option points to the directory where the rootd binary is
# located. The default is /usr/local/bin
#ROOT   ROOTSYS /usr/local/bin

# The following option defines a range of ports which can be used by rootd to serve
# transfers. Note: Ports below 1024 and above 65535 cannot be used.
#ROOT	PORT_RANGE	45000,46000

# The following option defines how long in seconds a root job waits for a client to
# connect before giving up and releasing the slot on the diskserver. Values < 1 are
# considered invalid.
#ROOT TIMEOUT 60

# The following option defines a pair of timeout values used by stagerjob for xroot
# based transfers. The first number represents the amount of time in seconds that
# stagerjob will wait for xrootd to notify it that a file has been opened. The second
# number represents how long to wait for a close notification. The default value
# stipulates that if the xrootd daemon does not connect to stagerjob within 30
# seconds the transfer will be terminated. If a connection is established the
# duration of the transfer cannot exceed 172800 seconds (2 days).
#XROOT TIMEOUTS 30 172800

#
# RFIO/RFIOD
#
RFIO    CONNTIMEOUT           10        # Timeout on the connect() system call
RFIO    CONRETRY              10        # Number of connection retry
RFIO    CONRETRYINT           1         # Number of second between every retry
RFIO    DAEMONV3_RDSIZE       2097152   # Daemon buffer size for read
RFIO    DAEMONV3_WRSIZE       2097152   # Daemon buffer size for write
RFIO    DAEMONV3_RDMT_BUFSIZE 2097152   # Daemon buffer size for read in multithreaded mode
RFIO    DAEMONV3_WRMT_BUFSIZE 2097152   # Daemon buffer size for write in multithreaded mode
RFIO    DAEMONV3_RDMT_NBUF    4         # Daemon number of buffers for reads in multithreaded mode
RFIO    DAEMONV3_RDMT         1         # Whether the daemon should read in multithreaded mode
RFIO    DAEMONV3_WRMT_NBUF    4         # Daemon number of buffers for writes in multithreaded mode
RFIO    DAEMONV3_WRMT         1         # Whether the daemon should write in multithreaded mode

RFIOD   TCP_NODELAY           YES       # Use TCP_NODELAY on the server side
RFIOD   KEEPALIVE             YES       # Use KEEPALIVE socket option
#RFIOD   DIRECTIO              YES       # Enabled O_DIRECT support to bypass kernel page cache
                                        # experimental, please contact castor dev for details
#RFIOD   XFSPREALLOC           1024      # Enables preallocation for XFS
                                        # experimental, please contact castor dev for details
RFIOD   DEBUG                 NO
RFIOD   LOGFILE               /var/log/castor/rfiod.log
RFIOD   WTRUST                castoradm4.cern.ch
RFIOD   RTRUST                castoradm4.cern.ch
RFIOD   XTRUST                castoradm4.cern.ch
RFIOD   FTRUST                castoradm4.cern.ch

# The following option enables checksum support in rfiod. Every file written to disk
# will have a checksum calculated for it. This checksum will be stored in the
# extended attributes of the file. When the file is read again by the client using
# RFIO as a protocol the checksum is calculated on the fly and verified against the
# recorded value. If it differs the transfer will fail.
#RFIOD  USE_CKSUM       YES

# The following option defines a list of directories/paths from which rfiod is
# allowed to read and write too. This list is appended to the directories specified
# in the RmNode/MountPoints option.
#RFIOD  PathWhiteList

# The following option defines a range of ports which can be used by rfiod to serve
# transfers. Note: Ports below 1024 and above 65535 cannot be used.
#RFIOD	PORT_RANGE	50000,55000

#
# GSIFTP
#
#GSIFTP GLOBUS_LOCATION  /opt/globus                  # the root dir for globus installation
#GSIFTP XROOT_LOCATION   /opt/xrootd                  # the base directory of the xroot installation
#GSIFTP LOGFILE          /var/log/gridftp.log         # log file for the gridftp server
#GSIFTP NETLOGFILE       /var/log/globus-gridftp.log  # netlog file for traffic calculation
#GSIFTP LOGLEVEL         ALL                          # loglevel for the log file
                                                      # one of following ERROR, WARN, INFO, DUMP, ALL
#GSIFTP CONTROL_TCP_PORT_RANGE  20000,21000           # port range for control ports min,max
#GSIFTP DATA_TCP_PORT_RANGE     20000,21000           # port range for data ports min,max
#GSIFTP DATA_TCP_SOURCE_RANGE   20000,21000           # port range for data ports min,max
                                                      # min>1023, max<65536
# key and cert files must be chown stage:st
#GSIFTP X509_USER_CERT  /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-cert.pem
#GSIFTP X509_USER_KEY   /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-key.pem

# The following option defines how long in seconds a gsiftp job waits for a client to
# connect before giving up and releasing the slot on the diskserver. Values < 1 are
# considered invalid. The default value matches the SRM default timeout as well as
# the FTS one.
#GSIFTP TIMEOUT 180

# Enable support for xroot in GridFTP internal mode.
#GSIFTP USEXROOT NO

# The following option enables checksum support in gridftp. Every file written to disk
# will have a checksum calculated for it. This checksum will be stored in the
# extended attributes of the file. When the file is read again by the client using
# GSIFTP as a protocol the checksum is calculated on the fly and verified against the
# recorded value. If it differs the transfer will fail.
#GSIFTP USE_CKSUM YES

## Tape #############################################################################

ACCT    RTCOPY          YES             # Rtcopy accounting
ACCT    TAPE            YES             # Tape accounting

RTCOPY  RETRY           12              # Number of TMS retries (obsolete)
RTCOPY  SLEEP           300             # Sleep between every TMS retry (obsolete)
#RTCOPYD        NB_BUFS 300             # Number of rtcopy buffers for a 2G machine (1G machine? put 160)
#RTCOPYD        BUFSZ   4194304         # Size of a buffer (4M is the default)

# A list of hosts which are trusted to issue special commands to rtcpd and VDQM
#ADMIN  HOSTS   castoradm1 castoradm2

# Only useful if the catalog contains references to disk files that have been
# physically deleted, which should normally never be the case.

migrator        CHECKFILE       NO

# If CHECKFSEQ is set to YES the migrator will check the start file sequence number
# (FSEQ) of the tape given by VMGR with the last FSEQ known by the CASTOR name server.
# This is an extra check to make sure that the VMGR and CASTOR name server are
# consistent.

migrator        CHECKFSEQ       NO

# The migrator CFLOCKONMIGRATED parameter specifies whether or not a migrator
# will take a lock on a castor-file row in the stager database before recording
# the fact that a copy of the file has been successfully migrated to tape.
#
# Possible values are TRUE and FALSE.  Default value is TRUE.
# migrator CFLOCKONMIGRATED TRUE


# Not needed unless one suspects a problem with the recall of multi-segment files.

recaller        CHECKFILE       YES

# Config the drive down in case of a tape alert (YES/NO). If the option is omitted,
# the default value (YES) will be used.
#
TAPE    DOWN_ON_TPALERT         YES

# Config the drive down in case of an unload failure (YES/NO). If the option is
# omitted, the default value (YES) will be used.
#
TAPE    DOWN_ON_UNLOAD_FAILURE  YES

# What to do in case of a bad MIR on load. The valid options are:
#   REPAIR : SPACE to EOD, REWIND
#   IGNORE : simply go on
#   CANCEL : cancel the request
#
# If the option is omitted, the default value (CANCEL) will be used.
#
TAPE    BADMIR_HANDLING         REPAIR

# Let tape daemon confirm its idle state to VDQM at certain intervals (this is to
# cleanup inconsistencies where VDQM sees a drive busy, while tape daemon reports the
# drive to be idle)
#
#   CONFIRM_DRIVE_FREE       : switch on/off this update mechanism
#   CONFIRM_DRIVE_FREE_INTVL : check/set interval in seconds (default: 900)
#
# If the option is omitted, the default value (NO) will be used.
#
TAPE    CONFIRM_DRIVE_FREE              NO
#TAPE   CONFIRM_DRIVE_FREE_INTVL        900

# Timeout for a locate [milliseconds]. 180 secs is the lower threshold and the
# default. This is the timeout passed to the SCSI command that does the SPACE by
# blockID (for reads only).
#
#TAPE LOCATE_TIMEOUT 180000

# Timeout for positioning [seconds]. 900 secs is the lower threshold and the default.
# This is the timeout for finding the correct position on read and write. Positioning
# may involve several calls to ioctls. In order to prevent damage from wrong
# positioning this timeout has been introduce to intercept things if the positioning
# took suspiciously long.
#
#TAPE POSITION_TIMEOUT 900

# Set the st options which have been 'set' by the kernel patch before
# (0 == off, 1 == on). If an option is omitted, the values as in the kernel patch
# will be used, i.e. all set to 0.
#
TAPE   ST_BUFFER_WRITES        0
TAPE   ST_ASYNC_WRITES         0
TAPE   ST_READ_AHEAD           0

# Set the ST timeouts (done by a kernel patch before). If the parameter are omitted,
# the values from the patch are used, i.e. 900 seconds and 3600 seconds for the
# normal and the long timeout, respectively.
#
TAPE    ST_TIMEOUT              900
TAPE    ST_LONG_TIMEOUT         3600

# Define the reaction if a rlstape process crashes.
#
#   TAPE CRASHED_RLS_HANDLING <action>, where <action> can be
#     DOWN : put the drive down in case of a dumped rlstape
#     RETRY: retry the release in case of a dumped rlstape
#
#   All other values for <action> are ignored and tape daemon will not react at all.
#
#   For action RETRY the number of retries and the time delay (in seconds) between
#   them can be specified (default values: 3 attempts, at a 60 seconds interval).
#   After that the drive is put down.
#
TAPE CRASHED_RLS_HANDLING RETRY
TAPE CRASHED_RLS_HANDLING_RETRIES 3
TAPE CRASHED_RLS_HANDLING_RETRY_DELAY 60

# Define the tape logging facility (relevant for tape daemon and rtcpd)
#
#   TAPE TPLOGGER <facility>, where <facility> can be
#     DLF    : use dlf
#     SYSLOG : use syslog (logging to LOCAL_LOG0).
#
# (When using SYSLOG: tape daemon is logging to LOG_LOCAL0, rtcpd is logging
# to LOG_LOCAL1.)
#
TAPE TPLOGGER DLF

# Handle an ACS LIBRARY_FAILURE
#
#   TAPE ACS_MOUNT_LIBRARY_FAILURE_HANDLING <action> <#retries> <delay>
#   TAPE ACS_UNMOUNT_LIBRARY_FAILURE_HANDLING <action> <#retries> <delay>
#
#   <action> can be:
#      RETRY: retry the mount/unmount
#      DOWN : put the drive down
#
#   <#retries> is the number of retries
#
#   <delay> is the delay between retry attempts in seconds
#
TAPE ACS_MOUNT_LIBRARY_FAILURE_HANDLING retry 1 300
TAPE ACS_UNMOUNT_LIBRARY_FAILURE_HANDLING retry 1 300

# Relax the blank tape checking (YES/NO).
#
# This option allows for relaxing the blank tape checking by suppressing the final
# "are BOT and EOD set?" check. Required on certain SUN drives. Use with care!
#
# If the option is omitted, the default value (NO) will be used.
#
#TAPE RELAX_BLANKTAPE_CHECK NO

# The following option allows to enable buffered tape marks support in taped. The two
# of three tape marks per file will be written to tape in immediate mode. In order to 
# successfully use this function, loading the appropriate st driver is required. 
#
# If the option is omitted, the default value (NO) will be used.
#
#TAPE BUFFER_TAPEMARK NO

## Mighunter ########################################################################

# The name of the Python module used by the mighunter daemon to decide which
# tape pools to attach to which tape copies.  The module should contain Python
# functions with names that match those given by the "streampolicy" attributes
# of the service classes definied in this CASTOR system.
#
# This configuration parameter replaces "Policy Migration".
#
# The Python-interpreter embedded within the mighunter daemon has the
# "/etc/castor/policies" directory in its default search path for module files
# (PYTHONPATH).  Therefore the embedded Python-interpreter will effectively
# append the extention ".py" to the end of the value of
# "MIGHUNTER MIGRATION_POLICY" and will look for the resulting filename in the
# "/etc/castor/policies/" directory.  For example, the value "migration" will
# cause the embedded Python-interpreter to load the file
# "/etc/castor/policies/migration.py".
MIGHUNTER MIGRATION_POLICY migration

# The name of the Python module used by the mighunter daemon to decide when to
# start a stream.  The module should contain Python functions with names that
# match those given by the "migratorpolicy" attributes of the service classes
# defined in this CASTOR system.
#
# This configuration parameter replaces "Policy Stream"
#
# The Python-interpreter embedded within the mighunter daemon has the
# "/etc/castor/policies" directory in its default search path for module files
# (PYTHONPATH).  Therefore the embedded Python-interpreter will effectively
# append the extention ".py" to the end of the value of
# "MIGHUNTER STREAM_POLICY" and will look for the resulting filename in the
# "/etc/castor/policies/" directory.  For example, the value "stream" will
# cause the embedded Python-interpreter to load the file
# "/etc/castor/policies/stream.py".
MIGHUNTER STREAM_POLICY	stream

# The minimum amount of data in bytes required before migration to tape is
# started.  For convenience the units can be to changed to megabytes, gigabytes
# or terabytes by appending the letter 'M', 'G' or 'T' respectively.
MIGHUNTER SIZECEILING 10G


## Rechandler #######################################################################

# The name of the Python module used by the rechandler daemon to decide when
# to start recalling files from a tape.  The module should contain the function
# specified by the "RECHANDLER RECALL_POLICY_FUN" configuration parameter.
#
# This configuration parameter replaces "Policy Recall".
#
# The Python-interpreter embedded within the rechandler daemon has the
# "/etc/castor/policies" directory in its default search path for module files
# (PYTHONPATH).  Therefore the embedded Python-interpreter will effectively
# append the extention ".py" to the end of the value of
# "RECHANDLER RECALL_POLICY" and will look for the resulting filename in the
# "/etc/castor/policies/" directory.  For example, the value "rechandler" will
# cause the embedded Python-interpreter to load the file
# "/etc/castor/policies/rechandler.py".
RECHANDLER RECALL_POLICY rechandler

# The name of the Python function called by the rechandler daemon to decide
# when to start recalling files from a tape.  The function must exist in the
# Python module specified by the "RECHANDLER  RECALL_POLICY_FUN" configuration
# parameter.
#
# This configuration parameter replaces "Policy RecallFunction".
RECHANDLER RECALL_POLICY_FUN globalRecallPolicy


## Tape Gateway #####################################################################

# The minimum number of threads in the Worker thread pool.
TAPEGATEWAY MINWORKERTHREADS 60

# The maximum number of threads that can be in the Worker thread pool.
TAPEGATEWAY MAXWORKERTHREADS 120

# The TCP/IP port used by the tapegateway to receive messages from the tape
# server
TAPEGATEWAY PORT 62801

# The name of the Python module used by the tapegateway daemon to decide what
# to to do with failed migrations.  The module should contain a Python function
# with the same name as the module.  The tapegateway daemon will always call
# that function.
#
# This configuration parameter replaces "Policy RetryMigration" and
# "Policy RetryMigrationFunction"
TAPEGATEWAY MIG_RETRY_POLICY migrationRetry

# The name of the Python module used by the tapegateway daemon to decide what
# to to do with failed recalls.  The module should contain a Python function
# with the same name as the module.  The tapegateway daemon will always call
# that function.
#
# This configuration parameter replaces "Policy RetryRecall" and
# "Policy RetryRecallFunction"
TAPEGATEWAY REC_RETRY_POLICY recallRetry


## Tape Bridge ######################################################################

# The  port  on  which the tapebridge will listen for RTCOPY jobs from the VDQM.
# The default is 5070.  A value other than the default should NOT normally be
# used.
TAPEBRIDGE VDQMPORT 5070

# The inclusive low port of the tapebridge's RTCPD callback port number range.
# The default is 30101.
TAPEBRIDGE RTCPDLOWPORT 30101

# The inclusive high port of the tapebridge's RTCPD callback port number range.
# The default is 30200.
TAPEBRIDGE RTCPDHIGHPORT 30200


## Tape Bridge Clients: dumptp, readtp and writetp ##################################

# The inclusive low port of the tapebridge client callback port number range.
# The default is 30201.
#TAPEBRIDGECLIENT LOWPORT

# The inclusive high port of the tapebridge client callback port number range.
# The default is 30300.
#TAPEBRIDGECLIENT HIGHPORT


## Logging ##########################################################################

# The following configuration directives control what messages priorities are logged
# by CASTOR daemons. Valid values are:
#
# LOG_EMERG    - System is unusable
# LOG_ALERT    - Action must be taken immediately
# LOG_CRIT     - Critical conditions
# LOG_ERR      - Error conditions 
# LOG_WARNING  - Warning conditions 
# LOG_NOTICE   - Normal but significant condition
# LOG_INFO     - Informational
# LOG_DEBUG    - Debug-level messages 
#
# The default value is LOG_INFO which instructs the corresponding daemon to log all
# message priorities above and including INFO.

tapebridged   LogMask LOG_INFO
d2dtransfer   LogMask LOG_INFO
gcd           LogMask LOG_INFO
jobmanagerd   LogMask LOG_INFO
mighunterd    LogMask LOG_INFO
migrator      LogMask LOG_INFO
rhd           LogMask LOG_INFO
recaller      LogMask LOG_INFO
rechandlerd   LogMask LOG_INFO
repackd       LogMask LOG_INFO
rmcd          LogMask LOG_INFO
rmmasterd     LogMask LOG_INFO
rmnoded       LogMask LOG_INFO
rtcpclientd   LogMask LOG_INFO
rtcpd         LogMask LOG_INFO
schedulerd    LogMask LOG_INFO
stagerd       LogMask LOG_INFO
stagerjob     LogMask LOG_INFO
taped         LogMask LOG_INFO
tapegatewayd  LogMask LOG_INFO
tperrhandler  LogMask LOG_INFO
vdqmd         LogMask LOG_INFO
transfermanagerd LogMask LOG_INFO
diskmanagerd  LogMask LOG_INFO

#####################################################################################

#
# Service mapping - which type of database should be used for a given service
#

SvcMapping             DBCNV           16 #SVC_ORACNV
SvcMapping             DBRHSVC         42 #SVC_ORARHSVC
SvcMapping             DBSTAGERSVC     18 #SVC_ORASTAGERSVC
SvcMapping             DBTAPESVC       19 #SVC_ORATAPESVC
SvcMapping             DBFSSVC         20 #SVC_ORAFSSVC
SvcMapping             DBJOBSVC        21 #SVC_ORAJOBSVC
SvcMapping             DBGCSVC         22 #SVC_ORAGCSVC
SvcMapping             DBQUERYSVC      23 #SVC_ORAQUERYSVC
SvcMapping             DBVDQMSVC       24 #SVC_ORAVDQMSVC

#
# Library definition (dlopen) - which library holds which service
#

DynamicLib             ORACNV         libcastorcommonora.so.2.1
DynamicLib             ORARHSVC       libcastorcommonora.so.2.1
DynamicLib             ORASTAGERSVC   libcastorcommonora.so.2.1
DynamicLib             ORATAPESVC     libcastorcommonora.so.2.1
DynamicLib             ORAFSSVC       libcastorcommonora.so.2.1
DynamicLib             ORAJOBSVC      libcastorcommonora.so.2.1
DynamicLib             ORAGCSVC       libcastorcommonora.so.2.1
DynamicLib             ORAQUERYSVC    libcastorcommonora.so.2.1
DynamicLib             ORAVDQMSVC     libcastorvdqmora.so.2.1


# End-of-File
