######################################################################################
#
# CASTOR2 Sample Configuration File
# $Id: castor.conf,v 1.140 2008/10/09 15:59:20 waldron Exp $
#
######################################################################################

#
# Service to Host/Port Mapping
#

#RH         HOST castorrh
#STAGER     HOST castorrh
#STAGER     NOTIFYHOST castorstager
#STAGER     NOTIFYPORT 55015
#RTCPCLIENTD HOST castorrtcpcld
#RTCPCLIENTD NOTIFYPORT 5050
#JOBMANAGER HOST castorjobmanager
#JOBMANAGER NOTIFYPORT 15011
#RM         HOST castorscheduler
#RM         PORT 15003
#CNS        HOST castorns
#EXPERT     HOST castorexpert
#DLF        PORT 5036
#VDQM       HOST castorvdqm
#VMGR       HOST castorvmgr
#UPV        HOST castorcupv
#REPACK     HOST castorrepack


## Client configuration #############################################################

# The port range to be used by clients for the stager callbacks. If not present a port
# range of 30000-30100 is used. You can disable the port range by setting both values
# to 0

CLIENT   LOWPORT        30000
CLIENT   HIGHPORT       40000

# The following option defines in bytes the maximum size of a message that can be
# read by a client or server. The default value and minimum value is 20MB
# Note: it is not advised to modify this value unless recommended to do so by the
# CASTOR team.

#CLIENT  MAX_NETDATA_SIZE 20971520

# Maximum number of responses allowed when a file query using reqexp is done. Default
# is 1000, max allowed is 30000. Can also be set by defining the environment variable
# FILEQUERY_MAXNBRESPONSES.

FILEQUERY	MAXNBRESPONSES	1000

# The default service class to be used if none is provided in the command line.
# Useful for diskservers where movers can be forced to use the service class the
# diskserver belongs to.

#STAGER SVCCLASS default

# The following option defines how longer in seconds stager clients should wait for
# a callback from the stager before timing out and giving up. The default value is
# 30 days (2592000 seconds)

#STAGER TIMEOUT 2592000


## Service Configuration ############################################################

# The default port on which the request handler should listen. Note that this can
# be overwritten by environment variable and command line argument

#RH PORT 9002
#RH SEC_PORT 9007

# The CNS/CONRETRY option defines how often nameserver clients should attempt to
# reconnect to a nameserver which is not available. By default the value is 38880
# times. Which in conjunction with the CNS connection retry interval is approx 1 week
#CNS    CONRETRY        38880

# The CNS/CONRETRYINT option defines how long in seconds, nameserver clients should
# wait before making new attempts to connect to the nameserver should it be
# unavailable
#CNS    CONRETRYINT     60

# The following option defines whether or not file checksum information generated by
# RFIOD should be stored and retrieved from the name server. This option in case
# insensitive and the default value is NO. Note: This functionality requires the
# the name server to be running version 2.1.8 or newer of the CASTOR2 software and
# that the RFIOD/USE_CKSUM option is enabled on all diskservers.
#CNS	USE_CKSUM	NO

# The default service class and protocol used by repack2 for writing files to disk and
# back to tape.

#REPACK SVCCLASS default
#REPACK PROTOCOL rfio

# Parameters to limit concurrent repack processes

#REPACK MAXFILES 100000
#REPACK MAXTAPES 20


# rmMasterDaemon (Resource Monitoring Daemon)
#   - responsible for collecting monitoring information from rmNodeDaemon's and
#     managing state information
#
# The frequency at which the rmMasterDaemon updates/synchronises the monitoring
# information stored in the shared memory to the stager database

#RmMaster UpdateInterval        10

# Defines the maximum amount of time in seconds that an rmNodeDaemon can be out of
# contact with the rmMasterDaemon before automatically being set to a disabled state.
# A value of -1 disables this check

#RmMaster HeartbeatTimeout      60

# rmNodeDaemon
#   - responsible for collecting monitoring information from diskservers and reporting
#     the collected data back to the rmMasterDaemon.
#   - Also responsible for sub directory creation in mount points!!
#
# Note: Don't forget to specify MountPoints option which replaces the old RMNODECONFIG
#       file in pre 2.1.3 releases.
#
# Defines the frequency in seconds that state updates are sent to the rmMasterDaemon.
# This includes the status of the node and slow moving metrics like total memory and
# total swap which does not vary outside of reboots

RmNode	 StateUpdateInterval  	60

# The frequency in seconds at which metric information is sent to the rmMasterDaemon
# about the filesystems defined in RmNode/MountPoints.

RmNode	 MetricsUpdateInterval 	10
RmNode	 MountPoints  		/srv/castor/01/ /srv/castor/02/ /srv/castor/03/

# The location of the nodes status file detailing the status of the disk server and
# its associated filesystems as seen by the central server.
#
# Note: The rmNodeDaemon always sends a status of PRODUCTION, this status can only
#    be changed by forcing it into another state via the use of rmAdminNode. As the
#    the state reported by the client is always PRODUCTION the status file can be
#    used to provide input to third party monitoring systems as to the true status
#    of the diskserver i.e. how the LSF plugin and stager see the diskserver.

RmNode	 StatusFile		/etc/castor/status

# The following definition allow the min, max and minallowed free space to be defined
# at the disk server level respectively. In releases prior to 2.1.3 this had to be
# done via manual SQL statements in the database

RmNode 	 MinFreeSpace 		.10
RmNode 	 MaxFreeSpace 		.15
RmNode 	 MinAllowedFreeSpace 	.05

# scheduler (LSF 7.0 plugin)
#
# The following values define the predicated cost of starting a new job on a
# filesystem once that filesystem has been selected to run a job. A predicated value
# is  required to compensate for the latency of monitoring information between the
# client and rmMasterDaemon. So for example, if a job is selected to run on filesystem
# A for a read the monitoring information for the number of read streams will be
# incremented by the value of jobNbReadStreamCost.

#SchedCoeffs     jobReadRateCost          1000     # bytes/second
#SchedCoeffs     jobWriteRateCost         1000     # bytes/second
#SchedCoeffs     jobNbReadStreamCost      1
#SchedCoeffs     jobNbReadWriteStreamCost 1
#SchedCoeffs     jobNbWriteStreamCost     1

# In version 2.1.3 message box 4 from the LSF plugin (used to tell the client which
# machine and filesystem to use) was replaced by notification files stored on a
# shared filsystem. This alternative approach removes the need to suspend jobs on
# entrance to LSF, lowers the required number of communications with LSF and increases
# performance.
#
# For environment where a shared/common filesystem is unavailable, the files can be
# stored locally and made accessible to clients via a web server
#
# The following definition defines the location where the plugin should write the
# notification files. The directory should be writeable by lsfadmin

Sched   SharedLSFResource       /var/www/html/lsf

# The Sched/PolicyModule defines the location of the Python module used to select
# the best filesystem and diskserver to be used to run a transfer job.

#Sched  PolicyModule            /etc/castor/policies/scheduler.py

# The location of the Python shared object library.

#Sched  DynamicPythonLib        /usr/lib64/libpython2.3.so

# The following option defines how long in seconds a job is allowed to remain in a
# queue waiting for resources before being killed by the job manager. For
# convenience, a svcclass name of "all" can be used to define a default value for
# all service classes. Changes to this option can be done without a job manager
# restart.
#
# The format of the value is:
#   <svcclass1>:<timeout1> [svcclass2:timeout2[...]]

#JobManager     PendingTimeouts         all:120 default:120

# Defines how long in seconds that a disk2disk copy job can be in a pending state
# before being terminate in seconds. This value is global for all service classes.

#JobManager     DiskCopyPendingTimeout  7800

# The MaxDiskCopyRunTime defines the maximum amount of time that a disk2disk copy
# job is allowed to run for in seconds before being killed by LSF. This helps
# reclaim job slots from replication jobs which are stuck when one end of the
# transfer disappears while the file is being replicated. E.g a diskserver crash.
#
# The default value is 18000 seconds (5 hours wallclock) and this functionality can
# be disabled by setting a value of -1.

#JobManager     MaxDiskCopyRunTime 18000

# Should the job manager kill jobs whose resource requirements e.g requested
# filesystems can no longer be satisfied ? [yes|no]. The default is no. Changes to
# this option can be done without a job manager restart.

#JobManager     ResReqKill      yes

# The ManagementInterval option defines how often the job manager should query LSF in
# order to determine if an action needs to be taken on behalf of jobs waiting for
# execution. Such actions include: notifying the stager of jobs killed via a call to
# bkill and terminating jobs that have been in a PEND'ing status for too long.
#
# Note: the value must be greater then 10 seconds. The management functionality can be
# disabled completely by setting a value of 0.

#JobManager     ManagementInterval      60

# How many times should the job manager try and submit a job into LSF before giving up
# and terminate the request? The default value is 3 times.

#JobManager     SubmitRetryAttempts     3

# The SubmitRetryInterval defines how long in seconds the job manager should wait
# between retry attempts to submit a job into LSF. The default values is 5 seconds.

#JobManager     SubmitRetryInterval     5

# Should the job manager perform reverse uid lookups on all new job requests? [yes|no]
# The default value is yes.

#JobManager     ReverseUidLookups       yes

# In order to improve submission speeds into LSF the job manager pre creates a number
# of child processes which are instructed to submit jobs into LSF. This eliminates
# the need to fork a independent process for every submission.
#
# Note: the value must be less then 200. Setting the value too high could kill the
#       LSF master, the default is 2

#JobManager     PreforkedWorkers        2

# As notifications files can be served from a web server it is necessary to also
# define the location where the Job (stagerJob) should go to retrieve the file. The
# location must be prefixed with file:// or http:// to denote whether the file is on
# a shared filesystem or served via web server. E.g. file:///usr/share/lsf/castor_job
#
# When using http:// as a URI (Uniform resource indicator) it is possible to specify
# the download server using the LSB_MASTERNAME keyword. This keyworde will be
# replaced at runtime by the name of the current LSF master.

JobManager      SharedLSFResource       http://castorscheduler.cern.ch/lsf

# The RetryAttempts option defines how many times stagerJob should try and download
# the notification file written by the scheduler. This option only applies to http://
# downloads

#Job    RetryAttempts   60

# The RetryInterval defines how long in seconds the stagerJob process should
# wait between retry attempts to download the notification file written by the
# scheduler at the location specified by the JobManager/SharedLSFResource option.
# This option only applies to http:// downloads

#Job    RetryInterval   10

# The RetryAttempts option defines how many times diskCopyTransfer should try and
# download the notification file written by the scheduler. This option only applies
# to http:// downloads

#DiskCopy       RetryAttempts   60

# The RetryInterval defines how long in seconds the diskCopyTransfer process should
# wait between retry attempts to download the notification file written by the
# scheduler at the location specified by the JobManager/SharedLSFResource option.
# This option only applies to http:// downloads

#DiskCopy       RetryInterval   10

# The frequency at which the GC daemon checks the stager to see whether there are
# files to be removed on the diskserver. This value is represented in seconds.

#GC      Interval       300

# The SyncInterval is the frequency in seconds between full rechecks of the
# diskservers contents with the stager catalog and nameserver. I.e once the
# synchronization check is complete, the GC daemon will wait SyncInterval seconds
# before starting the next round of checks. To disable all synchronization checks
# set this value to 0

#GC      SyncInterval   1800

# The ChunkSize defines the number of files that the GC daemon should synchronize
# with the stager catalog and nameserver in one go. Note: the largest value is 3000

#GC      ChunkSize      2000

# The ChunkInterval is the frequency in seconds between synchronization queries to
# the stager catalog and nameserver. I.e the interval between two bulk checks of
# size ChunkSize

#GC      ChunkInterval  120

# By default the startup of the GC daemon is deliberately offset by a random interval
# between 1 and 15 minutes. This randomized delay should prevent all GC's in an
# castor2 instance from deleting files at the same time causing an oscillation in
# incoming network traffic due to deletions. By uncommenting this line, you force the
# garbage collection to ignore this starting delay.

#GC      ImmediateStart yes


## Security Configuration ###########################################################

# The following option defines the list of security protocols which are supported by
# CASTOR headnodes (e.g. rhserver and nameserver) and diskservers

#CSEC MECH GSI KRB5

# The location of the stage user certificate.
#CSEC X509_USER_CERT /etc/grid-security/castor-csec/castor-csec-cert.pem

# The location of the stage user key.
#CSEC X509_USER_KEY /etc/grid-security/castor-csec/castor-csec-key.pem

# The location of the grid mapfile
#CSEC GRIDMAP /etc/grid-security/grid-mapfile

# The location of the keytab file owned by stage user.
#CSEC KRB5_KTNAME FILE:/etc/castor-csec-krb5.keytab

# Next configuration is required for logging purposes
#CSEC DEBUG YES
#CSEC TRACE 3

# Location of the file where the trace will be stored.
#CSEC TRACEFILE location /var/spool/rfio/rfiod.sec.log


## Transfer Protocols ###############################################################

# The rootsys configuration option points to the directory where the rootd binary is
# located. The default is /usr/local/bin
#ROOT   ROOTSYS /usr/local/bin

#
# RFIO/RFIOD
#
RFIO    USE_CASTOR_V2         YES       # USE CASTOR2 with castor2 client or NOT
RFIO    CONNTIMEOUT           10        # Timeout on the connect() system call
RFIO    CONRETRY              10        # Number of connection retry
RFIO    CONRETRYINT           1         # Number of second between every retry
RFIO    DAEMONV3_RDSIZE       2097152   # Daemon buffer size for read
RFIO    DAEMONV3_WRSIZE       2097152   # Daemon buffer size for write
RFIO    DAEMONV3_RDMT_BUFSIZE 2097152   # Daemon buffer size for read in multithreaded mode
RFIO    DAEMONV3_WRMT_BUFSIZE 2097152   # Daemon buffer size for write in multithreaded mode
RFIO    DAEMONV3_RDMT_NBUF    4         # Daemon number of buffers for reads in multithreaded mode
RFIO    DAEMONV3_RDMT         1         # Whether the daemon should read in multithreaded mode
RFIO    DAEMONV3_WRMT_NBUF    4         # Daemon number of buffers for writes in multithreaded mode
RFIO    DAEMONV3_WRMT         1         # Whether the daemon should write in multithreaded mode

RFIOD   TCP_NODELAY           YES       # Use TCP_NODELAY on the server side
RFIOD   KEEPALIVE             YES       # Use KEEPALIVE socket option
#RFIOD   DIRECTIO              YES       # Enabled O_DIRECT support to bypass kernel page cache
                                        # experimental, please contact castor dev for details
#RFIOD   XFSPREALLOC           1024      # Enables preallocation for XFS
                                        # experimental, please contact castor dev for details
RFIOD   DEBUG                 NO
RFIOD   LOGFILE               /var/spool/rfio/rfiod.log
RFIOD   WTRUST                castoradm4
RFIOD   RTRUST                castoradm4
RFIOD   XTRUST                castoradm4
RFIOD   FTRUST                castoradm4

# The following option enables checksum support in RFIOD. Every file written to disk
# will have a checksum calculated for it. This checksum  will be stored in the extended
# attributes of the file. When the file is read again by the client the checksum is
# calculated on the fly and verified against the recorded value. If it differs the
# transfer will fail.
#RFIOD  USE_CKSUM       YES

# The following option defines a list of directories/paths from which rfiod is allowed
# to read and write too. This list is appended to the directories specified in the
# RmNode/MountPoints option.
#RFIOD  PathWhiteList

#
# GSIFTP
#
# should be redefined if they are not like default
#GSIFTP GLOBUS_LOCATION  /opt/globus                            # the root dir for globus installation
#GSIFTP LOGFILE          /var/log/gridftp.log                   # log file for the gridftp server
#GSIFTP NETLOGFILE       /var/log/globus-gridftp.log            # netlog file for traffic calculation
#GSIFTP LOGLEVEL         ALL                                    # loglevel for the log file
                                                                # one of following ERROR, WARN, INFO, DUMP, ALL
#GSIFTP CONTROL_TCP_PORT_RANGE  20000,21000                     # port range for control ports min,max
#GSIFTP DATA_TCP_PORT_RANGE     20000,21000                     # port range for data ports min,max
#GSIFTP DATA_TCP_SOURCE_RANGE   20000,21000                     # port range for data ports min,max
                                                                # min>1023, max<65536
# key and cert files must be chown stage:st
#GSIFTP X509_USER_CERT  /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-cert.pem
#GSIFTP X509_USER_KEY   /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-key.pem


## Tape #############################################################################

ACCT    RTCOPY          YES             # Rtcopy accounting
ACCT    TAPE            YES             # Tape accounting

RTCOPY  RETRY           12              # Number of TMS retries (obsolete)
RTCOPY  SLEEP           300             # Sleep between every TMS retry (obsolete)
#RTCOPYD        NB_BUFS 300             # Number of rtcopy buffers for a 2G machine (1G machine? put 160)
#RTCOPYD        BUFSZ   4194304         # Size of a buffer (4M is the default)

# A list of hosts which are trusted to issue special commands to rtcpd and VDQM
#ADMIN  HOSTS   castoradm1 castoradm2

# Only useful if the catalog contains references to disk files that have been
# physically deleted, which should normally never be the case.

migrator        CHECKFILE       NO

# If CHECKFSEQ is set to YES the migrator will check the start file sequence number
# (FSEQ) of the tape given by VMGR with the last FSEQ known by the CASTOR name server.
# This is an extra check to make sure that the VMGR and CASTOR name server are
# consistent.

migrator        CHECKFSEQ       NO

# The minimum amount of data required before migration to tape is started. For
# convenience the size can be specified using 'M', 'G', 'T' and 'P' as units
# MigHunter     SIZECEILING 10G

# Not needed unless one suspects a problem with the recall of multi-segment files.

recaller        CHECKFILE       YES

# Config the drive down in case of a tape alert (YES/NO).
#
# If the option is omitted, the default value (YES) will be used.
#
TAPE    DOWN_ON_TPALERT         YES

# Config the drive down in case of an unload failure (YES/NO).
#
# If the option is omitted, the default value (YES) will be used.
#
TAPE    DOWN_ON_UNLOAD_FAILURE  YES

# What to do in case of a bad MIR on load. The valid options are:
#   REPAIR : SPACE to EOD, REWIND
#   IGNORE : simply go on
#   CANCEL : cancel the request
#
# If the option is omitted, the default value (CANCEL) will be used.
#
TAPE    BADMIR_HANDLING         REPAIR

# Let tpdaemon confirm its idle state to VDQM at certain intervals
# (this is to cleanup inconsistencies where VDQM sees a drive busy,
# while tpdaemon reports the drive to be idle)
#
#   CONFIRM_DRIVE_FREE       : switch on/off this update mechanism
#   CONFIRM_DRIVE_FREE_INTVL : check/set interval in seconds (default: 900)
#
# If the option is omitted, the default value (NO) will be used.
#
TAPE    CONFIRM_DRIVE_FREE              NO
#TAPE   CONFIRM_DRIVE_FREE_INTVL        900

# Timeout for a locate [milliseconds]. 180 secs is the lower threshold
# and the default.
# This is the timeout passed to the SCSI command that does the SPACE by
# blockID (for reads only).
#
#TAPE LOCATE_TIMEOUT 180000

# Timeout for positioning [seconds]. 900 secs is the lower threshold
# and the default.
# This is the timeout for finding the correct position on read and
# write. Positioning may involve several calls to ioctls. In order
# to prevent damage from wrong positioning this timeout has been
# introduce to intercept things if the positioning took suspiciously
# long.
#
#TAPE POSITION_TIMEOUT 900

# Set the st options which have been 'set' by the kernel patch before
# (0 == off, 1 == on).
# If an option is omitted, the values as in the kernel patch will be
# used, i.e. all set to 0.
#
TAPE   ST_BUFFER_WRITES        0
TAPE   ST_ASYNC_WRITES         0
TAPE   ST_READ_AHEAD           0

# Set the ST timeouts (done by a kernel patch before).
# If the parameter are omitted, the values from the patch are used,
# i.e. 900 seconds and 3600 seconds for the normal and the long timeout,
# respectively.
#
TAPE    ST_TIMEOUT              900
TAPE    ST_LONG_TIMEOUT         3600

# Define the reaction if a rlstape process crashes.
#
#   TAPE CRASHED_RLS_HANDLING <action>, where <action> can be
#     DOWN : put the drive down in case of a dumped rlstape
#     RETRY: retry the release in case of a dumped rlstape
#
#   All other values for <action> are ignored and tpdaemon will
#   not react at all.
#
#   For action RETRY the number of retries and the time delay
#   (in seconds) between them can be specified (default values:
#   3 attempts, at a 60 seconds interval). After that the drive
#   is put down.
#
TAPE CRASHED_RLS_HANDLING RETRY
TAPE CRASHED_RLS_HANDLING_RETRIES 3
TAPE CRASHED_RLS_HANDLING_RETRY_DELAY 60

# Define the tape logging facility (relevant for tpdaemon and rtcpd)
#
#   TAPE TPLOGGER <facility>, where <facility> can be
#     DLF    : use dlf
#     SYSLOG : use syslog (logging to LOCAL_LOG0).
#
# (When using SYSLOG: tpdaemon is logging to LOG_LOCAL0, rtcpd is logging
# to LOG_LOCAL1.)
#
TAPE TPLOGGER DLF

# Handle an ACS LIBRARY_FAILURE
#
#   TAPE ACS_MOUNT_LIBRARY_FAILURE_HANDLING <action> <#retries> <delay>
#   TAPE ACS_UNMOUNT_LIBRARY_FAILURE_HANDLING <action> <#retries> <delay>
#
#   <action> can be:
#      RETRY: retry the mount/unmount
#      DOWN : put the drive down
#
#   <#retries> is the number of retries
#
#   <delay> is the delay between retry attempts in seconds
#
TAPE ACS_MOUNT_LIBRARY_FAILURE_HANDLING retry 1 300
TAPE ACS_UNMOUNT_LIBRARY_FAILURE_HANDLING retry 1 300

# Policies
Policy  Migration       /etc/castor/policies/migration.py
Policy  Stream  /etc/castor/policies/stream.py
Policy  Recall  /etc/castor/policies/rechandler.py
Policy  RecallFunction  globalRecallPolicy


## Logging ##########################################################################
#
# EMERGENCY  : Not used
# ALERT      : Very important error (e.g. service cant start)
# ERROR      : All errors during normal operation
# WARNING    : Self-monitoring warning
# AUTH       : Authorization error (e.g. Cupv failed)
# SECURITY   : Csec error
# USAGE      : Trace of routine calls
# SYSTEM     : Normal service messages (cf. old LOG_INFO)
# IMPORTANT  : Not used
# MONITORING : Monitoring and statistics information
# DEBUG      : Debug level
# USERERROR  : Errors generated by incorrect usage by users
#
# For convenience a LOGSTANDARD severity is provided which logs everything locally
# excluding DEBUG messages and does not record USAGE messages remotely

DiskCopy         LOGSTANDARD file:///var/spool/job/diskcopy x-dlf://castordlf.cern.ch/
GC               LOGSTANDARD file:///var/spool/gc/log x-dlf://castordlf.cern.ch/
Job              LOGSTANDARD file:///var/spool/job/log x-dlf://castordlf.cern.ch/
JobManager       LOGSTANDARD file:///var/spool/jobmanager/log x-dlf://castordlf.cern.ch/
Mighunter        LOGSTANDARD file:///var/spool/mighunter/log x-dlf://castordlf.cern.ch/
migrator         LOGSTANDARD file:///var/spool/rtcpclientd/migrator x-dlf://castordlf.cern.ch/
recaller         LOGSTANDARD file:///var/spool/rtcpclientd/recaller x-dlf://castordlf.cern.ch/
Repack           LOGSTANDARD file:///var/spool/repack/log x-dlf://castordlf.cern.ch/
rfio 		 LOGSTANDARD file:///var/spool/rfio/log x-dlf://castordlf.cern.ch/
Rechandler       LOGSTANDARD file:///var/spool/rechandler/log x-dlf://castordlf.cern.ch/
RequestHandler   LOGSTANDARD file:///var/spool/rhserver/log x-dlf://castordlf.cern.ch/
RmMaster         LOGSTANDARD file:///var/spool/rmmaster/log x-dlf://castordlf.cern.ch/
RmNode           LOGSTANDARD file:///var/spool/rmnode/log x-dlf://castordlf.cern.ch/
rtcpcld          LOGSTANDARD file:///var/spool/rtcpclientd/rtcpcld x-dlf://castordlf.cern.ch/
Scheduler        LOGSTANDARD file:///var/spool/scheduler/log x-dlf://castordlf.cern.ch/
Stager           LOGSTANDARD file:///var/spool/stager/log x-dlf://castordlf.cern.ch/
TapeErrorHandler LOGSTANDARD file:///var/spool/rtcpclientd/TapeErrorHandler x-dlf://castordlf.cern.ch/
Vdqm             LOGSTANDARD file:///var/spool/vdqm/log x-dlf://castordlf.cern.ch/

#####################################################################################

#
# Service mapping - which type of database should be used for a given service
#

SvcMapping             DBCNV           16 #SVC_ORACNV
SvcMapping             DBRHSVC         42 #SVC_ORARHSVC
SvcMapping             DBSTAGERSVC     18 #SVC_ORASTAGERSVC
SvcMapping             DBTAPESVC       19 #SVC_ORATAPESVC
SvcMapping             DBFSSVC         20 #SVC_ORAFSSVC
SvcMapping             DBJOBSVC        21 #SVC_ORAJOBSVC
SvcMapping             DBGCSVC         22 #SVC_ORAGCSVC
SvcMapping             DBQUERYSVC      23 #SVC_ORAQUERYSVC
SvcMapping             DBVDQMSVC       24 #SVC_ORAVDQMSVC
SvcMapping             DBRMMASTERSVC   38 #SVC_ORARMMASTERSVC
SvcMapping             DBJOBMANAGER    40 #SVC_ORAJOBMANAGERSVC

#
# Library definition (dlopen) - which library holds which service
#

DynamicLib             ORACNV         libcastorCommonOra.so.2.1
DynamicLib             ORARHSVC       libcastorCommonOra.so.2.1
DynamicLib             ORASTAGERSVC   libcastorCommonOra.so.2.1
DynamicLib             ORATAPESVC     libcastorCommonOra.so.2.1
DynamicLib             ORAFSSVC       libcastorCommonOra.so.2.1
DynamicLib             ORAJOBSVC      libcastorCommonOra.so.2.1
DynamicLib             ORAGCSVC       libcastorCommonOra.so.2.1
DynamicLib             ORAQUERYSVC    libcastorCommonOra.so.2.1
DynamicLib             ORAVDQMSVC     libcastorVdqmOra.so.2.1


# End-of-File
