#!/bin/sh
#
# tpdaemon         Start/Stop tpdaemon.
#
# chkconfig: 345 72 33
# description: TAPE server daemon
#
# $Id: castor-tape-server.init,v 1.2 2005/01/31 10:01:01 jdurand Exp $
#
# @(#)$RCSfile: castor-tape-server.init,v $ $Revision: 1.2 $ $Date: 2005/01/31 10:01:01 $ CERN/IT/ADC/CA Jean-Damien Durand
#

sysname=`uname -s`

# source function library
if [ -r /etc/rc.d/init.d/functions ]; then
	. /etc/rc.d/init.d/functions
	DAEMON=daemon
	FAILURE=failure
	ECHO_FAILURE=failure
	SUCCESS=success
	ECHO_SUCCESS=echo_success
	ECHO_END=echo
	if [ $sysname = "Linux" ]; then
		ECHOOPT=-n
	fi
else
	DAEMON=
	FAILURE=
	ECHO_FAILURE=
	SUCCESS=
	ECHO_SUCCESS=
	ECHOOPT=
	ECHO_END=
fi

RETVAL=0
prog="tpdaemon"
PIDFILE=/var/run/tpdaemon.pid
PIDDIR=/var/run
SUBSYS=/var/lock/subsys/tpdaemon
SUBSYSDIR=/var/lock/subsys
[ -z "$SILENTSTOP" ] && SILENTSTOP=0
TPDAEMON=/usr/bin/tpdaemon
OPTIONS=""
SYSCONFIGTPDAEMON=/etc/sysconfig/tpdaemon

#
## Blindly attempt to create useful directories
#
[ ! -d $PIDDIR ] && mkdir -p $PIDDIR >& /dev/null
[ ! -d $SUBSYSDIR ] && mkdir -p $SUBSYSDIR >& /dev/null

if [ $sysname = "HP-UX" ]; then
	export UNIX95=1
fi
if [ $sysname = "SunOS" ]; then
	format4comm="fname"
else
	format4comm="comm"
fi

case "$1" in
  start)
	echo $ECHOOPT "Starting $prog: "
    if [ $sysname = "Linux" -a `whoami` = "root" ]; then
        netstat -ap | egrep '\*:5011|\*:tape' | grep LISTEN | grep tpdaemon > /dev/null
    else
        netstat -a  | egrep '\*:5011|\*:tape' | egrep 'LISTEN *$' > /dev/null
    fi
	# ps -eo ppid,$format4comm | egrep '^[ \t]+1 tpdaemon' > /dev/null
	if [ $? -eq 0 ]; then
		echo $ECHOOPT "tpdaemon already started: "
		[ -n "$FAILURE" ] && $FAILURE "tpdaemon already started: "
		RETVAL=1
	else
        if [ -r $SYSCONFIGTPDAEMON ]; then
            #
            ## Source the configuration
            #
            . $SYSCONFIGTPDAEMON
            if [ "${RUN_TPDAEMON}" != "yes" ]; then
                echo $ECHOOPT "$SYSCONFIGTPDAEMON says NO: "
                [ -n "$FAILURE" ] && $FAILURE "$SYSCONFIGTPDAEMON says NO: "
                RETVAL=1
            fi
            if [ -n "${ULIMIT_N}" ]; then
                ulimit -n ${ULIMIT_N}
            fi
        fi
        if [ $RETVAL -eq 0 ]; then
            cd /
            mkdir -p /var/spool/sacct
            mkdir -p /var/spool/tape
	    cd /var/spool/tape
            $DAEMON $TPDAEMON $OPTIONS
            if [ $? -eq 0 ]; then
                [ -d $SUBSYSDIR ] && touch $SUBSYS
                if [ -d $PIDDIR ]; then
                    pid=`ps -eo pid,ppid,$format4comm | grep " 1 tpdaemon" | awk '{print $1}'`
                    # The point of $PIDFILE is that it kills only
                    # the master daemon.
                    rm -f $PIDFILE
                    echo $pid > $PIDFILE
                fi
                RETVAL=0
            else
                echo $ECHOOPT "tpdaemon not started: "
                [ -n "$FAILURE" ] && $FAILURE "tpdaemon not started: "
                RETVAL=1
            fi
        fi
	fi
	$ECHO_END
	;;
  stop)
    #
    ## We refuse to stop if there is a child: the device is busy
    #
	pid=`ps -eo $format4comm | grep -v grep | egrep "confdrive|mounttape|posovl|rlstape"`
	if [ -n "$pid" ]; then
        [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "tpdaemon have child, some device is busy: "
        [ $SILENTSTOP -eq 0 -a -n "$FAILURE" ] && $FAILURE "tpdaemon have child, some device is busy: "
        RETVAL=1
    else
        if [ -f $PIDFILE ]; then
            [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
            if [ $SILENTSTOP -eq 0 ]; then
                kill -9 `cat $PIDFILE`
            else
                kill -9 `cat $PIDFILE` >& /dev/null
            fi
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                rm -f $PIDFILE
            fi
        else
            # tpdaemon might have been started by hand
            pid=`ps -eo pid,ppid,$format4comm | grep " 1 tpdaemon" | awk '{print $1}'`
            if [ -n "$pid" ]; then
                [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
                if [ $SILENTSTOP -eq 0 ]; then
                    kill -9 $pid
                else
                    kill -9 $pid >& /dev/null
                fi
                RETVAL=$?
            else
                [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "tpdaemon already stopped: "
                [ $SILENTSTOP -eq 0 -a -n "$FAILURE" ] && $FAILURE "tpdaemon already stopped: "
                RETVAL=1
            fi
        fi
    fi
	if [ $SILENTSTOP -eq 0 -a $sysname = "Linux" ]; then
		if [ $RETVAL -eq 0 ]; then
 			$ECHO_SUCCESS
		else
 			$ECHO_FAILURE
		fi
	fi
	[ -d $SUBSYSDIR ] && rm -f $SUBSYS
	[ $SILENTSTOP -eq 0 -a -n "$ECHO_END" ] && $ECHO_END
    #
    ## Basically: if SILENTSTOP is not 0 when we never print something
    ## But if the stop is successful... One might want to see stop: OK
    ## anyway ?
    #
	if [ $SILENTSTOP -ne 0 -a $RETVAL -eq 0 ]; then
        echo $ECHOOPT "Stopping $prog: "
        [ $sysname = "Linux" ] && $ECHO_SUCCESS
        [ -n "$ECHO_END" ] && $ECHO_END
    fi
	;;
  restart)
	$0 stop
	if [ $? -eq 0 -o $SILENTSTOP -eq 0 ]; then
		$0 start
		RETVAL=$?
	else
        #
        ## It is legal to return zero it if was
        ## a conditional restart
        #
        if [ $SILENTSTOP -eq 0 ]; then
            RETVAL=1
        else
            RETVAL=0
        fi
	fi
	;;
  condrestart)
	SILENTSTOP=1
    export SILENTSTOP
	$0 restart
    RETVAL=$?
	;;
  status)
	pid=`ps -eo pid,ppid,$format4comm | grep " 1 tpdaemon" | awk '{print $1}'`
	if [ -n "$pid" ]; then
		echo $ECHOOPT "tpdaemon (pid $pid) is running..."
		$ECHO_SUCCESS
		$ECHO_END
	else
		if [ -f $PIDFILE ]; then
			pid=`head -1 $PIDFILE`
			if [ "$pid" != "" ] ; then
				echo $ECHOOPT "tpdaemon dead but pid file exists"
				$ECHO_FAILURE
				$ECHO_END
			fi
		else
			if [ -f $SUBSYS ]; then
				echo $ECHOOPT "tpdaemon dead but subsys ($SUBSYS) locked"
			else
				echo $ECHOOPT "tpdaemon is stopped"
			fi
			$ECHO_FAILURE
			$ECHO_END
		fi
	fi
	;;
  *)
	echo "Usage: $0 {start|stop|status|restart|condrestart}"
	RETVAL=1
	;;
esac

exit $RETVAL
