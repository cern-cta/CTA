/*
 * SPDX-FileCopyrightText: 2021 CERN
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#pragma once

#include "TapeFseqRange.hpp"

#include <list>

namespace cta::tapeserver::readtp {

/**
 * Generates a sequence of tape file sequence numbers from a range of tape file
 * sequence numbers.
 */
class TapeFseqRangeSequence {
public:

  /**
   * Constructor.
   *
   * Constructs an empty sequence.
   */
  TapeFseqRangeSequence() noexcept;

  /**
   * Constructor
   *
   * @param range The range from which the sequence is generated
   */
  explicit TapeFseqRangeSequence(const TapeFseqRange& range) noexcept;

  /**
   * Resets the sequence to empty.
   */
  void reset() noexcept;

  /**
   * Resets the sequence using the specified range.
   *
   * @param range The range from which the sequence is generated.
   */
  void reset(const TapeFseqRange &range) noexcept;

  /**
   * Returns true if there is another tape file sequence number in the
   * sequence.
   */
  bool hasMore() const noexcept;

  /**
   * Returns the next tape file sequence number in the sequence, or throws
   * NoValue exception if there isn't one.
   */
  uint32_t next() ;

  /**
   * Returns the number of values generated by the sequence so far.
   */
  uint32_t nbGeneratedValues() const noexcept;

  /**
   * Returns the range used by this sequence.
   */
  const TapeFseqRange &range() const noexcept;


private:

  /**
   * The range from which the sequence is generated.
   */
  TapeFseqRange m_range;

  /**
   * The value to be returned by a call to next().
   */
  uint32_t m_next;

}; // class TapeFseqRangeSequence

} // namespace cta::tapeserver::readtp
