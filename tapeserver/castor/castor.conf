################################################################################
#
# CASTOR2 Sample Configuration File
#
################################################################################

#
# Service to Host/Port Mapping
#

# Warning: it is not recommended to configure any HOST to localhost, in order
# to avoid the need for rules involving localhost in UPV.

#RH         HOST yourrequesthandler.org
#STAGER     HOST yourrequesthandler.org
#STAGER     NOTIFYHOST yourstager.org
#STAGER     NOTIFYPORT 55015
#CNS        HOST yournameserver.org
#DLF        PORT 5036
#VDQM       HOST yourvdqm.org
#VMGR       HOST yourvmgr.org
#UPV        HOST yourupv.org


# Configuration expiration delay expressed in seconds
# This config file will be read and parsed again by any daemon after this delay
# to get the latest values

# Config ExpirationDelay 300

## Client configuration ########################################################

# The port range to be used by clients for the stager callbacks. If not present a
# port range of 30000-30100 is used. You can disable the port range by setting both
# values to 0

#CLIENT   LOWPORT        30000
#CLIENT   HIGHPORT       30100

# The following option defines in bytes the maximum size of a message that can be
# read by a client or server. The default value and minimum value is 20MB
# Note: it is not advised to modify this value unless recommended to do so by the
# CASTOR team.

#CLIENT  MAX_NETDATA_SIZE 20971520

# Maximum number of responses allowed when a file query using reqexp is done. Default
# is 10000, max allowed is 30000. Can also be set by defining the environment
# variable FILEQUERY_MAXNBRESPONSES.

#FILEQUERY       MAXNBRESPONSES  10000

# The default service class to be used if none is provided in the command line.
# Useful for diskservers where movers can be forced to use the service class the
# diskserver belongs to.

#STAGER SVCCLASS default

# The following option defines how longer in seconds stager clients should wait for
# a callback from the stager before timing out and giving up. The default value is
# 2 hours

#STAGER TIMEOUT 7200


## Service Configuration #######################################################

# The following option defines the maximum possible length of a log message that can
# be sent to syslog. By default the value is empty, instructing the logging
# interface to automatically determine this value based on the machines
# configuration. If the value cannot be determined, a value of 1024 will be used for
# syslog and 2000 for rsyslog.

#DLF MaxMessageSize

# Internal monitoring and metrics collection
# SamplingInterval is the time in seconds between two updates of the monitoring data

#Metrics  SamplingInterval   30

# FileLocation is the directory where the monitoring data will be dumped. Each
# enabled daemon will create a <daemonName>.<role>.xml file in this directory.

#Metrics  FileLocation       /var/spool/castor

# The default port on which the request handler should listen. Note that this can
# be overwritten by environment variable and command line argument

#RH PORT 9002
#RH SEC_PORT 9007

# The RH/SRMHostsList is the list of nodes (as fully qualified names) running a CASTOR
# SRM service. SRM is allowed to pass into CASTOR a request UUID only if the machine(s)
# where SRM runs are declared in this list.
# It is required to enable this feature in order to run SRM release 2.9-1 and higher.
#RH SRMHostsList

# In 2.1.9-3 new functionality was added to the request handler to offer the ability
# to configure the rate at which users are allowed to send requests to the service.
# This functionality, often referred to as DoS (Denial of Service) protection or
# request throttling works on the concept of rating groups.
#
# A rating group is a set of configuration parameters which describe a collection
# of users, the threshold value which applies to them and the response they should
# receive should that threshold be exceeded.
#
# A rating group is composed of three configuration parameters prefixed by the name
# of the group. For example, if the group name was 'Exempt' then the configuration
# parameters would be: ExemptUsers, ExemptThreshold, ExemptResponse. All three
# options must be defined for the group configuration to be valid.
#
# The following text describes each of the above options in more detail:
#
#  Users     A list of space separated users who are subject to the groups threshold
#            and response configuration parameters. A user can be defined by their
#            user and group, group only and by the special keyword all. For example,
#            stage:st *:st all
#  Threshold Defines the maximum number of allowed requests within a given time
#            interval in seconds. The value for this option must be given in the
#            following format:
#              <max_requests>/<interval>
#
#            Both the max_requests and interval components must be greater than or
#            equal to 0 and interval must be a multiple of 10.
#            A threshold value of 0/0 is the equivalent to saying that the group
#            of users are exempt.
#
#  Response  Defines what response the user should receive when they exceed the
#            maximum number of requests over a given time interval. The valid values
#            are:
#              always-accept     : The users are exempt from checks
#              close-connection  : The connection to the client is closed
#              reject-with-error : An error message is returned to the client stating
#                                  that they have exceeded their maximum number of
#                                  allowed requests with an error code of EBUSY.
#
# The history of users requests are stored in memcached, a high performance,
# distributed memory object caching system. As a result this history can be shared
# across multiple machines and is persistent across daemon restarts. Note: memcached
# does not come with any security and therefore it is advised to restrict access to
# trusted clients using iptables.
#
# Notes:
#  - There are no restrictions to the number of rating groups.
#  - A user defined by their name and group e.g. stage:st cannot exist in multiple
#    groups.
#  - Any errors generated by calls to memcached are logged by the request handler and
#    the rate check is ignored allowing the user to proceed normally.
#  - Changes to the configuration options will only take effect upon request handler
#    restarts or when new threads are created to handle additional load.
#  - Internally the rate limiting functionality uses buckets to store the history of
#    the number of requests performed by a user. Each bucket represents 10 seconds
#    of time. It is not advised to have very large time intervals as this directly
#    translates to increased processing time.

# The following option defines the list of rating groups to be used.
#RH RateLimitGroups Exempt Default

# A comma seperated list of hosts to act as memcached servers
#RH RateLimitServerList 127.0.0.1:11211

# Example rating groups:
#RH ExemptUsers       stage:st
#RH ExemptThreshold   0/0
#RH ExemptResponse    always-accept

#RH DefaultUsers      all
#RH DefaultThreshold  1/300
#RH DefaultResponse   reject-with-error

# The CNS/CONRETRY option defines how often nameserver clients should attempt to
# reconnect to a nameserver which is not available. By default the value is 10 times,
# for a total of 100 seconds with the CNS connection default retry interval
#CNS    CONRETRY        10

# The CNS/CONRETRYINT option defines how long in seconds, nameserver clients should
# wait before making new attempts to connect to the nameserver should it be
# unavailable
#CNS    CONRETRYINT     10

# Ports on which the scheduler server and the disk manager daemon are listening.
# The MoverHandlerPort is used to listen to the movers for their metadata operations
# at file close time.
#TransferManager  Port                   15011
#DiskManager      Port                   15011
#DiskManager      MoverHandlerPort       15511

# Number of threads to be used by the rpyc thread pool for interprocess communications
#TransferManager  NbRpycThreads          20

# Number of stager database connections used by the rpyc thread pool
#TransferManager  NbDatabaseConnections  5

# Number of worker threads used to dispatch jobs to the diskservers
#TransferManager  NbWorkers              5

# Request throttling in the scheduler in terms of number of scheduled jobs
# per second and per scheduler host. Set it to -1 to disable throttling completely.
# Note that throttling is disabled by default
#TransferManager   MaxNbTransfersScheduledPerSecond     -1

# The following option defines the timeout on internal traffic between transfermanagers
# and diskmanagers. This timeout only applies to request related traffic. Administrative
# traffic has a dedicated timeout (see TransferManager/AdminTimeout).
# The value is given in seconds. Default is 1
#TransferManager  ConnectionTimeout 1

# The following option defines the timeout on internal traffic between transfermanagers
# and diskmanagers for administrative tasks.
# The value is given in seconds. Default is 5
#TransferManager  AdminTimeout 5

# The SynchronizationInterval option defines how often the transfer managers check
# that jobs pending for more than 1h in the DB are still handled by the scheduling
# system. This allows to clean up inconsistencies created by double or severe failures,
# such as a job failing while a disk server manager is being restarted, or a
# complete loss of a disk server node (kernel panic, power cut, ...)
# It also checks for sources of disk to disk copy that may have been left behind due
# to timeouts in internal messages between destination on source machine
# The default value is 300, that is 5mn
#TransferManager     SynchronizationInterval      300

# Number of requests read from a given connection in one go before looking at other
# connections in a given processing thread of the TransferManager. A big value will
# improve the overall performance by limiting the number of switches (and the inheritent
# queue locks) but will reduce the fairness between connections. Default is set to 10
#TransferManager     RequestBatchSize      10

# Interval between two updates of the stager database with hearbeats received from
# the different nodes, expressed in seconds. These updates are also the time when
# nodes are disabled if their heartbeat is too old (see DiskServer/HeartBeatTimeout
# config parameter in the stager database)
# Default is 1.0
#TransferManager     HeartBeatDBUpdateInterval        1.0

# list of scheduler servers to be connected to (to be defined on diskservers)
#DiskManager     ServerHosts   server1.fully.qualified.domain server2.fully.qualified.domain ...

# Guaranteed percentage of slots that won't be used for non-user-driven activities,
# e.g. draining or rebalancing. If a diskserver's slots are over this percentage full,
# disk-to-disk copy source jobs are kept pending to make sure the remaining slots
# are immediately available for user activity. Note that by pushing this value to 100,
# draining and rebalancing activities will go at one job at a time and only when there's
# no activity at all. It is recommended to not change the default value of 50.
#DiskManager     GuaranteedUserSlotsPercentage          50

# maximum number of slots on this node. Note that these slots are virtual and that
# each transfer may take more than one, depending on the protocol
# the number of slots taken per protocol is defined in the DiskManager/<protocol>weight
# entries. Note that disk to disk copies are handled specially (d2dsrc and d2dend protocols)
#DiskManager     NbSlots       0

# Relative weights of the different protocols and types of transfers, in terms of number
# of slots a given transfer will take for each protocol/type of transfer. By default,
# all weights are identical with value 1
#DiskManager     xrootWeight   1
#DiskManager     rootWeight    1
#DiskManager     rfioWeight    1
#DiskManager     rfio3Weight   1
#DiskManager     gsiftpWeight  1
#DiskManager     d2dsrcWeight  1
#DiskManager     d2ddestWeight 1
#DiskManager     recallWeight  1
#DiskManager     migrWeight    1

# The following option defines how long in seconds a job is allowed to remain in a
# queue waiting for resources before being killed by the transfer manager.
# A value of -1 corresponds to an infinite timeout. For convenience, a svcclass name
# of "all" can be used to define a default value for all service classes.
#
# The format of the value is:
#   <svcclass1>:<timeout1> [svcclass2:timeout2[...]]
#DiskManager     PendingTimeouts           all:-1 default:-1

# Defines how long in seconds that a disk2disk copy job can be in a pending state
# before being terminated. This value is global for all service classes.
#DiskManager     DiskCopyPendingTimeout    7200

# Number of free slots for which the absence of scheduling is something is in the queue
# should be considered abnormal. See ActivityControlChecker thread in the diskmanager
# daemon for more details. This should usually be put to the maximum Weight given in the
# previous section, or to the NbSlots value to disable the check.
#DiskManager     maxNbEmptySlotsUnderLoad  10

# maximum interval (in seconds) between 2 retries on scheduling of the destination
# of the disk to disk copy when source is not ready
#DiskManager     MaxRetryInterval          300

# Interval between two heartbeats send to the transfer manager, expressed in seconds
#DiskManager     HeartbeatInterval         1.0

# Interval between two logs of heartbeat not sent errors, expressed in seconds.
# Others are logged only in debug level in order to not flood the logs when
# the transfermanagers are all down.
#DiskManager     HeartbeatNotSentLogInterval        300.0

# Number of user-requested jobs to be scheduled before a backfill job (e.g. internally
# triggered jobs for draining or rebalancing) is taken into account. 20 means that in case
# of heavy load only 5% of the slots are taken for backfill jobs. In case of no load,
# backfill jobs may take over up to all available slots, but user-requested jobs
# will still have higher priority and will overtake backfill ones.
#DiskManager     MaxRegularJobsBeforeBackfill       20

# List of mountpoints the DiskManager daemon should monitor
# you can use a list like /your/mount/point/01/ /your/mount/point/02/ ...
#DiskManager     MountPoints

# List of dataPools the DiskManager daemon should monitor, garbage collect and synchronize
# you can use a list like pool1 pool2 ...
#DiskManager     DataPools

# The User Id to be used to access the above pools, e.g. in case of CEPH
#DiskManager     PoolUserId      castor

# The following definition allow the max and minallowed free space to be defined
# at the disk server level respectively. They apply to both MountPoints and DataPools
#DiskManager     FSMaxFreeSpace            .05
#DiskManager     FSMinAllowedFreeSpace     .02

# The number of worker threads that handle movers operations.
#DiskManager     NbMoverThreads            5

# The number of worker threads that reply to clients.
#DiskManager     NbClientRepliers          5

# The interval between two checks of the GC daemon to see whether there are
# files to be removed from a diskserver. This value is represented in seconds.
#GC      Interval       300

# The ChunkInterval is the interval in seconds between synchronization queries to
# the stager catalog and nameserver, i.e. the interval between two bulk checks of
# size ChunkSize. To disable all synchronization checks set this value to 0.
#GC      ChunkInterval  1800

# The ChunkSize defines the number of files that the GC daemon should synchronize
# with the stager catalog and nameserver in one go. Note: the largest value is 3000.
#GC      ChunkSize      2000

# By default the startup of the GC daemon is deliberately offset by a random interval
# between 1 and 15 minutes. This randomized delay should prevent all GC's in an
# castor2 instance from deleting files at the same time causing an oscillation in
# incoming network traffic due to deletions. By setting this value to yes, you force the
# garbage collection to ignore this starting delay.
#GC      ImmediateStart no

# This option allows to disable the synchronization between the diskservers and the
# stager catalog. The synchronization with the nameserver is not affected.
#GC      DisableStagerSync no

# The period during which new files won't be considered for synchronization
# This protects in particular files being created (eg ongoing recalls) by giving
# time to the stager DB to create the associated DiskCopy. Otherwise, we would
# have a time window where the file exist on disk and can be considered by
# synchronization, while it does not exist on the stager. Thus it may be dropped
# Default is one day
#GC      SyncGracePeriod  86400

## Security Configuration ######################################################

# This option disables secure authentication. By default, secure authentication
# is ENABLED for the NS API and not for the Stager API.
#CSEC DISABLE NO

# The list of security protocols to use for clients
#CSEC MECH KRB5

# Next configuration is required for logging purposes
#CSEC DEBUG NO    # set to YES to enable client-side debug logging
#CSEC TRACE 3

# Location of the file where the trace will be stored.
#CSEC TRACEFILE location /var/log/castor/csec_trace.log


## Transfer Protocols ##########################################################

#
# XROOTD
#
# The following option defines a timeout value used for xroot transfers, which
# represents the amount of time in seconds that diskmanagerd will wait for xrootd
# to notify it that a file has been opened. The default value is 300 seconds,
# that is clients that get stalled and don't come back within this timeout
# will be failed.
#XROOT   TIMEOUT               300

# The file hosting the Xroot private key, needed to sign Xroot URLs
#XROOT     PrivateKey          /etc/castor/xrd_key.pem

#
# RFIO/RFIOD
#
#RFIO    PORT                  5001      # Port used by rfiod to serve internal traffic (tape and disk-to-disk copies)
#
#RFIO    CONNTIMEOUT           10        # Timeout on the connect() system call
#RFIO    CONRETRY              3         # Number of connection retry
#RFIO    CONRETRYINT           10        # Number of second between every retry
#RFIO    DAEMONV3_RDSIZE       2097152   # Daemon buffer size for read
#RFIO    DAEMONV3_WRSIZE       2097152   # Daemon buffer size for write
#RFIO    DAEMONV3_RDMT_BUFSIZE 2097152   # Daemon buffer size for read in multithreaded mode
#RFIO    DAEMONV3_WRMT_BUFSIZE 2097152   # Daemon buffer size for write in multithreaded mode
#RFIO    DAEMONV3_RDMT_NBUF    4         # Daemon number of buffers for reads in multithreaded mode
#RFIO    DAEMONV3_RDMT         1         # Whether the daemon should read in multithreaded mode
#RFIO    DAEMONV3_WRMT_NBUF    4         # Daemon number of buffers for writes in multithreaded mode
#RFIO    DAEMONV3_WRMT         1         # Whether the daemon should write in multithreaded mode

#RFIOD   TCP_NODELAY           YES       # Use TCP_NODELAY on the server side
#RFIOD   KEEPALIVE             YES       # Use KEEPALIVE socket option
#RFIOD   DIRECTIO              YES       # Enabled O_DIRECT support to bypass kernel page cache
                                         # experimental, please contact castor dev for details
#RFIOD   XFSPREALLOC           1024      # Enables preallocation for XFS
                                         # experimental, please contact castor dev for details
#RFIOD   DEBUG                 NO
#RFIOD   LOGFILE               /var/log/castor/rfiod.log
#RFIOD   WTRUST                castoradm4.cern.ch
#RFIOD   RTRUST                castoradm4.cern.ch
#RFIOD   XTRUST                castoradm4.cern.ch
#RFIOD   FTRUST                castoradm4.cern.ch
#RFIOD   OPENTRUST             castoradm4.cern.ch
#RFIOD   STATTRUST             castoradm4.cern.ch

# The following option enables checksum support in rfiod. Every file written to disk
# will have a checksum calculated for it. This checksum will be stored in the
# extended attributes of the file. When the file is read again by the client using
# RFIO as a protocol the checksum is calculated on the fly and verified against the
# recorded value. If it differs the transfer will fail.
#RFIOD  USE_CKSUM       YES

# The following option defines a list of directories/paths from which rfiod is
# allowed to read and write too. This list is appended to the directories specified
# in the DiskManager/MountPoints option.
#RFIOD  PathWhiteList

# The following option defines a range of ports which can be used by rfiod to serve
# transfers. Note: Ports below 1024 and above 65535 cannot be used.
#RFIOD	PORT_RANGE	50000,55000

#
# GSIFTP
#
#GSIFTP LOGFILE          /var/log/gridftp.log         # log file for the gridftp server
#GSIFTP NETLOGFILE       /var/log/globus-gridftp.log  # netlog file for traffic calculation
#GSIFTP LOGLEVEL         ALL                          # loglevel for the log file
                                                      # one of following ERROR, WARN, INFO, DUMP, ALL
#GSIFTP CONTROL_TCP_PORT_RANGE  20000,21000           # port range for control ports min,max
#GSIFTP DATA_TCP_PORT_RANGE     20000,21000           # port range for data ports min,max
#GSIFTP DATA_TCP_SOURCE_RANGE   20000,21000           # port range for data ports min,max
                                                      # min>1023, max<65536
# key and cert files must be chown stage:st
#GSIFTP X509_USER_CERT  /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-cert.pem
#GSIFTP X509_USER_KEY   /etc/grid-security/castor-gridftp-dsi-int/castor-gridftp-dsi-int-key.pem

# The following option defines how long in seconds a gsiftp job waits for a client to
# connect before giving up and releasing the slot on the diskserver. Values < 1 are
# considered invalid. The default value matches the SRM default timeout as well as
# the FTS one.
#GSIFTP TIMEOUT 180

## Tape ########################################################################

#RMC PORT            5014  # TCP port for RMC daemon and client
#RMC MAXRQSTATTEMPTS 10    # Maximum number of attempts a retriable RMC request should be issued

# To switch the smc logic to a Spectra like library LIBRARY_TYPE SPECTRA should
# be used. It fixs outputs for the smc command line tools and disables not 
# supported CDB command. It was tested with Spectra library T380, the Virtual
# tape library and IBM TS3100 tape library. All of them are closed loop 
# libraries and do not support the SEND VOLUME TAG (0xB6) command.

#SMC    LIBRARY_TYPE    SPECTRA         # Should be used on Spectra like library

# List of hosts that are trusted to issue special commands to the vdqmd daemon
#ADMIN  HOSTS   host1 host2 ...

# Config the drive down in case of a tape alert (YES/NO). If the option is omitted,
# the default value (NO) will be used.
#
#TAPE    DOWN_ON_TPALERT         NO

# Config the drive down in case of an unload failure (YES/NO). If the option is
# omitted, the default value (YES) will be used.
#
#TAPE    DOWN_ON_UNLOAD_FAILURE  YES

# What to do in case of a bad MIR on load. The valid options are:
#   REPAIR : SPACE to EOD, REWIND
#   IGNORE : simply go on
#   CANCEL : cancel the request
#
# If the option is omitted, the default value (CANCEL) will be used.
#
#TAPE    BADMIR_HANDLING         CANCEL

## Tape Gateway ################################################################

# The minimum number of threads in the Worker thread pool.
#TAPEGATEWAY MINWORKERTHREADS 5

# The maximum number of threads that can be in the Worker thread pool.
#TAPEGATEWAY MAXWORKERTHREADS 20

# The TCP/IP port used by the tapegateway to receive messages from the tape
# server
#TAPEGATEWAY PORT 62801

## acsd ########################################################################

# The TCP/IP port on which the CASTOR ACS daemon listens for incoming Zmq
# connections from the tape server.
#AcsDaemon Port 54521

# Time to wait in seconds between queries to the tape Library.
#AcsDaemon QueryInterval 10

# The maximum time to wait in seconds for a tape-library command to
# conclude.
#AcsDaemon CmdTimeout 610

## tapeserverd #################################################################

# List of trusted vdqm hosts
#TapeServer VdqmHosts host host2 host3 ...

# The protocol to be used when transfering files to and from disk servers.
# Possible values are RFIO or XROOT.  The value is not case sensitive.
#TapeServer RemoteFileProtocol RFIO

# The file hosting the Xroot private key to be used by tapeseverd to sign Xroot
# URLs.
#TapeServer XrootPrivateKey /etc/castor/xrd_tape_key.pem

# Number of memory buffers in the data-transfer cache.
#TapeServer NbBufs 300

# Size of a memory buffer in the data-transfer cache in bytes (default is 5
# Mebibytes)
#TapeServer BufSize 5242880

# The number of disk I/O threads.
#TapeServer NbDiskThreads 10

# The maximum time in seconds that the data-transfer session can take to get the
# transfer job from the client.
#TapeServer WaitJobTimeout 60

# The maximum time in seconds that the data-transfer session can take to mount a
# tape.
#TapeServer MountTimeout 900

# The maximum time in seconds the data-transfer session of tapeserverd can
# cease to move data blocks.
#TapeServer BlkMoveTimeout 300

# When the tapeserverd daemon requests the tapegatewayd daemon for a set of
# files to migrate to tape, this parameter defines the maximum number of bytes
# the set of files should represent.
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer BulkRequestMigrationMaxBytes 80000000000

# When the tapeserverd daemon requests the tapegatewayd daemon for a set of
# files to migrate to tape, this parameter defines the maximum number of files
# the set may contain.
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer BulkRequestMigrationMaxFiles 500

# When the tapeserverd daemon requests the tapegatewayd daemon for a set of
# files to recall from tape, this parameter defines the maximum number of bytes
# the set of files should represent.
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer BulkRequestRecallMaxBytes 80000000000

# When the tapeserverd daemon requests the tapegatewayd daemon for a set of
# files to recall from tape, this parameter defines the maximum number of files
# the set may contain.
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer BulkRequestRecallMaxFiles 500

# The value of this parameter defines the maximum number of bytes to be written
# to tape before a flush to tape (synchronised tape-mark).  Please note that a
# flush occurs on a file boundary therefore more bytes will normally be written
# to tape before the actual flush occurs.
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer MaxBytesBeforeFlush 32000000000

# The value of this parameter defines the maximum number of files to be written
# to tape before a flush to tape (synchronised or non-immediate tape-mark).
#
# The value of this parameter is read and taken into account by the tapeserverd
# daemon when the daemon is started.  The tapeserverd daemon must be restarted
# in order for any change in the value of this parameter to be taken into
# account.
#
#TapeServer MaxFilesBeforeFlush 200

# The time interval in seconds to wait between attempts to keep the vdqmd
# daemon synchronized with the state of a tape drive within the catalogue of the
# tapeserverd daemon.
#TapeServer VdqmDriveSyncInterval 600

# The TCP/IP port on which the tape server daemon listens for incoming
# connections and jobs from the VDQM server.
#
#TapeServer JobPort 5070

# The TCP/IP port on which the tape server daemon listens for incoming
# connections from the tpconfig admin command.
#TapeServer AdminPort 5011

# The TCP/IP port on which the tape server daemon listens for incoming
# connections from the tape labeling command.
#TapeServer LabelPort 54321

# The TCP/IP port on which ZMQ sockets will bind for internal communication
# between forked sessions and the parent tapeserverd process.
#TapeServer InternalPort 54322

# The delay in seconds the master process of the tapeserverd daemon should
# wait before launching another transfer session whilst the corresponding
# drive is idle.
#TapeServer TransferSessionTimer 10

# This is the location of the ObjectStore backend. It can be a local path or a
# remote (ceph) URL. If you want to create a local empty object store for 
# testing purposes you may use the makeMinimalVFS binary (takes no argument),
# which returns the newly created object store path.
#TapeServer ObjectStoreBackendPath /tmp/jobStoreVFS9r236q

## Tape Bridge Clients: dumptp, readtp and writetp #############################

# The inclusive low port of the tapebridge client callback port number range.
#
#TAPEBRIDGECLIENT LOWPORT 30201

# The inclusive high port of the tapebridge client callback port number range.
#
#TAPEBRIDGECLIENT HIGHPORT 30300


## Logging #####################################################################

# The following configuration directives control what messages priorities are logged
# by CASTOR daemons. Valid values are:
#
# LOG_EMERG    - System is unusable
# LOG_ALERT    - Action must be taken immediately
# LOG_CRIT     - Critical conditions
# LOG_ERR      - Error conditions
# LOG_WARNING  - Warning conditions
# LOG_NOTICE   - Normal but significant condition
# LOG_INFO     - Informational
# LOG_DEBUG    - Debug-level messages
#
# The default value is LOG_INFO which instructs the corresponding daemon to log all
# message priorities above and including INFO.

#LogMask tapeserverd      LOG_INFO
#LogMask gcd              LOG_INFO
#LogMask rhd              LOG_INFO
#LogMask rmcd             LOG_INFO
#LogMask schedulerd       LOG_INFO
#LogMask stagerd          LOG_INFO
#LogMask stagerjob        LOG_INFO
#LogMask tapegatewayd     LOG_INFO
#LogMask vdqmd            LOG_INFO
#LogMask transfermanagerd LOG_INFO
#LogMask diskmanagerd     LOG_INFO

# End-of-File
