#!/usr/bin/python
#/******************************************************************************
# *                      vdqmsetpriority
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# *
# * command line lists the volume access priorities within the VDQM database
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

import sys, os
import getopt
import castor_tools

CA_MAXVIDLEN = 6    # maximum length for a VID  
COMMANDNAME  = 'vdqmsetpriority'

#-------------------------------------------------------------------------------
# usage function
#-------------------------------------------------------------------------------
def usage(exitCode):
  print '''Usage: vdqmsetpriority -V VID -m mode [ -t type ] -p priority [ -h ]

where options can be:
    
\t-V, --vid VID            Volume visual Identifier
\t-m, --mode mode          Tape access mode. Valid values are \"read\"
\t                         and \"write\"
\t-t, --type type          Lifespan type. Valid values are
\t                         \"singleMount\" and \"unlimited\".
\t                         The default value is \"unlimited\".
\t-p, --priority priority  Volume priority, where 0 is the lowest
\t-h, --help               Print this help and exit
\n
Comments to: Castor.Support@cern.ch'''

  sys.exit(exitCode)


#-------------------------------------------------------------------------------
# setVdqmPriorities
#-------------------------------------------------------------------------------
def  setVdqmPriorities(rsCursor, vid, tpMode, lifespanType, priority):
  '''Sets vdqm priorities on the DB'''

  clientUIDVar = os.geteuid()
  clientGIDVar = os.getegid()
  clientHostVar = os.uname()[1]

  rsCursor.callproc('castorVdqm.setVolPriority', (priority, clientUIDVar, 
        clientGIDVar, "\'"+str(clientHostVar)+"\'", vid, tpMode, lifespanType))


#-------------------------------------------------------------------------------
# vdqmSetPriority
#-------------------------------------------------------------------------------
def vdqmSetPriority(vid, mode, lifespanType, priority):
    '''Set a volume priority in the VDQM database'''

    stconn = None 
    try:
        stconn = castor_tools.connectToVdqm()
        rsCursor = stconn.cursor()
        rsCursor.arraysize = 50
        setVdqmPriorities(rsCursor, vid, mode, lifespanType, priority)

        stconn.commit()

    except Exception, e:
        if stconn != None:
            stconn.rollback()
        print COMMANDNAME+' Internal Error: \n'
        print e.args

    if stconn != None:
        rsCursor.close()
        castor_tools.disconnectDB(stconn)


#-------------------------------------------------------------------------------
# queryVmgr
#-------------------------------------------------------------------------------
def queryVmgr(rsCursor, vid):
  '''Query the VMGR DB checking if exists a certain VID'''

  # This sintax has been choose because the condition force the sub-query to end
  # as soon as a vid match is found. 
  stmt = '''SELECT COUNT(*) FROM dual WHERE EXISTS 
(SELECT vid FROM VMGR_TAPE_INFO WHERE  vid = \''''+vid+"\')"
    
  rsCursor.execute(stmt)
  exist = rsCursor.fetchone()
  if exist[0] == 0:
     print COMMANDNAME+' Error:  VID=\''+vid+'\' does not exist in the VMGR'
     return exist[0]
  return exist[0]


#-------------------------------------------------------------------------------
# vmgrQueryVid
#-------------------------------------------------------------------------------
def vmgrQueryVid(vid):
    '''Query the VMGR DB checking if exists a certain VID'''
    result = 0
    stconn = None
    try:
        stconn = castor_tools.connectToVmgr()
        rsCursor = stconn.cursor()
        rsCursor.arraysize = 50
        result = queryVmgr(rsCursor, vid)

    except Exception, e:        
        print COMMANDNAME+' Internal Error: \n'
        print e

    if stconn != None:
        rsCursor.close()
        castor_tools.disconnectDB(stconn)
    return result


#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
try:
    options, args = getopt.getopt(sys.argv[1:], 'V:m:t:p:h', ['vid=', 
                              'mode=', 'type=', 'priority=', 'help'])
except getopt.GetoptError, err:
    print "\n"+COMMANDNAME+" Error:  " + str(err) + "\n"
    usage(2)
vid = ''
lifespanType = 1 # Default = unlimited = 1
mode = -1
priority = -1
for f, v in options:
    if f in ('-V', '--vid'):
       # check that the vid length is <= "CA_MAXVIDLEN"
       if len(v) > CA_MAXVIDLEN:
          print "\n"+COMMANDNAME+" Error:  VID has more than " + str(CA_MAXVIDLEN) + " characters: \n"
          usage(2)
       vid = v 
    elif f in ('-m', '--mode'):
       if v not in ['read', 'write']:
         print "\n"+COMMANDNAME+" Error:  Invalid tape access mode: " + v + "\n"
         usage(2)
       if v == 'read':
         mode = 0
       else:
         mode = 1
    elif f in ('-t', '--type'):
       listType = 'LIFESPAN_TYPE'
       if v not in ['singleMount', 'unlimited']:
         print "\n"+COMMANDNAME+" Error:  Invalid priority type: " + v + "\n"
         usage(2)
       if v == 'singleMount':
         lifespanType = 0
       else:
         lifespanType = 1
    elif f in ('-p', '--priority'):
       # check that the priority value is a positive integer
       if not v.isdigit() or v < 0:
         print  "\n"+COMMANDNAME+" Error:  Priority is not a positive integer: " + v + "\n"
         usage(2)
       priority = v
    elif f in ('-h', '--help'):
       usage(0)
    else:
       print "\n"+COMMANDNAME+" Error:  Unknown command-line option:" + f  + "\n"
       usage(2)
    
if vid == '' or mode == -1 or priority == -1:
   print "\n"+COMMANDNAME+" Error:  Options -V vid -m mode and -p priority must be set\n"
   usage(2) 
 
# Deal with args
if len(args) >= 1:
    errorStr = "\n"+COMMANDNAME+" Error:  Unexpected command-line argument(s):"
    for arg in args:
      if arg[0] != '-':
        errorStr = errorStr + " " + arg
    print errorStr + '\n'
    usage(2)

if vmgrQueryVid(vid) == 0:
    sys.exit(-1)   

vdqmSetPriority(vid, mode, lifespanType, priority)
