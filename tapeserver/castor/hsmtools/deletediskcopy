#!/usr/bin/python
#/******************************************************************************
# *                      deletediskcopy
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line deleting the given diskcopies and potentially removing the corresponding namespace entries'''

import sys, getopt, subprocess
import castor_tools
import cx_Oracle
from cStringIO import StringIO

def usage(exitCode):
    '''usage function'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [-f|--force] [-d|--dry-run] [<fullPhysicalPath>|<mountPoint> [...]]'
    print '        fullPhysicalPath must follow the CASTOR internal format host:/mountpoint/path/fileid@nameserver.diskcopyid'
    print '        alternatively, mountPoint shall be specified as host:/mountpoint/ to include all its files. Use with care!'
    sys.exit(exitCode)

# possible return codes
def enum(**enums):
    '''a little utility function'''
    return type('Enum', (), enums)

nsstats = {}
def dealWithLostFile(fileId):
    '''removes a file from the namespace and populates the global nsstats dict with its metadata.
       Does nothing if the file does not exists.'''
    global nsstats
    try:
      castorFilename = subprocess.Popen(['nsgetpath', str(fileId)], stdout=subprocess.PIPE).stdout.read().rstrip()
      if castorFilename.find('/castor') == -1:
        # the file was already dropped, ignore
        return
      # get metadata and drop from namespace. It is assumed the user has full rights to do so
      nsstat = subprocess.Popen(['nsls', '-li', '--class', '--checksum', castorFilename],
                                stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()
      u = nsstat.split()[4]  # collect outputs per user
      try:
        nsstats[u].write(nsstat)
      except KeyError:
        nsstats[u] = StringIO()
        nsstats[u].write(nsstat)
      if not dryrun:
        p = subprocess.Popen(['nsrm', '-r', castorFilename], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        p.wait()
        if p.returncode:
          print 'Error removing file', castorFilename, ':', p.stdout.read()
    except Exception, e:
      print '*** failed to get nameserver metadata:', e
      if verbose:
        import traceback
        traceback.print_exc()

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hfdnv', ['help', 'force', 'dry-run', 'verbose'])
except Exception, e:
    print e
    usage(1)
force = False
dryrun = False
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-f' or f == '--force':
        force = True
    elif f == '-d' or f == '--dry-run':
        dryrun = True
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)
if len(args) == 0:
    print 'missing argument(s)'
    usage(1)

try:
    if dryrun:
      print 'DRY RUN option enabled, no modification will actually take place!'
    # connect to stager and prepare statement
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    rescur = stconn.cursor()
    rescur.arraysize = 10000
    stcur.callproc('deleteDiskCopies', [args, force, dryrun, rescur])
    # fetch results and display
    counter = 0
    for (dcId, fileId, msg, rc) in rescur.fetchall():
      counter += 1
      print dcId, msg
      if rc == 4: # LOST file
        dealWithLostFile(fileId)
    # close and print statistics
    castor_tools.disconnectDB(stconn)
    if nsstats:
      print '\nHandling of %d disk copies completed. The following file(s) have been permanently removed:' % counter
      for u in nsstats:
        print '--- owned by user', u, ':'
        print nsstats[u].getvalue()
    else:
      print 'Handling of %d disk copies completed, no file got lost' % counter

except Exception, e:
    # detect special error raised by the code
    if isinstance(e, cx_Oracle.Error):
        error, = e.args
        if isinstance(error, cx_Oracle._Error):
            errorcode = error.code
            if errorcode == 20100:
                # print only useful part of message
                print error.message.split('\n')[0].replace('ORA-20100: ', '')
                sys.exit(-1)
    # internal error
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
