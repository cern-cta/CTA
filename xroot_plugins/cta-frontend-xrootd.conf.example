#
# CTA options
#

# Experimental feature flags
cta.features.experimental.telemetry.enabled false


# Unique string to identify CTA's instance the frontend is serving (i.e: production, preproduction).
# Each of these instances should be associated with a specific CTA catalogue instance.
cta.instance_name CI_local

# Unique string to identify the backend scheduler resources. As an exmple, it can be structured as:
# "[ceph|postgres|vfs][User|Repack]".
cta.schedulerdb.scheduler_backend_name vfsCI

# CTA ObjectStore options
#cta.objectstore.backendpath /tmp/jobStoreXXXXXXX

# CTA Scheduler DB - thread options
cta.schedulerdb.numberofthreads 500
cta.schedulerdb.threadstacksize_mb 1

# CTA Scheduler DB - enable requests for user or repack
# cta.schedulerdb.disable_repack_requests false
# cta.schedulerdb.disable_user_requests false

# CTA Scheduler DB - cache timeout options
# cta.schedulerdb.tape_cache_max_age_secs 600
# cta.schedulerdb.retrieve_queue_cache_max_age_secs 10

# CTA Catalogue options
cta.catalogue.numberofconnections 10

# Missing tape file copies minimum age.
# Set it to prevent false flagging of multi-copy files in the process of being archived tapes.
# Default 24 hours
cta.catalogue.missing_file_copies_min_age_secs 86400

# Maximum file size (in GB) that the CTA Frontend will accept for archiving
cta.archivefile.max_size_gb 1000

# Disallow 0-length files
cta.archivefile.zero_length_files_forbidden on
# Tapepools exempted from this check (if enabled)
cta.archivefile.zero_length_files_forbidden_vo_exception_list vo1 vo2 vo3

# CTA Frontend log URL
cta.log.url file:/var/log/cta/cta-frontend.log

# CTA Logger log level
# Valid log levels are EMERG, ALERT, CRIT, ERR, WARNING, NOTICE (==USERERR), INFO, DEBUG
# cta.log.level DEBUG

# CTA Logger log format
# Valid formats are default, json
# cta.log.format json

# CTA XRootD SSI Protobuf log level
# cta.log.ssi debug protobuf
cta.log.ssi warning

# CTA Repack buffer URL
# cta.repack.repack_buffer_url root://ctaeos//eos/ctaeos/repack

# CTA Verification Mount Policy
cta.verification.mount_policy verification

#
# XRootD/SSI options
#

# Enable SSI debug logging
#ssi.trace debug

# Load the CTA SSI plugin
xrootd.fslib -2 libXrdSsi.so

# Load the SSI module
ssi.svclib libXrdSsiCta.so

# Use the security module
xrootd.seclib libXrdSec.so

# Security protocol specification
#
# Note: the XRootD process needs to be able to read the keytab file
sec.protocol krb5 /etc/cta/cta-frontend.krb5.keytab cta/cta-frontend@TEST.CTA
sec.protocol sss -s /etc/cta/eos.sss.keytab

# Only Kerberos 5 and sss are allowed
sec.protbind * only sss krb5

# Turn off asynchronous I/O
xrootd.async off

# Use a port other than 1094, already used by EOS xroot server
xrd.port 10955

# Export the SSI resource
all.export /ctafrontend nolock r/w

# Telemetry

# Used to control cardinality.
# If set to false, each restart of a process will generate a new unique ID for the `service.instance.id`.
# If set to true, `service.instance.id` remains constant across restarts.
cta.telemetry.retain_instance_id_on_restart false

# Metrics backend to use. Possible options are NOOP, OTLP_HTTP, OTLP_GRPC, STDOUT, FILE
# Default is NOOP, meaning no metrics are collected/exported
cta.telemetry.metrics.backend NOOP

# Amount of time in milliseconds between exports
cta.telemetry.metrics.export.interval 1000

# timeout for a single export
cta.telemetry.metrics.export.timeout 500

# Service location of the OTLP collector in case the OTLP backend is used
#cta.telemetry.metrics.export.otlp_http.endpoint endpoint:port/v1/metrics

# File location containing <base64(username:password)> to set up basic auth for push metrics over HTTP
# Adds the header "authorization: Basic <base64(username:password)>"
# cta.telemetry.metrics.export.otlp_http.basic_auth_file /path/to/base64/encoded/username/password

# File location to write to in case the FILE backend is used
# cta.telemetry.metrics.export.file.endpoint path
