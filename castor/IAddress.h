/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_IADDRESS_H
#define CASTOR_IADDRESS_H

// Include Files and Forward declarations for the C world
struct C_IAddress_t;
struct C_IObject_t;

//------------------------------------------------------------------------------
// This defines a C interface to the following class
// class IAddress
// Base class for all addresses.
// An address allows to find a foreign representation of an object.
//------------------------------------------------------------------------------

/**
 * Empty Destructor
 */
int C_IAddress_delete(struct C_IAddress_t* obj);

/**
 * Cast into IObject
 */
struct C_IObject_t* C_IAddress_getIObject(struct C_IAddress_t* obj);

/**
 * Dynamic cast from IObject
 */
struct C_IAddress_t* C_IAddress_fromIObject(struct C_IObject_t* obj);

/**
 * gets the object type, that is the type of object whose representation is pointed
 */
int C_IAddress_objType(struct C_IAddress_t* instance,
                       unsigned int* ret);

/**
 * sets the object type, that is the type of object whose representation is pointed
 */
int C_IAddress_setObjType(struct C_IAddress_t* instance,
                          unsigned int type);

/**
 * gets the name of the conversion service able to deal with this address
 */
int C_IAddress_cnvSvcName(struct C_IAddress_t* instance,
                          const char** ret);

/**
 * gets the type of the conversion service able to deal with this address
 */
int C_IAddress_cnvSvcType(struct C_IAddress_t* instance,
                          unsigned int* ret);

/**
 * Outputs this object in a human readable format
 */
int C_IAddress_print(struct C_IAddress_t* instance);

#endif // CASTOR_IADDRESS_H
