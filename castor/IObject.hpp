/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_IOBJECT_HPP
#define CASTOR_IOBJECT_HPP

// Include Files
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  /**
   * class IObject
   * Base class for all objects Implements the id methods
   */
  class IObject {

  public:

    /**
     * Empty Destructor
     */
    virtual ~IObject() throw() {};

    /**
     * Sets the id of the object
     * @param id The new id
     */
    virtual void setId(u_signed64 id) = 0;

    /**
     * gets the id of the object
     */
    virtual u_signed64 id() const = 0;

    /**
     * Gets the type of the object
     */
    virtual int type() const = 0;

    /**
     * virtual method to clone any object
     */
    virtual IObject* clone() = 0;

    /**
     * Outputs this object in a human readable format
     * @param stream The stream where to print this object
     * @param indent The indentation to use
     * @param alreadyPrinted The set of objects already printed.
     * This is to avoid looping when printing circular dependencies
     */
    virtual void print(std::ostream& stream,
                       std::string indent,
                       castor::ObjectSet& alreadyPrinted) const = 0;

    /**
     * Outputs this object in a human readable format
     */
    virtual void print() const = 0;

  }; // end of class IObject

}; // end of namespace castor

/**
 * outputs this IObject to an output stream
 * This method is actually not virtual as is always the case for
 * streaming operators. However, it makes use of the print method
 * which is pure virtual.
 */
std::ostream& operator<<(std::ostream& s, const castor::IObject& addr);

#endif // CASTOR_IOBJECT_HPP
