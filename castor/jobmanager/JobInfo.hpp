/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/jobmanager/JobInfo.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_JOBMANAGER_JOBINFO_HPP
#define CASTOR_JOBMANAGER_JOBINFO_HPP

// Include Files
#include "osdep.h"
#include <string>

namespace castor {

  namespace jobmanager {

    /**
     * class JobInfo
     */
    class JobInfo {

    public:

      /**
       * Empty Constructor
       */
      JobInfo() throw();

      /**
       * Empty Destructor
       */
      virtual ~JobInfo() throw();

      /**
       * Get the value of m_subReqId
       * @return the value of m_subReqId
       */
      std::string subReqId() const {
        return m_subReqId;
      }

      /**
       * Set the value of m_subReqId
       * @param new_var the new value of m_subReqId
       */
      void setSubReqId(std::string new_var) {
        m_subReqId = new_var;
      }

      /**
       * Get the value of m_noSpace
       * @return the value of m_noSpace
       */
      bool noSpace() const {
        return m_noSpace;
      }

      /**
       * Set the value of m_noSpace
       * @param new_var the new value of m_noSpace
       */
      void setNoSpace(bool new_var) {
        m_noSpace = new_var;
      }

      /**
       * Get the value of m_noFileSystems
       * @return the value of m_noFileSystems
       */
      bool noFileSystems() const {
        return m_noFileSystems;
      }

      /**
       * Set the value of m_noFileSystems
       * @param new_var the new value of m_noFileSystems
       */
      void setNoFileSystems(bool new_var) {
        m_noFileSystems = new_var;
      }

      /**
       * Get the value of m_reqId
       * @return the value of m_reqId
       */
      std::string reqId() const {
        return m_reqId;
      }

      /**
       * Set the value of m_reqId
       * @param new_var the new value of m_reqId
       */
      void setReqId(std::string new_var) {
        m_reqId = new_var;
      }

      /**
       * Get the value of m_fileId
       * @return the value of m_fileId
       */
      u_signed64 fileId() const {
        return m_fileId;
      }

      /**
       * Set the value of m_fileId
       * @param new_var the new value of m_fileId
       */
      void setFileId(u_signed64 new_var) {
        m_fileId = new_var;
      }

      /**
       * Get the value of m_nsHost
       * @return the value of m_nsHost
       */
      std::string nsHost() const {
        return m_nsHost;
      }

      /**
       * Set the value of m_nsHost
       * @param new_var the new value of m_nsHost
       */
      void setNsHost(std::string new_var) {
        m_nsHost = new_var;
      }

      /**
       * Get the value of m_requestType
       * @return the value of m_requestType
       */
      u_signed64 requestType() const {
        return m_requestType;
      }

      /**
       * Set the value of m_requestType
       * @param new_var the new value of m_requestType
       */
      void setRequestType(u_signed64 new_var) {
        m_requestType = new_var;
      }

      /**
       * Get the value of m_jobId
       * @return the value of m_jobId
       */
      u_signed64 jobId() const {
        return m_jobId;
      }

      /**
       * Set the value of m_jobId
       * @param new_var the new value of m_jobId
       */
      void setJobId(u_signed64 new_var) {
        m_jobId = new_var;
      }

      /**
       * Get the value of m_username
       * @return the value of m_username
       */
      std::string username() const {
        return m_username;
      }

      /**
       * Set the value of m_username
       * @param new_var the new value of m_username
       */
      void setUsername(std::string new_var) {
        m_username = new_var;
      }

      /**
       * Get the value of m_submitTime
       * @return the value of m_submitTime
       */
      u_signed64 submitTime() const {
        return m_submitTime;
      }

      /**
       * Set the value of m_submitTime
       * @param new_var the new value of m_submitTime
       */
      void setSubmitTime(u_signed64 new_var) {
        m_submitTime = new_var;
      }

      /**
       * Get the value of m_svcClass
       * @return the value of m_svcClass
       */
      std::string svcClass() const {
        return m_svcClass;
      }

      /**
       * Set the value of m_svcClass
       * @param new_var the new value of m_svcClass
       */
      void setSvcClass(std::string new_var) {
        m_svcClass = new_var;
      }

      /**
       * Get the value of m_jobStatus
       * @return the value of m_jobStatus
       */
      int jobStatus() const {
        return m_jobStatus;
      }

      /**
       * Set the value of m_jobStatus
       * @param new_var the new value of m_jobStatus
       */
      void setJobStatus(int new_var) {
        m_jobStatus = new_var;
      }

    private:

      std::string m_subReqId;

      bool m_noSpace;

      bool m_noFileSystems;

      std::string m_reqId;

      u_signed64 m_fileId;

      std::string m_nsHost;

      u_signed64 m_requestType;

      u_signed64 m_jobId;

      std::string m_username;

      u_signed64 m_submitTime;

      std::string m_svcClass;

      int m_jobStatus;

    }; /* end of class JobInfo */

  } /* end of namespace jobmanager */

} /* end of namespace castor */

#endif // CASTOR_JOBMANAGER_JOBINFO_HPP
