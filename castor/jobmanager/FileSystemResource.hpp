/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/jobmanager/FileSystemResource.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_JOBMANAGER_FILESYSTEMRESOURCE_HPP
#define CASTOR_JOBMANAGER_FILESYSTEMRESOURCE_HPP

// Include Files
#include "castor/monitoring/AdminStatusCodes.hpp"
#include "castor/stager/FileSystemStatusCodes.hpp"
#include <string>

namespace castor {

  namespace jobmanager {

    // Forward declarations
    class DiskServerResource;

    /**
     * class FileSystemResource
     */
    class FileSystemResource {

    public:

      /**
       * Empty Constructor
       */
      FileSystemResource() throw();

      /**
       * Empty Destructor
       */
      virtual ~FileSystemResource() throw();

      /**
       * Get the value of m_mountPoint
       * The mountpoint for the filesystem.
       * @return the value of m_mountPoint
       */
      std::string mountPoint() const {
        return m_mountPoint;
      }

      /**
       * Set the value of m_mountPoint
       * The mountpoint for the filesystem.
       * @param new_var the new value of m_mountPoint
       */
      void setMountPoint(std::string new_var) {
        m_mountPoint = new_var;
      }

      /**
       * Get the value of m_svcClassName
       * The service class that the filesystem belongs too.
       * @return the value of m_svcClassName
       */
      std::string svcClassName() const {
        return m_svcClassName;
      }

      /**
       * Set the value of m_svcClassName
       * The service class that the filesystem belongs too.
       * @param new_var the new value of m_svcClassName
       */
      void setSvcClassName(std::string new_var) {
        m_svcClassName = new_var;
      }

      /**
       * Get the value of m_status
       * The status of the filesystem.
       * @return the value of m_status
       */
      castor::stager::FileSystemStatusCodes status() const {
        return m_status;
      }

      /**
       * Set the value of m_status
       * The status of the filesystem.
       * @param new_var the new value of m_status
       */
      void setStatus(castor::stager::FileSystemStatusCodes new_var) {
        m_status = new_var;
      }

      /**
       * Get the value of m_adminStatus
       * The admin status of the filesystem.
       * @return the value of m_adminStatus
       */
      castor::monitoring::AdminStatusCodes adminStatus() const {
        return m_adminStatus;
      }

      /**
       * Set the value of m_adminStatus
       * The admin status of the filesystem.
       * @param new_var the new value of m_adminStatus
       */
      void setAdminStatus(castor::monitoring::AdminStatusCodes new_var) {
        m_adminStatus = new_var;
      }

      /**
       * Get the value of m_diskServer
       * The diskserver associated with the filesystems.
       * @return the value of m_diskServer
       */
      DiskServerResource* diskServer() const {
        return m_diskServer;
      }

      /**
       * Set the value of m_diskServer
       * The diskserver associated with the filesystems.
       * @param new_var the new value of m_diskServer
       */
      void setDiskServer(DiskServerResource* new_var) {
        m_diskServer = new_var;
      }

    private:

      /// The mountpoint for the filesystem.
      std::string m_mountPoint;

      /// The service class that the filesystem belongs too.
      std::string m_svcClassName;

      /// The status of the filesystem.
      castor::stager::FileSystemStatusCodes m_status;

      /// The admin status of the filesystem.
      castor::monitoring::AdminStatusCodes m_adminStatus;

      /// The diskserver associated with the filesystems.
      DiskServerResource* m_diskServer;

    }; /* end of class FileSystemResource */

  } /* end of namespace jobmanager */

} /* end of namespace castor */

#endif // CASTOR_JOBMANAGER_FILESYSTEMRESOURCE_HPP
