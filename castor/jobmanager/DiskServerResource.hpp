/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/jobmanager/DiskServerResource.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_JOBMANAGER_DISKSERVERRESOURCE_HPP
#define CASTOR_JOBMANAGER_DISKSERVERRESOURCE_HPP

// Include Files
#include "castor/monitoring/AdminStatusCodes.hpp"
#include "castor/stager/DiskServerStatusCode.hpp"
#include <string>
#include <vector>

namespace castor {

  namespace jobmanager {

    // Forward declarations
    class FileSystemResource;

    /**
     * class DiskServerResource
     */
    class DiskServerResource {

    public:

      /**
       * Empty Constructor
       */
      DiskServerResource() throw();

      /**
       * Empty Destructor
       */
      virtual ~DiskServerResource() throw();

      /**
       * Get the value of m_diskServerName
       * Name of the diskserver.
       * @return the value of m_diskServerName
       */
      std::string diskServerName() const {
        return m_diskServerName;
      }

      /**
       * Set the value of m_diskServerName
       * Name of the diskserver.
       * @param new_var the new value of m_diskServerName
       */
      void setDiskServerName(std::string new_var) {
        m_diskServerName = new_var;
      }

      /**
       * Get the value of m_status
       * The status of the diskserver.
       * @return the value of m_status
       */
      castor::stager::DiskServerStatusCode status() const {
        return m_status;
      }

      /**
       * Set the value of m_status
       * The status of the diskserver.
       * @param new_var the new value of m_status
       */
      void setStatus(castor::stager::DiskServerStatusCode new_var) {
        m_status = new_var;
      }

      /**
       * Get the value of m_adminStatus
       * The admin status of the diskserver.
       * @return the value of m_adminStatus
       */
      castor::monitoring::AdminStatusCodes adminStatus() const {
        return m_adminStatus;
      }

      /**
       * Set the value of m_adminStatus
       * The admin status of the diskserver.
       * @param new_var the new value of m_adminStatus
       */
      void setAdminStatus(castor::monitoring::AdminStatusCodes new_var) {
        m_adminStatus = new_var;
      }

      /**
       * Add a FileSystemResource* object to the m_fileSystemsVector list
       * The filesystems associated with the diskserver.
       */
      void addFileSystems(FileSystemResource* add_object) {
        m_fileSystemsVector.push_back(add_object);
      }

      /**
       * Remove a FileSystemResource* object from m_fileSystemsVector
       */
      void removeFileSystems(FileSystemResource* remove_object) {
        for (unsigned int i = 0; i < m_fileSystemsVector.size(); i++) {
          FileSystemResource* item = m_fileSystemsVector[i];
          if (item == remove_object) {
            std::vector<FileSystemResource*>::iterator it = m_fileSystemsVector.begin() + i;
            m_fileSystemsVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of FileSystemResource* objects held by m_fileSystemsVector
       * @return list of FileSystemResource* objects held by m_fileSystemsVector
       */
      std::vector<FileSystemResource*>& fileSystems() {
        return m_fileSystemsVector;
      }

    private:

      /// Name of the diskserver.
      std::string m_diskServerName;

      /// The status of the diskserver.
      castor::stager::DiskServerStatusCode m_status;

      /// The admin status of the diskserver.
      castor::monitoring::AdminStatusCodes m_adminStatus;

      /// The filesystems associated with the diskserver.
      std::vector<FileSystemResource*> m_fileSystemsVector;

    }; /* end of class DiskServerResource */

  } /* end of namespace jobmanager */

} /* end of namespace castor */

#endif // CASTOR_JOBMANAGER_DISKSERVERRESOURCE_HPP
