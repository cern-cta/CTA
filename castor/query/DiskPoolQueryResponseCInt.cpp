/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/query/DiskPoolQueryResponseCInt.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "castor/IObject.hpp"
#include "castor/query/DiskPoolQueryResponse.hpp"
#include "castor/query/DiskServerDescription.hpp"
#include "castor/rh/Response.hpp"
#include "osdep.h"
#include <vector>

extern "C" {

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_create
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_create(castor::query::DiskPoolQueryResponse** obj) {
    *obj = new castor::query::DiskPoolQueryResponse();
    return 0;
  }
  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_delete
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_delete(castor::query::DiskPoolQueryResponse* obj) {
    delete obj;
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_getResponse
  //----------------------------------------------------------------------------
  castor::rh::Response* Cquery_DiskPoolQueryResponse_getResponse(castor::query::DiskPoolQueryResponse* obj) {
    return obj;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_fromResponse
  //----------------------------------------------------------------------------
  castor::query::DiskPoolQueryResponse* Cquery_DiskPoolQueryResponse_fromResponse(castor::rh::Response* obj) {
    return dynamic_cast<castor::query::DiskPoolQueryResponse*>(obj);
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_getIObject
  //----------------------------------------------------------------------------
  castor::IObject* Cquery_DiskPoolQueryResponse_getIObject(castor::query::DiskPoolQueryResponse* obj) {
    return obj;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_fromIObject
  //----------------------------------------------------------------------------
  castor::query::DiskPoolQueryResponse* Cquery_DiskPoolQueryResponse_fromIObject(castor::IObject* obj) {
    return dynamic_cast<castor::query::DiskPoolQueryResponse*>(obj);
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_print
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_print(castor::query::DiskPoolQueryResponse* instance) {
    instance->print();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_TYPE
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_TYPE(int* ret) {
    *ret = castor::query::DiskPoolQueryResponse::TYPE();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_errorCode
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_errorCode(castor::query::DiskPoolQueryResponse* instance, unsigned int* var) {
    *var = instance->errorCode();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setErrorCode
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setErrorCode(castor::query::DiskPoolQueryResponse* instance, unsigned int new_var) {
    instance->setErrorCode(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_errorMessage
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_errorMessage(castor::query::DiskPoolQueryResponse* instance, const char** var) {
    *var = instance->errorMessage().c_str();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setErrorMessage
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setErrorMessage(castor::query::DiskPoolQueryResponse* instance, const char* new_var) {
    std::string snew_var(new_var, strlen(new_var));
    instance->setErrorMessage(snew_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_type
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_type(castor::query::DiskPoolQueryResponse* instance,
                                        int* ret) {
    *ret = instance->type();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_clone
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_clone(castor::query::DiskPoolQueryResponse* instance,
                                         castor::IObject** ret) {
    *ret = instance->clone();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_diskPoolName
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_diskPoolName(castor::query::DiskPoolQueryResponse* instance, const char** var) {
    *var = instance->diskPoolName().c_str();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setDiskPoolName
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setDiskPoolName(castor::query::DiskPoolQueryResponse* instance, const char* new_var) {
    std::string snew_var(new_var, strlen(new_var));
    instance->setDiskPoolName(snew_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_freeSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_freeSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64* var) {
    *var = instance->freeSpace();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setFreeSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setFreeSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64 new_var) {
    instance->setFreeSpace(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_totalSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_totalSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64* var) {
    *var = instance->totalSpace();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setTotalSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setTotalSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64 new_var) {
    instance->setTotalSpace(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_reservedSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_reservedSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64* var) {
    *var = instance->reservedSpace();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setReservedSpace
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setReservedSpace(castor::query::DiskPoolQueryResponse* instance, u_signed64 new_var) {
    instance->setReservedSpace(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_id
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_id(castor::query::DiskPoolQueryResponse* instance, u_signed64* var) {
    *var = instance->id();
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_setId
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_setId(castor::query::DiskPoolQueryResponse* instance, u_signed64 new_var) {
    instance->setId(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_addDiskServers
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_addDiskServers(castor::query::DiskPoolQueryResponse* instance, castor::query::DiskServerDescription* obj) {
    instance->addDiskServers(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_removeDiskServers
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_removeDiskServers(castor::query::DiskPoolQueryResponse* instance, castor::query::DiskServerDescription* obj) {
    instance->removeDiskServers(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // Cquery_DiskPoolQueryResponse_diskServers
  //----------------------------------------------------------------------------
  int Cquery_DiskPoolQueryResponse_diskServers(castor::query::DiskPoolQueryResponse* instance, castor::query::DiskServerDescription*** var, int* len) {
    std::vector<castor::query::DiskServerDescription*>& result = instance->diskServers();
    *len = result.size();
    *var = (castor::query::DiskServerDescription**) malloc((*len) * sizeof(castor::query::DiskServerDescription*));
    for (int i = 0; i < *len; i++) {
      (*var)[i] = result[i];
    }
    return 0;
  }

} // End of extern "C"
