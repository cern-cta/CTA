/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/query/FileSystemDescription.h
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_QUERY_FILESYSTEMDESCRIPTION_H
#define CASTOR_QUERY_FILESYSTEMDESCRIPTION_H

/* Include Files and Forward declarations for the C world */
#include "osdep.h"
struct C_IObject_t;
struct Cquery_DiskServerDescription_t;
struct Cquery_FileSystemDescription_t;

/* --------------------------------------------------------------------------
  This defines a C interface to the following class
// class FileSystemDescription
  -------------------------------------------------------------------------- */

/**
 * Empty Constructor
 */
int Cquery_FileSystemDescription_create(struct Cquery_FileSystemDescription_t** obj);

/**
 * Empty Destructor
 */
int Cquery_FileSystemDescription_delete(struct Cquery_FileSystemDescription_t* obj);

/**
 * Cast into IObject
 */
struct C_IObject_t* Cquery_FileSystemDescription_getIObject(struct Cquery_FileSystemDescription_t* obj);

/**
 * Dynamic cast from IObject
 */
struct Cquery_FileSystemDescription_t* Cquery_FileSystemDescription_fromIObject(struct C_IObject_t* obj);

/**
 * Outputs this object in a human readable format
 */
int Cquery_FileSystemDescription_print(struct Cquery_FileSystemDescription_t* instance);

/**
 * Gets the type of this kind of objects
 */
int Cquery_FileSystemDescription_TYPE(int* ret);

/***************************************/
/* Implementation of IObject interface */
/***************************************/

/**
 * Gets the type of the object
 */
int Cquery_FileSystemDescription_type(struct Cquery_FileSystemDescription_t* instance,
                                      int* ret);

/**
 * virtual method to clone any object
 */
int Cquery_FileSystemDescription_clone(struct Cquery_FileSystemDescription_t* instance,
                                       struct C_IObject_t* ret);

/**
 * Get the value of mountPoint
 * The mountpoint of the FileSystem
 */
int Cquery_FileSystemDescription_mountPoint(struct Cquery_FileSystemDescription_t* instance, const char** var);

/**
 * Set the value of mountPoint
 * The mountpoint of the FileSystem
 */
int Cquery_FileSystemDescription_setMountPoint(struct Cquery_FileSystemDescription_t* instance, const char* new_var);

/**
 * Get the value of freeSpace
 * Amount of free space on this fileSystem (in bytes)
 */
int Cquery_FileSystemDescription_freeSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64* var);

/**
 * Set the value of freeSpace
 * Amount of free space on this fileSystem (in bytes)
 */
int Cquery_FileSystemDescription_setFreeSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64 new_var);

/**
 * Get the value of totalSpace
 * Total size of this fileSystem (in bytes)
 */
int Cquery_FileSystemDescription_totalSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64* var);

/**
 * Set the value of totalSpace
 * Total size of this fileSystem (in bytes)
 */
int Cquery_FileSystemDescription_setTotalSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64 new_var);

/**
 * Get the value of reservedSpace
 * Space reserved for future file writing (in bytes)
 */
int Cquery_FileSystemDescription_reservedSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64* var);

/**
 * Set the value of reservedSpace
 * Space reserved for future file writing (in bytes)
 */
int Cquery_FileSystemDescription_setReservedSpace(struct Cquery_FileSystemDescription_t* instance, u_signed64 new_var);

/**
 * Get the value of minFreeSpace
 * Minimum freespace the garbage collector should keep if possible (values from 0
 * to 1, as a portion of the totalSpace)
 */
int Cquery_FileSystemDescription_minFreeSpace(struct Cquery_FileSystemDescription_t* instance, float* var);

/**
 * Set the value of minFreeSpace
 * Minimum freespace the garbage collector should keep if possible (values from 0
 * to 1, as a portion of the totalSpace)
 */
int Cquery_FileSystemDescription_setMinFreeSpace(struct Cquery_FileSystemDescription_t* instance, float new_var);

/**
 * Get the value of maxFreeSpace
 * Minimum freespace the garbage collector should create when it runs (values from
 * 0 to 1, as a portion of the totalSpace)
 */
int Cquery_FileSystemDescription_maxFreeSpace(struct Cquery_FileSystemDescription_t* instance, float* var);

/**
 * Set the value of maxFreeSpace
 * Minimum freespace the garbage collector should create when it runs (values from
 * 0 to 1, as a portion of the totalSpace)
 */
int Cquery_FileSystemDescription_setMaxFreeSpace(struct Cquery_FileSystemDescription_t* instance, float new_var);

/**
 * Get the value of status
 * status of the FileSystem
 */
int Cquery_FileSystemDescription_status(struct Cquery_FileSystemDescription_t* instance, int* var);

/**
 * Set the value of status
 * status of the FileSystem
 */
int Cquery_FileSystemDescription_setStatus(struct Cquery_FileSystemDescription_t* instance, int new_var);

/**
 * Get the value of id
 * The id of this object
 */
int Cquery_FileSystemDescription_id(struct Cquery_FileSystemDescription_t* instance, u_signed64* var);

/**
 * Set the value of id
 * The id of this object
 */
int Cquery_FileSystemDescription_setId(struct Cquery_FileSystemDescription_t* instance, u_signed64 new_var);

/**
 * Get the value of diskServer
 */
int Cquery_FileSystemDescription_diskServer(struct Cquery_FileSystemDescription_t* instance, struct Cquery_DiskServerDescription_t** var);

/**
 * Set the value of diskServer
 */
int Cquery_FileSystemDescription_setDiskServer(struct Cquery_FileSystemDescription_t* instance, struct Cquery_DiskServerDescription_t* new_var);

#endif /* CASTOR_QUERY_FILESYSTEMDESCRIPTION_H */
