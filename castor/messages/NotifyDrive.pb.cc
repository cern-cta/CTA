// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NotifyDrive.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* NotifyDriveBeforeMountStarted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDriveBeforeMountStarted_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyDriveBeforeMountStarted_TapeClientType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyDriveTapeMounted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDriveTapeMounted_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDriveUnmountStarted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDriveUnmountStarted_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDriveTapeUnmounted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDriveTapeUnmounted_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDriveBeforeMountStartedAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDriveBeforeMountStartedAnswer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TapeMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NotifyDrive_2eproto() {
  protobuf_AddDesc_NotifyDrive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NotifyDrive.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyDriveBeforeMountStarted_descriptor_ = file->message_type(0);
  static const int NotifyDriveBeforeMountStarted_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, clienttype_),
  };
  NotifyDriveBeforeMountStarted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDriveBeforeMountStarted_descriptor_,
      NotifyDriveBeforeMountStarted::default_instance_,
      NotifyDriveBeforeMountStarted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStarted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDriveBeforeMountStarted));
  NotifyDriveBeforeMountStarted_TapeClientType_descriptor_ = NotifyDriveBeforeMountStarted_descriptor_->enum_type(0);
  NotifyDriveTapeMounted_descriptor_ = file->message_type(1);
  static const int NotifyDriveTapeMounted_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeMounted, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeMounted, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeMounted, mode_),
  };
  NotifyDriveTapeMounted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDriveTapeMounted_descriptor_,
      NotifyDriveTapeMounted::default_instance_,
      NotifyDriveTapeMounted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeMounted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeMounted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDriveTapeMounted));
  NotifyDriveUnmountStarted_descriptor_ = file->message_type(2);
  static const int NotifyDriveUnmountStarted_offsets_[1] = {
  };
  NotifyDriveUnmountStarted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDriveUnmountStarted_descriptor_,
      NotifyDriveUnmountStarted::default_instance_,
      NotifyDriveUnmountStarted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveUnmountStarted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveUnmountStarted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDriveUnmountStarted));
  NotifyDriveTapeUnmounted_descriptor_ = file->message_type(3);
  static const int NotifyDriveTapeUnmounted_offsets_[1] = {
  };
  NotifyDriveTapeUnmounted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDriveTapeUnmounted_descriptor_,
      NotifyDriveTapeUnmounted::default_instance_,
      NotifyDriveTapeUnmounted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeUnmounted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveTapeUnmounted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDriveTapeUnmounted));
  NotifyDriveBeforeMountStartedAnswer_descriptor_ = file->message_type(4);
  static const int NotifyDriveBeforeMountStartedAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStartedAnswer, howmanyfilesontape_),
  };
  NotifyDriveBeforeMountStartedAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDriveBeforeMountStartedAnswer_descriptor_,
      NotifyDriveBeforeMountStartedAnswer::default_instance_,
      NotifyDriveBeforeMountStartedAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStartedAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDriveBeforeMountStartedAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDriveBeforeMountStartedAnswer));
  TapeMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NotifyDrive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDriveBeforeMountStarted_descriptor_, &NotifyDriveBeforeMountStarted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDriveTapeMounted_descriptor_, &NotifyDriveTapeMounted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDriveUnmountStarted_descriptor_, &NotifyDriveUnmountStarted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDriveTapeUnmounted_descriptor_, &NotifyDriveTapeUnmounted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDriveBeforeMountStartedAnswer_descriptor_, &NotifyDriveBeforeMountStartedAnswer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NotifyDrive_2eproto() {
  delete NotifyDriveBeforeMountStarted::default_instance_;
  delete NotifyDriveBeforeMountStarted_reflection_;
  delete NotifyDriveTapeMounted::default_instance_;
  delete NotifyDriveTapeMounted_reflection_;
  delete NotifyDriveUnmountStarted::default_instance_;
  delete NotifyDriveUnmountStarted_reflection_;
  delete NotifyDriveTapeUnmounted::default_instance_;
  delete NotifyDriveTapeUnmounted_reflection_;
  delete NotifyDriveBeforeMountStartedAnswer::default_instance_;
  delete NotifyDriveBeforeMountStartedAnswer_reflection_;
}

void protobuf_AddDesc_NotifyDrive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021NotifyDrive.proto\022\017castor.messages\"\305\002\n"
    "\035NotifyDriveBeforeMountStarted\022\013\n\003vid\030\001 "
    "\002(\t\022\020\n\010unitName\030\002 \002(\t\022\'\n\004mode\030\003 \002(\0162\031.ca"
    "stor.messages.TapeMode\022Q\n\nclientType\030\004 \002"
    "(\0162=.castor.messages.NotifyDriveBeforeMo"
    "untStarted.TapeClientType\"\210\001\n\016TapeClient"
    "Type\022\024\n\020CLIENT_TYPE_NONE\020\001\022\027\n\023CLIENT_TYP"
    "E_GATEWAY\020\002\022\026\n\022CLIENT_TYPE_READTP\020\003\022\027\n\023C"
    "LIENT_TYPE_WRITETP\020\004\022\026\n\022CLIENT_TYPE_DUMP"
    "TP\020\005\"`\n\026NotifyDriveTapeMounted\022\013\n\003vid\030\001 "
    "\002(\t\022\020\n\010unitName\030\002 \002(\t\022\'\n\004mode\030\003 \002(\0162\031.ca"
    "stor.messages.TapeMode\"\033\n\031NotifyDriveUnm"
    "ountStarted\"\032\n\030NotifyDriveTapeUnmounted\""
    "A\n#NotifyDriveBeforeMountStartedAnswer\022\032"
    "\n\022howManyFilesOnTape\030\001 \002(\r*_\n\010TapeMode\022\022"
    "\n\016TAPE_MODE_NONE\020\001\022\022\n\016TAPE_MODE_READ\020\002\022\027"
    "\n\023TAPE_MODE_READWRITE\020\003\022\022\n\016TAPE_MODE_DUM"
    "P\020\004", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NotifyDrive.proto", &protobuf_RegisterTypes);
  NotifyDriveBeforeMountStarted::default_instance_ = new NotifyDriveBeforeMountStarted();
  NotifyDriveTapeMounted::default_instance_ = new NotifyDriveTapeMounted();
  NotifyDriveUnmountStarted::default_instance_ = new NotifyDriveUnmountStarted();
  NotifyDriveTapeUnmounted::default_instance_ = new NotifyDriveTapeUnmounted();
  NotifyDriveBeforeMountStartedAnswer::default_instance_ = new NotifyDriveBeforeMountStartedAnswer();
  NotifyDriveBeforeMountStarted::default_instance_->InitAsDefaultInstance();
  NotifyDriveTapeMounted::default_instance_->InitAsDefaultInstance();
  NotifyDriveUnmountStarted::default_instance_->InitAsDefaultInstance();
  NotifyDriveTapeUnmounted::default_instance_->InitAsDefaultInstance();
  NotifyDriveBeforeMountStartedAnswer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NotifyDrive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NotifyDrive_2eproto {
  StaticDescriptorInitializer_NotifyDrive_2eproto() {
    protobuf_AddDesc_NotifyDrive_2eproto();
  }
} static_descriptor_initializer_NotifyDrive_2eproto_;

const ::google::protobuf::EnumDescriptor* TapeMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TapeMode_descriptor_;
}
bool TapeMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyDriveBeforeMountStarted_TapeClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveBeforeMountStarted_TapeClientType_descriptor_;
}
bool NotifyDriveBeforeMountStarted_TapeClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::CLIENT_TYPE_NONE;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::CLIENT_TYPE_GATEWAY;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::CLIENT_TYPE_READTP;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::CLIENT_TYPE_WRITETP;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::CLIENT_TYPE_DUMPTP;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::TapeClientType_MIN;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::TapeClientType_MAX;
const int NotifyDriveBeforeMountStarted::TapeClientType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string NotifyDriveBeforeMountStarted::_default_vid_;
const ::std::string NotifyDriveBeforeMountStarted::_default_unitname_;
#ifndef _MSC_VER
const int NotifyDriveBeforeMountStarted::kVidFieldNumber;
const int NotifyDriveBeforeMountStarted::kUnitNameFieldNumber;
const int NotifyDriveBeforeMountStarted::kModeFieldNumber;
const int NotifyDriveBeforeMountStarted::kClientTypeFieldNumber;
#endif  // !_MSC_VER

NotifyDriveBeforeMountStarted::NotifyDriveBeforeMountStarted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDriveBeforeMountStarted::InitAsDefaultInstance() {
}

NotifyDriveBeforeMountStarted::NotifyDriveBeforeMountStarted(const NotifyDriveBeforeMountStarted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDriveBeforeMountStarted::SharedCtor() {
  _cached_size_ = 0;
  vid_ = const_cast< ::std::string*>(&_default_vid_);
  unitname_ = const_cast< ::std::string*>(&_default_unitname_);
  mode_ = 1;
  clienttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDriveBeforeMountStarted::~NotifyDriveBeforeMountStarted() {
  SharedDtor();
}

void NotifyDriveBeforeMountStarted::SharedDtor() {
  if (vid_ != &_default_vid_) {
    delete vid_;
  }
  if (unitname_ != &_default_unitname_) {
    delete unitname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyDriveBeforeMountStarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDriveBeforeMountStarted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveBeforeMountStarted_descriptor_;
}

const NotifyDriveBeforeMountStarted& NotifyDriveBeforeMountStarted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NotifyDrive_2eproto();  return *default_instance_;
}

NotifyDriveBeforeMountStarted* NotifyDriveBeforeMountStarted::default_instance_ = NULL;

NotifyDriveBeforeMountStarted* NotifyDriveBeforeMountStarted::New() const {
  return new NotifyDriveBeforeMountStarted;
}

void NotifyDriveBeforeMountStarted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vid_ != &_default_vid_) {
        vid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (unitname_ != &_default_unitname_) {
        unitname_->clear();
      }
    }
    mode_ = 1;
    clienttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDriveBeforeMountStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid().data(), this->vid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitName;
        break;
      }
      
      // required string unitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // required .castor.messages.TapeMode mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (castor::messages::TapeMode_IsValid(value)) {
            set_mode(static_cast< castor::messages::TapeMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clientType;
        break;
      }
      
      // required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType_IsValid(value)) {
            set_clienttype(static_cast< ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDriveBeforeMountStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vid(), output);
  }
  
  // required string unitName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitname(), output);
  }
  
  // required .castor.messages.TapeMode mode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  // required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->clienttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDriveBeforeMountStarted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }
  
  // required string unitName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unitname(), target);
  }
  
  // required .castor.messages.TapeMode mode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  // required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->clienttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDriveBeforeMountStarted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }
    
    // required string unitName = 2;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }
    
    // required .castor.messages.TapeMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clienttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDriveBeforeMountStarted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDriveBeforeMountStarted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDriveBeforeMountStarted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDriveBeforeMountStarted::MergeFrom(const NotifyDriveBeforeMountStarted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_unitname(from.unitname());
    }
    if (from._has_bit(2)) {
      set_mode(from.mode());
    }
    if (from._has_bit(3)) {
      set_clienttype(from.clienttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDriveBeforeMountStarted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDriveBeforeMountStarted::CopyFrom(const NotifyDriveBeforeMountStarted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDriveBeforeMountStarted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void NotifyDriveBeforeMountStarted::Swap(NotifyDriveBeforeMountStarted* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(unitname_, other->unitname_);
    std::swap(mode_, other->mode_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDriveBeforeMountStarted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDriveBeforeMountStarted_descriptor_;
  metadata.reflection = NotifyDriveBeforeMountStarted_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string NotifyDriveTapeMounted::_default_vid_;
const ::std::string NotifyDriveTapeMounted::_default_unitname_;
#ifndef _MSC_VER
const int NotifyDriveTapeMounted::kVidFieldNumber;
const int NotifyDriveTapeMounted::kUnitNameFieldNumber;
const int NotifyDriveTapeMounted::kModeFieldNumber;
#endif  // !_MSC_VER

NotifyDriveTapeMounted::NotifyDriveTapeMounted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDriveTapeMounted::InitAsDefaultInstance() {
}

NotifyDriveTapeMounted::NotifyDriveTapeMounted(const NotifyDriveTapeMounted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDriveTapeMounted::SharedCtor() {
  _cached_size_ = 0;
  vid_ = const_cast< ::std::string*>(&_default_vid_);
  unitname_ = const_cast< ::std::string*>(&_default_unitname_);
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDriveTapeMounted::~NotifyDriveTapeMounted() {
  SharedDtor();
}

void NotifyDriveTapeMounted::SharedDtor() {
  if (vid_ != &_default_vid_) {
    delete vid_;
  }
  if (unitname_ != &_default_unitname_) {
    delete unitname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyDriveTapeMounted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDriveTapeMounted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveTapeMounted_descriptor_;
}

const NotifyDriveTapeMounted& NotifyDriveTapeMounted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NotifyDrive_2eproto();  return *default_instance_;
}

NotifyDriveTapeMounted* NotifyDriveTapeMounted::default_instance_ = NULL;

NotifyDriveTapeMounted* NotifyDriveTapeMounted::New() const {
  return new NotifyDriveTapeMounted;
}

void NotifyDriveTapeMounted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vid_ != &_default_vid_) {
        vid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (unitname_ != &_default_unitname_) {
        unitname_->clear();
      }
    }
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDriveTapeMounted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid().data(), this->vid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitName;
        break;
      }
      
      // required string unitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // required .castor.messages.TapeMode mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (castor::messages::TapeMode_IsValid(value)) {
            set_mode(static_cast< castor::messages::TapeMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDriveTapeMounted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vid(), output);
  }
  
  // required string unitName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitname(), output);
  }
  
  // required .castor.messages.TapeMode mode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDriveTapeMounted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }
  
  // required string unitName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unitname(), target);
  }
  
  // required .castor.messages.TapeMode mode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDriveTapeMounted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }
    
    // required string unitName = 2;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }
    
    // required .castor.messages.TapeMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDriveTapeMounted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDriveTapeMounted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDriveTapeMounted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDriveTapeMounted::MergeFrom(const NotifyDriveTapeMounted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_unitname(from.unitname());
    }
    if (from._has_bit(2)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDriveTapeMounted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDriveTapeMounted::CopyFrom(const NotifyDriveTapeMounted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDriveTapeMounted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void NotifyDriveTapeMounted::Swap(NotifyDriveTapeMounted* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(unitname_, other->unitname_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDriveTapeMounted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDriveTapeMounted_descriptor_;
  metadata.reflection = NotifyDriveTapeMounted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyDriveUnmountStarted::NotifyDriveUnmountStarted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDriveUnmountStarted::InitAsDefaultInstance() {
}

NotifyDriveUnmountStarted::NotifyDriveUnmountStarted(const NotifyDriveUnmountStarted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDriveUnmountStarted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDriveUnmountStarted::~NotifyDriveUnmountStarted() {
  SharedDtor();
}

void NotifyDriveUnmountStarted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDriveUnmountStarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDriveUnmountStarted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveUnmountStarted_descriptor_;
}

const NotifyDriveUnmountStarted& NotifyDriveUnmountStarted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NotifyDrive_2eproto();  return *default_instance_;
}

NotifyDriveUnmountStarted* NotifyDriveUnmountStarted::default_instance_ = NULL;

NotifyDriveUnmountStarted* NotifyDriveUnmountStarted::New() const {
  return new NotifyDriveUnmountStarted;
}

void NotifyDriveUnmountStarted::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDriveUnmountStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyDriveUnmountStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDriveUnmountStarted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDriveUnmountStarted::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDriveUnmountStarted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDriveUnmountStarted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDriveUnmountStarted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDriveUnmountStarted::MergeFrom(const NotifyDriveUnmountStarted& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDriveUnmountStarted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDriveUnmountStarted::CopyFrom(const NotifyDriveUnmountStarted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDriveUnmountStarted::IsInitialized() const {
  
  return true;
}

void NotifyDriveUnmountStarted::Swap(NotifyDriveUnmountStarted* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDriveUnmountStarted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDriveUnmountStarted_descriptor_;
  metadata.reflection = NotifyDriveUnmountStarted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyDriveTapeUnmounted::NotifyDriveTapeUnmounted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDriveTapeUnmounted::InitAsDefaultInstance() {
}

NotifyDriveTapeUnmounted::NotifyDriveTapeUnmounted(const NotifyDriveTapeUnmounted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDriveTapeUnmounted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDriveTapeUnmounted::~NotifyDriveTapeUnmounted() {
  SharedDtor();
}

void NotifyDriveTapeUnmounted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDriveTapeUnmounted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDriveTapeUnmounted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveTapeUnmounted_descriptor_;
}

const NotifyDriveTapeUnmounted& NotifyDriveTapeUnmounted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NotifyDrive_2eproto();  return *default_instance_;
}

NotifyDriveTapeUnmounted* NotifyDriveTapeUnmounted::default_instance_ = NULL;

NotifyDriveTapeUnmounted* NotifyDriveTapeUnmounted::New() const {
  return new NotifyDriveTapeUnmounted;
}

void NotifyDriveTapeUnmounted::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDriveTapeUnmounted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyDriveTapeUnmounted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDriveTapeUnmounted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDriveTapeUnmounted::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDriveTapeUnmounted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDriveTapeUnmounted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDriveTapeUnmounted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDriveTapeUnmounted::MergeFrom(const NotifyDriveTapeUnmounted& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDriveTapeUnmounted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDriveTapeUnmounted::CopyFrom(const NotifyDriveTapeUnmounted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDriveTapeUnmounted::IsInitialized() const {
  
  return true;
}

void NotifyDriveTapeUnmounted::Swap(NotifyDriveTapeUnmounted* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDriveTapeUnmounted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDriveTapeUnmounted_descriptor_;
  metadata.reflection = NotifyDriveTapeUnmounted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDriveBeforeMountStartedAnswer::kHowManyFilesOnTapeFieldNumber;
#endif  // !_MSC_VER

NotifyDriveBeforeMountStartedAnswer::NotifyDriveBeforeMountStartedAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDriveBeforeMountStartedAnswer::InitAsDefaultInstance() {
}

NotifyDriveBeforeMountStartedAnswer::NotifyDriveBeforeMountStartedAnswer(const NotifyDriveBeforeMountStartedAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDriveBeforeMountStartedAnswer::SharedCtor() {
  _cached_size_ = 0;
  howmanyfilesontape_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDriveBeforeMountStartedAnswer::~NotifyDriveBeforeMountStartedAnswer() {
  SharedDtor();
}

void NotifyDriveBeforeMountStartedAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDriveBeforeMountStartedAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDriveBeforeMountStartedAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDriveBeforeMountStartedAnswer_descriptor_;
}

const NotifyDriveBeforeMountStartedAnswer& NotifyDriveBeforeMountStartedAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NotifyDrive_2eproto();  return *default_instance_;
}

NotifyDriveBeforeMountStartedAnswer* NotifyDriveBeforeMountStartedAnswer::default_instance_ = NULL;

NotifyDriveBeforeMountStartedAnswer* NotifyDriveBeforeMountStartedAnswer::New() const {
  return new NotifyDriveBeforeMountStartedAnswer;
}

void NotifyDriveBeforeMountStartedAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    howmanyfilesontape_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDriveBeforeMountStartedAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 howManyFilesOnTape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &howmanyfilesontape_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDriveBeforeMountStartedAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 howManyFilesOnTape = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->howmanyfilesontape(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDriveBeforeMountStartedAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 howManyFilesOnTape = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->howmanyfilesontape(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDriveBeforeMountStartedAnswer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 howManyFilesOnTape = 1;
    if (has_howmanyfilesontape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->howmanyfilesontape());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDriveBeforeMountStartedAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDriveBeforeMountStartedAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDriveBeforeMountStartedAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDriveBeforeMountStartedAnswer::MergeFrom(const NotifyDriveBeforeMountStartedAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_howmanyfilesontape(from.howmanyfilesontape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDriveBeforeMountStartedAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDriveBeforeMountStartedAnswer::CopyFrom(const NotifyDriveBeforeMountStartedAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDriveBeforeMountStartedAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NotifyDriveBeforeMountStartedAnswer::Swap(NotifyDriveBeforeMountStartedAnswer* other) {
  if (other != this) {
    std::swap(howmanyfilesontape_, other->howmanyfilesontape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDriveBeforeMountStartedAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDriveBeforeMountStartedAnswer_descriptor_;
  metadata.reflection = NotifyDriveBeforeMountStartedAnswer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

// @@protoc_insertion_point(global_scope)
