// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForkDataTransfer.proto

#ifndef PROTOBUF_ForkDataTransfer_2eproto__INCLUDED
#define PROTOBUF_ForkDataTransfer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ForkDataTransfer_2eproto();
void protobuf_AssignDesc_ForkDataTransfer_2eproto();
void protobuf_ShutdownFile_ForkDataTransfer_2eproto();

class ForkDataTransfer;

// ===================================================================

class ForkDataTransfer : public ::google::protobuf::Message {
 public:
  ForkDataTransfer();
  virtual ~ForkDataTransfer();
  
  ForkDataTransfer(const ForkDataTransfer& from);
  
  inline ForkDataTransfer& operator=(const ForkDataTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForkDataTransfer& default_instance();
  
  void Swap(ForkDataTransfer* other);
  
  // implements Message ----------------------------------------------
  
  ForkDataTransfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForkDataTransfer& from);
  void MergeFrom(const ForkDataTransfer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string unitname = 1;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitnameFieldNumber = 1;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  
  // required string dgn = 2;
  inline bool has_dgn() const;
  inline void clear_dgn();
  static const int kDgnFieldNumber = 2;
  inline const ::std::string& dgn() const;
  inline void set_dgn(const ::std::string& value);
  inline void set_dgn(const char* value);
  inline void set_dgn(const char* value, size_t size);
  inline ::std::string* mutable_dgn();
  
  // required string devfilename = 3;
  inline bool has_devfilename() const;
  inline void clear_devfilename();
  static const int kDevfilenameFieldNumber = 3;
  inline const ::std::string& devfilename() const;
  inline void set_devfilename(const ::std::string& value);
  inline void set_devfilename(const char* value);
  inline void set_devfilename(const char* value, size_t size);
  inline ::std::string* mutable_devfilename();
  
  // repeated string density = 4;
  inline int density_size() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 4;
  inline const ::std::string& density(int index) const;
  inline ::std::string* mutable_density(int index);
  inline void set_density(int index, const ::std::string& value);
  inline void set_density(int index, const char* value);
  inline void set_density(int index, const char* value, size_t size);
  inline ::std::string* add_density();
  inline void add_density(const ::std::string& value);
  inline void add_density(const char* value);
  inline void add_density(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& density() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_density();
  
  // required string libraryslot = 5;
  inline bool has_libraryslot() const;
  inline void clear_libraryslot();
  static const int kLibraryslotFieldNumber = 5;
  inline const ::std::string& libraryslot() const;
  inline void set_libraryslot(const ::std::string& value);
  inline void set_libraryslot(const char* value);
  inline void set_libraryslot(const char* value, size_t size);
  inline ::std::string* mutable_libraryslot();
  
  // required string devtype = 6;
  inline bool has_devtype() const;
  inline void clear_devtype();
  static const int kDevtypeFieldNumber = 6;
  inline const ::std::string& devtype() const;
  inline void set_devtype(const ::std::string& value);
  inline void set_devtype(const char* value);
  inline void set_devtype(const char* value, size_t size);
  inline ::std::string* mutable_devtype();
  
  // required uint32 mounttransactionid = 7;
  inline bool has_mounttransactionid() const;
  inline void clear_mounttransactionid();
  static const int kMounttransactionidFieldNumber = 7;
  inline ::google::protobuf::uint32 mounttransactionid() const;
  inline void set_mounttransactionid(::google::protobuf::uint32 value);
  
  // required uint32 clientport = 8;
  inline bool has_clientport() const;
  inline void clear_clientport();
  static const int kClientportFieldNumber = 8;
  inline ::google::protobuf::uint32 clientport() const;
  inline void set_clientport(::google::protobuf::uint32 value);
  
  // required uint32 clienteuid = 9;
  inline bool has_clienteuid() const;
  inline void clear_clienteuid();
  static const int kClienteuidFieldNumber = 9;
  inline ::google::protobuf::uint32 clienteuid() const;
  inline void set_clienteuid(::google::protobuf::uint32 value);
  
  // required uint32 clientegid = 10;
  inline bool has_clientegid() const;
  inline void clear_clientegid();
  static const int kClientegidFieldNumber = 10;
  inline ::google::protobuf::uint32 clientegid() const;
  inline void set_clientegid(::google::protobuf::uint32 value);
  
  // required string clienthost = 11;
  inline bool has_clienthost() const;
  inline void clear_clienthost();
  static const int kClienthostFieldNumber = 11;
  inline const ::std::string& clienthost() const;
  inline void set_clienthost(const ::std::string& value);
  inline void set_clienthost(const char* value);
  inline void set_clienthost(const char* value, size_t size);
  inline ::std::string* mutable_clienthost();
  
  // required string clientusername = 12;
  inline bool has_clientusername() const;
  inline void clear_clientusername();
  static const int kClientusernameFieldNumber = 12;
  inline const ::std::string& clientusername() const;
  inline void set_clientusername(const ::std::string& value);
  inline void set_clientusername(const char* value);
  inline void set_clientusername(const char* value, size_t size);
  inline ::std::string* mutable_clientusername();
  
  // required uint32 memblocksize = 13;
  inline bool has_memblocksize() const;
  inline void clear_memblocksize();
  static const int kMemblocksizeFieldNumber = 13;
  inline ::google::protobuf::uint32 memblocksize() const;
  inline void set_memblocksize(::google::protobuf::uint32 value);
  
  // required uint32 nbmemblocks = 14;
  inline bool has_nbmemblocks() const;
  inline void clear_nbmemblocks();
  static const int kNbmemblocksFieldNumber = 14;
  inline ::google::protobuf::uint32 nbmemblocks() const;
  inline void set_nbmemblocks(::google::protobuf::uint32 value);
  
  // required string badmirhandling = 15;
  inline bool has_badmirhandling() const;
  inline void clear_badmirhandling();
  static const int kBadmirhandlingFieldNumber = 15;
  inline const ::std::string& badmirhandling() const;
  inline void set_badmirhandling(const ::std::string& value);
  inline void set_badmirhandling(const char* value);
  inline void set_badmirhandling(const char* value, size_t size);
  inline ::std::string* mutable_badmirhandling();
  
  // required uint64 bulkrequestmigrationmaxbytes = 16;
  inline bool has_bulkrequestmigrationmaxbytes() const;
  inline void clear_bulkrequestmigrationmaxbytes();
  static const int kBulkrequestmigrationmaxbytesFieldNumber = 16;
  inline ::google::protobuf::uint64 bulkrequestmigrationmaxbytes() const;
  inline void set_bulkrequestmigrationmaxbytes(::google::protobuf::uint64 value);
  
  // required uint64 bulkrequestmigrationmaxfiles = 17;
  inline bool has_bulkrequestmigrationmaxfiles() const;
  inline void clear_bulkrequestmigrationmaxfiles();
  static const int kBulkrequestmigrationmaxfilesFieldNumber = 17;
  inline ::google::protobuf::uint64 bulkrequestmigrationmaxfiles() const;
  inline void set_bulkrequestmigrationmaxfiles(::google::protobuf::uint64 value);
  
  // required uint64 bulkrequestrecallmaxbytes = 18;
  inline bool has_bulkrequestrecallmaxbytes() const;
  inline void clear_bulkrequestrecallmaxbytes();
  static const int kBulkrequestrecallmaxbytesFieldNumber = 18;
  inline ::google::protobuf::uint64 bulkrequestrecallmaxbytes() const;
  inline void set_bulkrequestrecallmaxbytes(::google::protobuf::uint64 value);
  
  // required uint64 bulkrequestrecallmaxfiles = 19;
  inline bool has_bulkrequestrecallmaxfiles() const;
  inline void clear_bulkrequestrecallmaxfiles();
  static const int kBulkrequestrecallmaxfilesFieldNumber = 19;
  inline ::google::protobuf::uint64 bulkrequestrecallmaxfiles() const;
  inline void set_bulkrequestrecallmaxfiles(::google::protobuf::uint64 value);
  
  // required uint64 maxbytesbeforeflush = 20;
  inline bool has_maxbytesbeforeflush() const;
  inline void clear_maxbytesbeforeflush();
  static const int kMaxbytesbeforeflushFieldNumber = 20;
  inline ::google::protobuf::uint64 maxbytesbeforeflush() const;
  inline void set_maxbytesbeforeflush(::google::protobuf::uint64 value);
  
  // required uint64 maxfilesbeforeflush = 21;
  inline bool has_maxfilesbeforeflush() const;
  inline void clear_maxfilesbeforeflush();
  static const int kMaxfilesbeforeflushFieldNumber = 21;
  inline ::google::protobuf::uint64 maxfilesbeforeflush() const;
  inline void set_maxfilesbeforeflush(::google::protobuf::uint64 value);
  
  // required uint32 diskthreadpoolsize = 22;
  inline bool has_diskthreadpoolsize() const;
  inline void clear_diskthreadpoolsize();
  static const int kDiskthreadpoolsizeFieldNumber = 22;
  inline ::google::protobuf::uint32 diskthreadpoolsize() const;
  inline void set_diskthreadpoolsize(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.ForkDataTransfer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* unitname_;
  static const ::std::string _default_unitname_;
  ::std::string* dgn_;
  static const ::std::string _default_dgn_;
  ::std::string* devfilename_;
  static const ::std::string _default_devfilename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> density_;
  ::std::string* libraryslot_;
  static const ::std::string _default_libraryslot_;
  ::std::string* devtype_;
  static const ::std::string _default_devtype_;
  ::google::protobuf::uint32 mounttransactionid_;
  ::google::protobuf::uint32 clientport_;
  ::google::protobuf::uint32 clienteuid_;
  ::google::protobuf::uint32 clientegid_;
  ::std::string* clienthost_;
  static const ::std::string _default_clienthost_;
  ::std::string* clientusername_;
  static const ::std::string _default_clientusername_;
  ::google::protobuf::uint32 memblocksize_;
  ::google::protobuf::uint32 nbmemblocks_;
  ::std::string* badmirhandling_;
  static const ::std::string _default_badmirhandling_;
  ::google::protobuf::uint64 bulkrequestmigrationmaxbytes_;
  ::google::protobuf::uint64 bulkrequestmigrationmaxfiles_;
  ::google::protobuf::uint64 bulkrequestrecallmaxbytes_;
  ::google::protobuf::uint64 bulkrequestrecallmaxfiles_;
  ::google::protobuf::uint64 maxbytesbeforeflush_;
  ::google::protobuf::uint64 maxfilesbeforeflush_;
  ::google::protobuf::uint32 diskthreadpoolsize_;
  friend void  protobuf_AddDesc_ForkDataTransfer_2eproto();
  friend void protobuf_AssignDesc_ForkDataTransfer_2eproto();
  friend void protobuf_ShutdownFile_ForkDataTransfer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForkDataTransfer* default_instance_;
};
// ===================================================================


// ===================================================================

// ForkDataTransfer

// required string unitname = 1;
inline bool ForkDataTransfer::has_unitname() const {
  return _has_bit(0);
}
inline void ForkDataTransfer::clear_unitname() {
  if (unitname_ != &_default_unitname_) {
    unitname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ForkDataTransfer::unitname() const {
  return *unitname_;
}
inline void ForkDataTransfer::set_unitname(const ::std::string& value) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void ForkDataTransfer::set_unitname(const char* value) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void ForkDataTransfer::set_unitname(const char* value, size_t size) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_unitname() {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}

// required string dgn = 2;
inline bool ForkDataTransfer::has_dgn() const {
  return _has_bit(1);
}
inline void ForkDataTransfer::clear_dgn() {
  if (dgn_ != &_default_dgn_) {
    dgn_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ForkDataTransfer::dgn() const {
  return *dgn_;
}
inline void ForkDataTransfer::set_dgn(const ::std::string& value) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(value);
}
inline void ForkDataTransfer::set_dgn(const char* value) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(value);
}
inline void ForkDataTransfer::set_dgn(const char* value, size_t size) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_dgn() {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  return dgn_;
}

// required string devfilename = 3;
inline bool ForkDataTransfer::has_devfilename() const {
  return _has_bit(2);
}
inline void ForkDataTransfer::clear_devfilename() {
  if (devfilename_ != &_default_devfilename_) {
    devfilename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ForkDataTransfer::devfilename() const {
  return *devfilename_;
}
inline void ForkDataTransfer::set_devfilename(const ::std::string& value) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(value);
}
inline void ForkDataTransfer::set_devfilename(const char* value) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(value);
}
inline void ForkDataTransfer::set_devfilename(const char* value, size_t size) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_devfilename() {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  return devfilename_;
}

// repeated string density = 4;
inline int ForkDataTransfer::density_size() const {
  return density_.size();
}
inline void ForkDataTransfer::clear_density() {
  density_.Clear();
}
inline const ::std::string& ForkDataTransfer::density(int index) const {
  return density_.Get(index);
}
inline ::std::string* ForkDataTransfer::mutable_density(int index) {
  return density_.Mutable(index);
}
inline void ForkDataTransfer::set_density(int index, const ::std::string& value) {
  density_.Mutable(index)->assign(value);
}
inline void ForkDataTransfer::set_density(int index, const char* value) {
  density_.Mutable(index)->assign(value);
}
inline void ForkDataTransfer::set_density(int index, const char* value, size_t size) {
  density_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::add_density() {
  return density_.Add();
}
inline void ForkDataTransfer::add_density(const ::std::string& value) {
  density_.Add()->assign(value);
}
inline void ForkDataTransfer::add_density(const char* value) {
  density_.Add()->assign(value);
}
inline void ForkDataTransfer::add_density(const char* value, size_t size) {
  density_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ForkDataTransfer::density() const {
  return density_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ForkDataTransfer::mutable_density() {
  return &density_;
}

// required string libraryslot = 5;
inline bool ForkDataTransfer::has_libraryslot() const {
  return _has_bit(4);
}
inline void ForkDataTransfer::clear_libraryslot() {
  if (libraryslot_ != &_default_libraryslot_) {
    libraryslot_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ForkDataTransfer::libraryslot() const {
  return *libraryslot_;
}
inline void ForkDataTransfer::set_libraryslot(const ::std::string& value) {
  _set_bit(4);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(value);
}
inline void ForkDataTransfer::set_libraryslot(const char* value) {
  _set_bit(4);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(value);
}
inline void ForkDataTransfer::set_libraryslot(const char* value, size_t size) {
  _set_bit(4);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_libraryslot() {
  _set_bit(4);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  return libraryslot_;
}

// required string devtype = 6;
inline bool ForkDataTransfer::has_devtype() const {
  return _has_bit(5);
}
inline void ForkDataTransfer::clear_devtype() {
  if (devtype_ != &_default_devtype_) {
    devtype_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& ForkDataTransfer::devtype() const {
  return *devtype_;
}
inline void ForkDataTransfer::set_devtype(const ::std::string& value) {
  _set_bit(5);
  if (devtype_ == &_default_devtype_) {
    devtype_ = new ::std::string;
  }
  devtype_->assign(value);
}
inline void ForkDataTransfer::set_devtype(const char* value) {
  _set_bit(5);
  if (devtype_ == &_default_devtype_) {
    devtype_ = new ::std::string;
  }
  devtype_->assign(value);
}
inline void ForkDataTransfer::set_devtype(const char* value, size_t size) {
  _set_bit(5);
  if (devtype_ == &_default_devtype_) {
    devtype_ = new ::std::string;
  }
  devtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_devtype() {
  _set_bit(5);
  if (devtype_ == &_default_devtype_) {
    devtype_ = new ::std::string;
  }
  return devtype_;
}

// required uint32 mounttransactionid = 7;
inline bool ForkDataTransfer::has_mounttransactionid() const {
  return _has_bit(6);
}
inline void ForkDataTransfer::clear_mounttransactionid() {
  mounttransactionid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 ForkDataTransfer::mounttransactionid() const {
  return mounttransactionid_;
}
inline void ForkDataTransfer::set_mounttransactionid(::google::protobuf::uint32 value) {
  _set_bit(6);
  mounttransactionid_ = value;
}

// required uint32 clientport = 8;
inline bool ForkDataTransfer::has_clientport() const {
  return _has_bit(7);
}
inline void ForkDataTransfer::clear_clientport() {
  clientport_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 ForkDataTransfer::clientport() const {
  return clientport_;
}
inline void ForkDataTransfer::set_clientport(::google::protobuf::uint32 value) {
  _set_bit(7);
  clientport_ = value;
}

// required uint32 clienteuid = 9;
inline bool ForkDataTransfer::has_clienteuid() const {
  return _has_bit(8);
}
inline void ForkDataTransfer::clear_clienteuid() {
  clienteuid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 ForkDataTransfer::clienteuid() const {
  return clienteuid_;
}
inline void ForkDataTransfer::set_clienteuid(::google::protobuf::uint32 value) {
  _set_bit(8);
  clienteuid_ = value;
}

// required uint32 clientegid = 10;
inline bool ForkDataTransfer::has_clientegid() const {
  return _has_bit(9);
}
inline void ForkDataTransfer::clear_clientegid() {
  clientegid_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 ForkDataTransfer::clientegid() const {
  return clientegid_;
}
inline void ForkDataTransfer::set_clientegid(::google::protobuf::uint32 value) {
  _set_bit(9);
  clientegid_ = value;
}

// required string clienthost = 11;
inline bool ForkDataTransfer::has_clienthost() const {
  return _has_bit(10);
}
inline void ForkDataTransfer::clear_clienthost() {
  if (clienthost_ != &_default_clienthost_) {
    clienthost_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& ForkDataTransfer::clienthost() const {
  return *clienthost_;
}
inline void ForkDataTransfer::set_clienthost(const ::std::string& value) {
  _set_bit(10);
  if (clienthost_ == &_default_clienthost_) {
    clienthost_ = new ::std::string;
  }
  clienthost_->assign(value);
}
inline void ForkDataTransfer::set_clienthost(const char* value) {
  _set_bit(10);
  if (clienthost_ == &_default_clienthost_) {
    clienthost_ = new ::std::string;
  }
  clienthost_->assign(value);
}
inline void ForkDataTransfer::set_clienthost(const char* value, size_t size) {
  _set_bit(10);
  if (clienthost_ == &_default_clienthost_) {
    clienthost_ = new ::std::string;
  }
  clienthost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_clienthost() {
  _set_bit(10);
  if (clienthost_ == &_default_clienthost_) {
    clienthost_ = new ::std::string;
  }
  return clienthost_;
}

// required string clientusername = 12;
inline bool ForkDataTransfer::has_clientusername() const {
  return _has_bit(11);
}
inline void ForkDataTransfer::clear_clientusername() {
  if (clientusername_ != &_default_clientusername_) {
    clientusername_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& ForkDataTransfer::clientusername() const {
  return *clientusername_;
}
inline void ForkDataTransfer::set_clientusername(const ::std::string& value) {
  _set_bit(11);
  if (clientusername_ == &_default_clientusername_) {
    clientusername_ = new ::std::string;
  }
  clientusername_->assign(value);
}
inline void ForkDataTransfer::set_clientusername(const char* value) {
  _set_bit(11);
  if (clientusername_ == &_default_clientusername_) {
    clientusername_ = new ::std::string;
  }
  clientusername_->assign(value);
}
inline void ForkDataTransfer::set_clientusername(const char* value, size_t size) {
  _set_bit(11);
  if (clientusername_ == &_default_clientusername_) {
    clientusername_ = new ::std::string;
  }
  clientusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_clientusername() {
  _set_bit(11);
  if (clientusername_ == &_default_clientusername_) {
    clientusername_ = new ::std::string;
  }
  return clientusername_;
}

// required uint32 memblocksize = 13;
inline bool ForkDataTransfer::has_memblocksize() const {
  return _has_bit(12);
}
inline void ForkDataTransfer::clear_memblocksize() {
  memblocksize_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 ForkDataTransfer::memblocksize() const {
  return memblocksize_;
}
inline void ForkDataTransfer::set_memblocksize(::google::protobuf::uint32 value) {
  _set_bit(12);
  memblocksize_ = value;
}

// required uint32 nbmemblocks = 14;
inline bool ForkDataTransfer::has_nbmemblocks() const {
  return _has_bit(13);
}
inline void ForkDataTransfer::clear_nbmemblocks() {
  nbmemblocks_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 ForkDataTransfer::nbmemblocks() const {
  return nbmemblocks_;
}
inline void ForkDataTransfer::set_nbmemblocks(::google::protobuf::uint32 value) {
  _set_bit(13);
  nbmemblocks_ = value;
}

// required string badmirhandling = 15;
inline bool ForkDataTransfer::has_badmirhandling() const {
  return _has_bit(14);
}
inline void ForkDataTransfer::clear_badmirhandling() {
  if (badmirhandling_ != &_default_badmirhandling_) {
    badmirhandling_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& ForkDataTransfer::badmirhandling() const {
  return *badmirhandling_;
}
inline void ForkDataTransfer::set_badmirhandling(const ::std::string& value) {
  _set_bit(14);
  if (badmirhandling_ == &_default_badmirhandling_) {
    badmirhandling_ = new ::std::string;
  }
  badmirhandling_->assign(value);
}
inline void ForkDataTransfer::set_badmirhandling(const char* value) {
  _set_bit(14);
  if (badmirhandling_ == &_default_badmirhandling_) {
    badmirhandling_ = new ::std::string;
  }
  badmirhandling_->assign(value);
}
inline void ForkDataTransfer::set_badmirhandling(const char* value, size_t size) {
  _set_bit(14);
  if (badmirhandling_ == &_default_badmirhandling_) {
    badmirhandling_ = new ::std::string;
  }
  badmirhandling_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkDataTransfer::mutable_badmirhandling() {
  _set_bit(14);
  if (badmirhandling_ == &_default_badmirhandling_) {
    badmirhandling_ = new ::std::string;
  }
  return badmirhandling_;
}

// required uint64 bulkrequestmigrationmaxbytes = 16;
inline bool ForkDataTransfer::has_bulkrequestmigrationmaxbytes() const {
  return _has_bit(15);
}
inline void ForkDataTransfer::clear_bulkrequestmigrationmaxbytes() {
  bulkrequestmigrationmaxbytes_ = GOOGLE_ULONGLONG(0);
  _clear_bit(15);
}
inline ::google::protobuf::uint64 ForkDataTransfer::bulkrequestmigrationmaxbytes() const {
  return bulkrequestmigrationmaxbytes_;
}
inline void ForkDataTransfer::set_bulkrequestmigrationmaxbytes(::google::protobuf::uint64 value) {
  _set_bit(15);
  bulkrequestmigrationmaxbytes_ = value;
}

// required uint64 bulkrequestmigrationmaxfiles = 17;
inline bool ForkDataTransfer::has_bulkrequestmigrationmaxfiles() const {
  return _has_bit(16);
}
inline void ForkDataTransfer::clear_bulkrequestmigrationmaxfiles() {
  bulkrequestmigrationmaxfiles_ = GOOGLE_ULONGLONG(0);
  _clear_bit(16);
}
inline ::google::protobuf::uint64 ForkDataTransfer::bulkrequestmigrationmaxfiles() const {
  return bulkrequestmigrationmaxfiles_;
}
inline void ForkDataTransfer::set_bulkrequestmigrationmaxfiles(::google::protobuf::uint64 value) {
  _set_bit(16);
  bulkrequestmigrationmaxfiles_ = value;
}

// required uint64 bulkrequestrecallmaxbytes = 18;
inline bool ForkDataTransfer::has_bulkrequestrecallmaxbytes() const {
  return _has_bit(17);
}
inline void ForkDataTransfer::clear_bulkrequestrecallmaxbytes() {
  bulkrequestrecallmaxbytes_ = GOOGLE_ULONGLONG(0);
  _clear_bit(17);
}
inline ::google::protobuf::uint64 ForkDataTransfer::bulkrequestrecallmaxbytes() const {
  return bulkrequestrecallmaxbytes_;
}
inline void ForkDataTransfer::set_bulkrequestrecallmaxbytes(::google::protobuf::uint64 value) {
  _set_bit(17);
  bulkrequestrecallmaxbytes_ = value;
}

// required uint64 bulkrequestrecallmaxfiles = 19;
inline bool ForkDataTransfer::has_bulkrequestrecallmaxfiles() const {
  return _has_bit(18);
}
inline void ForkDataTransfer::clear_bulkrequestrecallmaxfiles() {
  bulkrequestrecallmaxfiles_ = GOOGLE_ULONGLONG(0);
  _clear_bit(18);
}
inline ::google::protobuf::uint64 ForkDataTransfer::bulkrequestrecallmaxfiles() const {
  return bulkrequestrecallmaxfiles_;
}
inline void ForkDataTransfer::set_bulkrequestrecallmaxfiles(::google::protobuf::uint64 value) {
  _set_bit(18);
  bulkrequestrecallmaxfiles_ = value;
}

// required uint64 maxbytesbeforeflush = 20;
inline bool ForkDataTransfer::has_maxbytesbeforeflush() const {
  return _has_bit(19);
}
inline void ForkDataTransfer::clear_maxbytesbeforeflush() {
  maxbytesbeforeflush_ = GOOGLE_ULONGLONG(0);
  _clear_bit(19);
}
inline ::google::protobuf::uint64 ForkDataTransfer::maxbytesbeforeflush() const {
  return maxbytesbeforeflush_;
}
inline void ForkDataTransfer::set_maxbytesbeforeflush(::google::protobuf::uint64 value) {
  _set_bit(19);
  maxbytesbeforeflush_ = value;
}

// required uint64 maxfilesbeforeflush = 21;
inline bool ForkDataTransfer::has_maxfilesbeforeflush() const {
  return _has_bit(20);
}
inline void ForkDataTransfer::clear_maxfilesbeforeflush() {
  maxfilesbeforeflush_ = GOOGLE_ULONGLONG(0);
  _clear_bit(20);
}
inline ::google::protobuf::uint64 ForkDataTransfer::maxfilesbeforeflush() const {
  return maxfilesbeforeflush_;
}
inline void ForkDataTransfer::set_maxfilesbeforeflush(::google::protobuf::uint64 value) {
  _set_bit(20);
  maxfilesbeforeflush_ = value;
}

// required uint32 diskthreadpoolsize = 22;
inline bool ForkDataTransfer::has_diskthreadpoolsize() const {
  return _has_bit(21);
}
inline void ForkDataTransfer::clear_diskthreadpoolsize() {
  diskthreadpoolsize_ = 0u;
  _clear_bit(21);
}
inline ::google::protobuf::uint32 ForkDataTransfer::diskthreadpoolsize() const {
  return diskthreadpoolsize_;
}
inline void ForkDataTransfer::set_diskthreadpoolsize(::google::protobuf::uint32 value) {
  _set_bit(21);
  diskthreadpoolsize_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ForkDataTransfer_2eproto__INCLUDED
