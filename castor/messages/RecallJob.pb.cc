// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RecallJob.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* RecallJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallJob_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecallJob_ClientType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RecallJob_2eproto() {
  protobuf_AddDesc_RecallJob_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RecallJob.proto");
  GOOGLE_CHECK(file != NULL);
  RecallJob_descriptor_ = file->message_type(0);
  static const int RecallJob_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallJob, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallJob, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallJob, clienttype_),
  };
  RecallJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallJob_descriptor_,
      RecallJob::default_instance_,
      RecallJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallJob));
  RecallJob_ClientType_descriptor_ = RecallJob_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RecallJob_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallJob_descriptor_, &RecallJob::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RecallJob_2eproto() {
  delete RecallJob::default_instance_;
  delete RecallJob_reflection_;
}

void protobuf_AddDesc_RecallJob_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RecallJob.proto\022\017castor.messages\"\244\001\n\tR"
    "ecallJob\022\013\n\003vid\030\001 \002(\t\022\020\n\010unitname\030\002 \002(\t\022"
    "9\n\nclienttype\030\003 \002(\0162%.castor.messages.Re"
    "callJob.ClientType\"=\n\nClientType\022\027\n\023CLIE"
    "NT_TYPE_GATEWAY\020\001\022\026\n\022CLIENT_TYPE_READTP\020"
    "\002", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RecallJob.proto", &protobuf_RegisterTypes);
  RecallJob::default_instance_ = new RecallJob();
  RecallJob::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RecallJob_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RecallJob_2eproto {
  StaticDescriptorInitializer_RecallJob_2eproto() {
    protobuf_AddDesc_RecallJob_2eproto();
  }
} static_descriptor_initializer_RecallJob_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecallJob_ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallJob_ClientType_descriptor_;
}
bool RecallJob_ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecallJob_ClientType RecallJob::CLIENT_TYPE_GATEWAY;
const RecallJob_ClientType RecallJob::CLIENT_TYPE_READTP;
const RecallJob_ClientType RecallJob::ClientType_MIN;
const RecallJob_ClientType RecallJob::ClientType_MAX;
const int RecallJob::ClientType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string RecallJob::_default_vid_;
const ::std::string RecallJob::_default_unitname_;
#ifndef _MSC_VER
const int RecallJob::kVidFieldNumber;
const int RecallJob::kUnitnameFieldNumber;
const int RecallJob::kClienttypeFieldNumber;
#endif  // !_MSC_VER

RecallJob::RecallJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecallJob::InitAsDefaultInstance() {
}

RecallJob::RecallJob(const RecallJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecallJob::SharedCtor() {
  _cached_size_ = 0;
  vid_ = const_cast< ::std::string*>(&_default_vid_);
  unitname_ = const_cast< ::std::string*>(&_default_unitname_);
  clienttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallJob::~RecallJob() {
  SharedDtor();
}

void RecallJob::SharedDtor() {
  if (vid_ != &_default_vid_) {
    delete vid_;
  }
  if (unitname_ != &_default_unitname_) {
    delete unitname_;
  }
  if (this != default_instance_) {
  }
}

void RecallJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallJob_descriptor_;
}

const RecallJob& RecallJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecallJob_2eproto();  return *default_instance_;
}

RecallJob* RecallJob::default_instance_ = NULL;

RecallJob* RecallJob::New() const {
  return new RecallJob;
}

void RecallJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vid_ != &_default_vid_) {
        vid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (unitname_ != &_default_unitname_) {
        unitname_->clear();
      }
    }
    clienttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid().data(), this->vid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitname;
        break;
      }
      
      // required string unitname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clienttype;
        break;
      }
      
      // required .castor.messages.RecallJob.ClientType clienttype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clienttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castor::messages::RecallJob_ClientType_IsValid(value)) {
            set_clienttype(static_cast< ::castor::messages::RecallJob_ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecallJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vid(), output);
  }
  
  // required string unitname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitname(), output);
  }
  
  // required .castor.messages.RecallJob.ClientType clienttype = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->clienttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecallJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }
  
  // required string unitname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unitname(), target);
  }
  
  // required .castor.messages.RecallJob.ClientType clienttype = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->clienttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecallJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }
    
    // required string unitname = 2;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }
    
    // required .castor.messages.RecallJob.ClientType clienttype = 3;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clienttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallJob::MergeFrom(const RecallJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_unitname(from.unitname());
    }
    if (from._has_bit(2)) {
      set_clienttype(from.clienttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallJob::CopyFrom(const RecallJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallJob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RecallJob::Swap(RecallJob* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(unitname_, other->unitname_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallJob_descriptor_;
  metadata.reflection = RecallJob_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

// @@protoc_insertion_point(global_scope)
