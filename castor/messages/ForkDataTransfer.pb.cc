// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ForkDataTransfer.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* ForkDataTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForkDataTransfer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ForkDataTransfer_2eproto() {
  protobuf_AddDesc_ForkDataTransfer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ForkDataTransfer.proto");
  GOOGLE_CHECK(file != NULL);
  ForkDataTransfer_descriptor_ = file->message_type(0);
  static const int ForkDataTransfer_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, dgn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, devfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, libraryslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, mounttransactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, clientport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, clienteuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, clientegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, clienthost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, clientusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, memblocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, nbmemblocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, badmirhandling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, bulkrequestmigrationmaxbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, bulkrequestmigrationmaxfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, bulkrequestrecallmaxbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, bulkrequestrecallmaxfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, maxbytesbeforeflush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, maxfilesbeforeflush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, diskthreadpoolsize_),
  };
  ForkDataTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForkDataTransfer_descriptor_,
      ForkDataTransfer::default_instance_,
      ForkDataTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkDataTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForkDataTransfer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ForkDataTransfer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForkDataTransfer_descriptor_, &ForkDataTransfer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ForkDataTransfer_2eproto() {
  delete ForkDataTransfer::default_instance_;
  delete ForkDataTransfer_reflection_;
}

void protobuf_AddDesc_ForkDataTransfer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ForkDataTransfer.proto\022\017castor.message"
    "s\"\254\004\n\020ForkDataTransfer\022\020\n\010unitname\030\001 \002(\t"
    "\022\013\n\003dgn\030\002 \002(\t\022\023\n\013devfilename\030\003 \002(\t\022\017\n\007de"
    "nsity\030\004 \003(\t\022\023\n\013libraryslot\030\005 \002(\t\022\017\n\007devt"
    "ype\030\006 \002(\t\022\032\n\022mounttransactionid\030\007 \002(\r\022\022\n"
    "\nclientport\030\010 \002(\r\022\022\n\nclienteuid\030\t \002(\r\022\022\n"
    "\nclientegid\030\n \002(\r\022\022\n\nclienthost\030\013 \002(\t\022\026\n"
    "\016clientusername\030\014 \002(\t\022\024\n\014memblocksize\030\r "
    "\002(\r\022\023\n\013nbmemblocks\030\016 \002(\r\022\026\n\016badmirhandli"
    "ng\030\017 \002(\t\022$\n\034bulkrequestmigrationmaxbytes"
    "\030\020 \002(\004\022$\n\034bulkrequestmigrationmaxfiles\030\021"
    " \002(\004\022!\n\031bulkrequestrecallmaxbytes\030\022 \002(\004\022"
    "!\n\031bulkrequestrecallmaxfiles\030\023 \002(\004\022\033\n\023ma"
    "xbytesbeforeflush\030\024 \002(\004\022\033\n\023maxfilesbefor"
    "eflush\030\025 \002(\004\022\032\n\022diskthreadpoolsize\030\026 \002(\r", 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ForkDataTransfer.proto", &protobuf_RegisterTypes);
  ForkDataTransfer::default_instance_ = new ForkDataTransfer();
  ForkDataTransfer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ForkDataTransfer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ForkDataTransfer_2eproto {
  StaticDescriptorInitializer_ForkDataTransfer_2eproto() {
    protobuf_AddDesc_ForkDataTransfer_2eproto();
  }
} static_descriptor_initializer_ForkDataTransfer_2eproto_;


// ===================================================================

const ::std::string ForkDataTransfer::_default_unitname_;
const ::std::string ForkDataTransfer::_default_dgn_;
const ::std::string ForkDataTransfer::_default_devfilename_;
const ::std::string ForkDataTransfer::_default_libraryslot_;
const ::std::string ForkDataTransfer::_default_devtype_;
const ::std::string ForkDataTransfer::_default_clienthost_;
const ::std::string ForkDataTransfer::_default_clientusername_;
const ::std::string ForkDataTransfer::_default_badmirhandling_;
#ifndef _MSC_VER
const int ForkDataTransfer::kUnitnameFieldNumber;
const int ForkDataTransfer::kDgnFieldNumber;
const int ForkDataTransfer::kDevfilenameFieldNumber;
const int ForkDataTransfer::kDensityFieldNumber;
const int ForkDataTransfer::kLibraryslotFieldNumber;
const int ForkDataTransfer::kDevtypeFieldNumber;
const int ForkDataTransfer::kMounttransactionidFieldNumber;
const int ForkDataTransfer::kClientportFieldNumber;
const int ForkDataTransfer::kClienteuidFieldNumber;
const int ForkDataTransfer::kClientegidFieldNumber;
const int ForkDataTransfer::kClienthostFieldNumber;
const int ForkDataTransfer::kClientusernameFieldNumber;
const int ForkDataTransfer::kMemblocksizeFieldNumber;
const int ForkDataTransfer::kNbmemblocksFieldNumber;
const int ForkDataTransfer::kBadmirhandlingFieldNumber;
const int ForkDataTransfer::kBulkrequestmigrationmaxbytesFieldNumber;
const int ForkDataTransfer::kBulkrequestmigrationmaxfilesFieldNumber;
const int ForkDataTransfer::kBulkrequestrecallmaxbytesFieldNumber;
const int ForkDataTransfer::kBulkrequestrecallmaxfilesFieldNumber;
const int ForkDataTransfer::kMaxbytesbeforeflushFieldNumber;
const int ForkDataTransfer::kMaxfilesbeforeflushFieldNumber;
const int ForkDataTransfer::kDiskthreadpoolsizeFieldNumber;
#endif  // !_MSC_VER

ForkDataTransfer::ForkDataTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForkDataTransfer::InitAsDefaultInstance() {
}

ForkDataTransfer::ForkDataTransfer(const ForkDataTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForkDataTransfer::SharedCtor() {
  _cached_size_ = 0;
  unitname_ = const_cast< ::std::string*>(&_default_unitname_);
  dgn_ = const_cast< ::std::string*>(&_default_dgn_);
  devfilename_ = const_cast< ::std::string*>(&_default_devfilename_);
  libraryslot_ = const_cast< ::std::string*>(&_default_libraryslot_);
  devtype_ = const_cast< ::std::string*>(&_default_devtype_);
  mounttransactionid_ = 0u;
  clientport_ = 0u;
  clienteuid_ = 0u;
  clientegid_ = 0u;
  clienthost_ = const_cast< ::std::string*>(&_default_clienthost_);
  clientusername_ = const_cast< ::std::string*>(&_default_clientusername_);
  memblocksize_ = 0u;
  nbmemblocks_ = 0u;
  badmirhandling_ = const_cast< ::std::string*>(&_default_badmirhandling_);
  bulkrequestmigrationmaxbytes_ = GOOGLE_ULONGLONG(0);
  bulkrequestmigrationmaxfiles_ = GOOGLE_ULONGLONG(0);
  bulkrequestrecallmaxbytes_ = GOOGLE_ULONGLONG(0);
  bulkrequestrecallmaxfiles_ = GOOGLE_ULONGLONG(0);
  maxbytesbeforeflush_ = GOOGLE_ULONGLONG(0);
  maxfilesbeforeflush_ = GOOGLE_ULONGLONG(0);
  diskthreadpoolsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForkDataTransfer::~ForkDataTransfer() {
  SharedDtor();
}

void ForkDataTransfer::SharedDtor() {
  if (unitname_ != &_default_unitname_) {
    delete unitname_;
  }
  if (dgn_ != &_default_dgn_) {
    delete dgn_;
  }
  if (devfilename_ != &_default_devfilename_) {
    delete devfilename_;
  }
  if (libraryslot_ != &_default_libraryslot_) {
    delete libraryslot_;
  }
  if (devtype_ != &_default_devtype_) {
    delete devtype_;
  }
  if (clienthost_ != &_default_clienthost_) {
    delete clienthost_;
  }
  if (clientusername_ != &_default_clientusername_) {
    delete clientusername_;
  }
  if (badmirhandling_ != &_default_badmirhandling_) {
    delete badmirhandling_;
  }
  if (this != default_instance_) {
  }
}

void ForkDataTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForkDataTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForkDataTransfer_descriptor_;
}

const ForkDataTransfer& ForkDataTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ForkDataTransfer_2eproto();  return *default_instance_;
}

ForkDataTransfer* ForkDataTransfer::default_instance_ = NULL;

ForkDataTransfer* ForkDataTransfer::New() const {
  return new ForkDataTransfer;
}

void ForkDataTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (unitname_ != &_default_unitname_) {
        unitname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (dgn_ != &_default_dgn_) {
        dgn_->clear();
      }
    }
    if (_has_bit(2)) {
      if (devfilename_ != &_default_devfilename_) {
        devfilename_->clear();
      }
    }
    if (_has_bit(4)) {
      if (libraryslot_ != &_default_libraryslot_) {
        libraryslot_->clear();
      }
    }
    if (_has_bit(5)) {
      if (devtype_ != &_default_devtype_) {
        devtype_->clear();
      }
    }
    mounttransactionid_ = 0u;
    clientport_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clienteuid_ = 0u;
    clientegid_ = 0u;
    if (_has_bit(10)) {
      if (clienthost_ != &_default_clienthost_) {
        clienthost_->clear();
      }
    }
    if (_has_bit(11)) {
      if (clientusername_ != &_default_clientusername_) {
        clientusername_->clear();
      }
    }
    memblocksize_ = 0u;
    nbmemblocks_ = 0u;
    if (_has_bit(14)) {
      if (badmirhandling_ != &_default_badmirhandling_) {
        badmirhandling_->clear();
      }
    }
    bulkrequestmigrationmaxbytes_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bulkrequestmigrationmaxfiles_ = GOOGLE_ULONGLONG(0);
    bulkrequestrecallmaxbytes_ = GOOGLE_ULONGLONG(0);
    bulkrequestrecallmaxfiles_ = GOOGLE_ULONGLONG(0);
    maxbytesbeforeflush_ = GOOGLE_ULONGLONG(0);
    maxfilesbeforeflush_ = GOOGLE_ULONGLONG(0);
    diskthreadpoolsize_ = 0u;
  }
  density_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForkDataTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string unitname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dgn;
        break;
      }
      
      // required string dgn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dgn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dgn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dgn().data(), this->dgn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devfilename;
        break;
      }
      
      // required string devfilename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devfilename().data(), this->devfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_density;
        break;
      }
      
      // repeated string density = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_density:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_density()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->density(0).data(), this->density(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_density;
        if (input->ExpectTag(42)) goto parse_libraryslot;
        break;
      }
      
      // required string libraryslot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_libraryslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_libraryslot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->libraryslot().data(), this->libraryslot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_devtype;
        break;
      }
      
      // required string devtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devtype().data(), this->devtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mounttransactionid;
        break;
      }
      
      // required uint32 mounttransactionid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mounttransactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttransactionid_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_clientport;
        break;
      }
      
      // required uint32 clientport = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientport_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clienteuid;
        break;
      }
      
      // required uint32 clienteuid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clienteuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clienteuid_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_clientegid;
        break;
      }
      
      // required uint32 clientegid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientegid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientegid_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_clienthost;
        break;
      }
      
      // required string clienthost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clienthost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clienthost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clienthost().data(), this->clienthost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_clientusername;
        break;
      }
      
      // required string clientusername = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientusername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientusername().data(), this->clientusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_memblocksize;
        break;
      }
      
      // required uint32 memblocksize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memblocksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memblocksize_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nbmemblocks;
        break;
      }
      
      // required uint32 nbmemblocks = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nbmemblocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbmemblocks_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_badmirhandling;
        break;
      }
      
      // required string badmirhandling = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_badmirhandling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_badmirhandling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->badmirhandling().data(), this->badmirhandling().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bulkrequestmigrationmaxbytes;
        break;
      }
      
      // required uint64 bulkrequestmigrationmaxbytes = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulkrequestmigrationmaxbytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bulkrequestmigrationmaxbytes_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bulkrequestmigrationmaxfiles;
        break;
      }
      
      // required uint64 bulkrequestmigrationmaxfiles = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulkrequestmigrationmaxfiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bulkrequestmigrationmaxfiles_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bulkrequestrecallmaxbytes;
        break;
      }
      
      // required uint64 bulkrequestrecallmaxbytes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulkrequestrecallmaxbytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bulkrequestrecallmaxbytes_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bulkrequestrecallmaxfiles;
        break;
      }
      
      // required uint64 bulkrequestrecallmaxfiles = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulkrequestrecallmaxfiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bulkrequestrecallmaxfiles_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_maxbytesbeforeflush;
        break;
      }
      
      // required uint64 maxbytesbeforeflush = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxbytesbeforeflush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxbytesbeforeflush_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_maxfilesbeforeflush;
        break;
      }
      
      // required uint64 maxfilesbeforeflush = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfilesbeforeflush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfilesbeforeflush_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_diskthreadpoolsize;
        break;
      }
      
      // required uint32 diskthreadpoolsize = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diskthreadpoolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diskthreadpoolsize_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForkDataTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string unitname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unitname(), output);
  }
  
  // required string dgn = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dgn().data(), this->dgn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dgn(), output);
  }
  
  // required string devfilename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devfilename().data(), this->devfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devfilename(), output);
  }
  
  // repeated string density = 4;
  for (int i = 0; i < this->density_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->density(i).data(), this->density(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->density(i), output);
  }
  
  // required string libraryslot = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->libraryslot().data(), this->libraryslot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->libraryslot(), output);
  }
  
  // required string devtype = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devtype().data(), this->devtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->devtype(), output);
  }
  
  // required uint32 mounttransactionid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mounttransactionid(), output);
  }
  
  // required uint32 clientport = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->clientport(), output);
  }
  
  // required uint32 clienteuid = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clienteuid(), output);
  }
  
  // required uint32 clientegid = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->clientegid(), output);
  }
  
  // required string clienthost = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clienthost().data(), this->clienthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->clienthost(), output);
  }
  
  // required string clientusername = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientusername().data(), this->clientusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->clientusername(), output);
  }
  
  // required uint32 memblocksize = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->memblocksize(), output);
  }
  
  // required uint32 nbmemblocks = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nbmemblocks(), output);
  }
  
  // required string badmirhandling = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->badmirhandling().data(), this->badmirhandling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->badmirhandling(), output);
  }
  
  // required uint64 bulkrequestmigrationmaxbytes = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->bulkrequestmigrationmaxbytes(), output);
  }
  
  // required uint64 bulkrequestmigrationmaxfiles = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->bulkrequestmigrationmaxfiles(), output);
  }
  
  // required uint64 bulkrequestrecallmaxbytes = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->bulkrequestrecallmaxbytes(), output);
  }
  
  // required uint64 bulkrequestrecallmaxfiles = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->bulkrequestrecallmaxfiles(), output);
  }
  
  // required uint64 maxbytesbeforeflush = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->maxbytesbeforeflush(), output);
  }
  
  // required uint64 maxfilesbeforeflush = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->maxfilesbeforeflush(), output);
  }
  
  // required uint32 diskthreadpoolsize = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->diskthreadpoolsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForkDataTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string unitname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unitname(), target);
  }
  
  // required string dgn = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dgn().data(), this->dgn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dgn(), target);
  }
  
  // required string devfilename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devfilename().data(), this->devfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devfilename(), target);
  }
  
  // repeated string density = 4;
  for (int i = 0; i < this->density_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->density(i).data(), this->density(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->density(i), target);
  }
  
  // required string libraryslot = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->libraryslot().data(), this->libraryslot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->libraryslot(), target);
  }
  
  // required string devtype = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devtype().data(), this->devtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->devtype(), target);
  }
  
  // required uint32 mounttransactionid = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mounttransactionid(), target);
  }
  
  // required uint32 clientport = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->clientport(), target);
  }
  
  // required uint32 clienteuid = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clienteuid(), target);
  }
  
  // required uint32 clientegid = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->clientegid(), target);
  }
  
  // required string clienthost = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clienthost().data(), this->clienthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clienthost(), target);
  }
  
  // required string clientusername = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientusername().data(), this->clientusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->clientusername(), target);
  }
  
  // required uint32 memblocksize = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->memblocksize(), target);
  }
  
  // required uint32 nbmemblocks = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nbmemblocks(), target);
  }
  
  // required string badmirhandling = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->badmirhandling().data(), this->badmirhandling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->badmirhandling(), target);
  }
  
  // required uint64 bulkrequestmigrationmaxbytes = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->bulkrequestmigrationmaxbytes(), target);
  }
  
  // required uint64 bulkrequestmigrationmaxfiles = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->bulkrequestmigrationmaxfiles(), target);
  }
  
  // required uint64 bulkrequestrecallmaxbytes = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->bulkrequestrecallmaxbytes(), target);
  }
  
  // required uint64 bulkrequestrecallmaxfiles = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->bulkrequestrecallmaxfiles(), target);
  }
  
  // required uint64 maxbytesbeforeflush = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->maxbytesbeforeflush(), target);
  }
  
  // required uint64 maxfilesbeforeflush = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->maxfilesbeforeflush(), target);
  }
  
  // required uint32 diskthreadpoolsize = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->diskthreadpoolsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForkDataTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string unitname = 1;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }
    
    // required string dgn = 2;
    if (has_dgn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dgn());
    }
    
    // required string devfilename = 3;
    if (has_devfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devfilename());
    }
    
    // required string libraryslot = 5;
    if (has_libraryslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->libraryslot());
    }
    
    // required string devtype = 6;
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devtype());
    }
    
    // required uint32 mounttransactionid = 7;
    if (has_mounttransactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttransactionid());
    }
    
    // required uint32 clientport = 8;
    if (has_clientport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientport());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 clienteuid = 9;
    if (has_clienteuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clienteuid());
    }
    
    // required uint32 clientegid = 10;
    if (has_clientegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientegid());
    }
    
    // required string clienthost = 11;
    if (has_clienthost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clienthost());
    }
    
    // required string clientusername = 12;
    if (has_clientusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientusername());
    }
    
    // required uint32 memblocksize = 13;
    if (has_memblocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memblocksize());
    }
    
    // required uint32 nbmemblocks = 14;
    if (has_nbmemblocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nbmemblocks());
    }
    
    // required string badmirhandling = 15;
    if (has_badmirhandling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->badmirhandling());
    }
    
    // required uint64 bulkrequestmigrationmaxbytes = 16;
    if (has_bulkrequestmigrationmaxbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bulkrequestmigrationmaxbytes());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 bulkrequestmigrationmaxfiles = 17;
    if (has_bulkrequestmigrationmaxfiles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bulkrequestmigrationmaxfiles());
    }
    
    // required uint64 bulkrequestrecallmaxbytes = 18;
    if (has_bulkrequestrecallmaxbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bulkrequestrecallmaxbytes());
    }
    
    // required uint64 bulkrequestrecallmaxfiles = 19;
    if (has_bulkrequestrecallmaxfiles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bulkrequestrecallmaxfiles());
    }
    
    // required uint64 maxbytesbeforeflush = 20;
    if (has_maxbytesbeforeflush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxbytesbeforeflush());
    }
    
    // required uint64 maxfilesbeforeflush = 21;
    if (has_maxfilesbeforeflush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfilesbeforeflush());
    }
    
    // required uint32 diskthreadpoolsize = 22;
    if (has_diskthreadpoolsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diskthreadpoolsize());
    }
    
  }
  // repeated string density = 4;
  total_size += 1 * this->density_size();
  for (int i = 0; i < this->density_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->density(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForkDataTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForkDataTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForkDataTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForkDataTransfer::MergeFrom(const ForkDataTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  density_.MergeFrom(from.density_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_unitname(from.unitname());
    }
    if (from._has_bit(1)) {
      set_dgn(from.dgn());
    }
    if (from._has_bit(2)) {
      set_devfilename(from.devfilename());
    }
    if (from._has_bit(4)) {
      set_libraryslot(from.libraryslot());
    }
    if (from._has_bit(5)) {
      set_devtype(from.devtype());
    }
    if (from._has_bit(6)) {
      set_mounttransactionid(from.mounttransactionid());
    }
    if (from._has_bit(7)) {
      set_clientport(from.clientport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_clienteuid(from.clienteuid());
    }
    if (from._has_bit(9)) {
      set_clientegid(from.clientegid());
    }
    if (from._has_bit(10)) {
      set_clienthost(from.clienthost());
    }
    if (from._has_bit(11)) {
      set_clientusername(from.clientusername());
    }
    if (from._has_bit(12)) {
      set_memblocksize(from.memblocksize());
    }
    if (from._has_bit(13)) {
      set_nbmemblocks(from.nbmemblocks());
    }
    if (from._has_bit(14)) {
      set_badmirhandling(from.badmirhandling());
    }
    if (from._has_bit(15)) {
      set_bulkrequestmigrationmaxbytes(from.bulkrequestmigrationmaxbytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_bulkrequestmigrationmaxfiles(from.bulkrequestmigrationmaxfiles());
    }
    if (from._has_bit(17)) {
      set_bulkrequestrecallmaxbytes(from.bulkrequestrecallmaxbytes());
    }
    if (from._has_bit(18)) {
      set_bulkrequestrecallmaxfiles(from.bulkrequestrecallmaxfiles());
    }
    if (from._has_bit(19)) {
      set_maxbytesbeforeflush(from.maxbytesbeforeflush());
    }
    if (from._has_bit(20)) {
      set_maxfilesbeforeflush(from.maxfilesbeforeflush());
    }
    if (from._has_bit(21)) {
      set_diskthreadpoolsize(from.diskthreadpoolsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForkDataTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForkDataTransfer::CopyFrom(const ForkDataTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkDataTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x003ffff7) != 0x003ffff7) return false;
  
  return true;
}

void ForkDataTransfer::Swap(ForkDataTransfer* other) {
  if (other != this) {
    std::swap(unitname_, other->unitname_);
    std::swap(dgn_, other->dgn_);
    std::swap(devfilename_, other->devfilename_);
    density_.Swap(&other->density_);
    std::swap(libraryslot_, other->libraryslot_);
    std::swap(devtype_, other->devtype_);
    std::swap(mounttransactionid_, other->mounttransactionid_);
    std::swap(clientport_, other->clientport_);
    std::swap(clienteuid_, other->clienteuid_);
    std::swap(clientegid_, other->clientegid_);
    std::swap(clienthost_, other->clienthost_);
    std::swap(clientusername_, other->clientusername_);
    std::swap(memblocksize_, other->memblocksize_);
    std::swap(nbmemblocks_, other->nbmemblocks_);
    std::swap(badmirhandling_, other->badmirhandling_);
    std::swap(bulkrequestmigrationmaxbytes_, other->bulkrequestmigrationmaxbytes_);
    std::swap(bulkrequestmigrationmaxfiles_, other->bulkrequestmigrationmaxfiles_);
    std::swap(bulkrequestrecallmaxbytes_, other->bulkrequestrecallmaxbytes_);
    std::swap(bulkrequestrecallmaxfiles_, other->bulkrequestrecallmaxfiles_);
    std::swap(maxbytesbeforeflush_, other->maxbytesbeforeflush_);
    std::swap(maxfilesbeforeflush_, other->maxfilesbeforeflush_);
    std::swap(diskthreadpoolsize_, other->diskthreadpoolsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForkDataTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForkDataTransfer_descriptor_;
  metadata.reflection = ForkDataTransfer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

// @@protoc_insertion_point(global_scope)
