// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NotifyDrive.proto

#ifndef PROTOBUF_NotifyDrive_2eproto__INCLUDED
#define PROTOBUF_NotifyDrive_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NotifyDrive_2eproto();
void protobuf_AssignDesc_NotifyDrive_2eproto();
void protobuf_ShutdownFile_NotifyDrive_2eproto();

class NotifyDriveBeforeMountStarted;
class NotifyDriveTapeMounted;
class NotifyDriveUnmountStarted;
class NotifyDriveTapeUnmounted;
class NotifyDriveBeforeMountStartedAnswer;

enum NotifyDriveBeforeMountStarted_TapeClientType {
  NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_NONE = 1,
  NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_GATEWAY = 2,
  NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_READTP = 3,
  NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_WRITETP = 4,
  NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_DUMPTP = 5
};
bool NotifyDriveBeforeMountStarted_TapeClientType_IsValid(int value);
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_MIN = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_NONE;
const NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_MAX = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_DUMPTP;
const int NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_ARRAYSIZE = NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyDriveBeforeMountStarted_TapeClientType_descriptor();
inline const ::std::string& NotifyDriveBeforeMountStarted_TapeClientType_Name(NotifyDriveBeforeMountStarted_TapeClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyDriveBeforeMountStarted_TapeClientType_descriptor(), value);
}
inline bool NotifyDriveBeforeMountStarted_TapeClientType_Parse(
    const ::std::string& name, NotifyDriveBeforeMountStarted_TapeClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyDriveBeforeMountStarted_TapeClientType>(
    NotifyDriveBeforeMountStarted_TapeClientType_descriptor(), name, value);
}
enum TapeMode {
  TAPE_MODE_NONE = 1,
  TAPE_MODE_READ = 2,
  TAPE_MODE_READWRITE = 3,
  TAPE_MODE_DUMP = 4
};
bool TapeMode_IsValid(int value);
const TapeMode TapeMode_MIN = TAPE_MODE_NONE;
const TapeMode TapeMode_MAX = TAPE_MODE_DUMP;
const int TapeMode_ARRAYSIZE = TapeMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TapeMode_descriptor();
inline const ::std::string& TapeMode_Name(TapeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TapeMode_descriptor(), value);
}
inline bool TapeMode_Parse(
    const ::std::string& name, TapeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TapeMode>(
    TapeMode_descriptor(), name, value);
}
// ===================================================================

class NotifyDriveBeforeMountStarted : public ::google::protobuf::Message {
 public:
  NotifyDriveBeforeMountStarted();
  virtual ~NotifyDriveBeforeMountStarted();
  
  NotifyDriveBeforeMountStarted(const NotifyDriveBeforeMountStarted& from);
  
  inline NotifyDriveBeforeMountStarted& operator=(const NotifyDriveBeforeMountStarted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDriveBeforeMountStarted& default_instance();
  
  void Swap(NotifyDriveBeforeMountStarted* other);
  
  // implements Message ----------------------------------------------
  
  NotifyDriveBeforeMountStarted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDriveBeforeMountStarted& from);
  void MergeFrom(const NotifyDriveBeforeMountStarted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NotifyDriveBeforeMountStarted_TapeClientType TapeClientType;
  static const TapeClientType CLIENT_TYPE_NONE = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_NONE;
  static const TapeClientType CLIENT_TYPE_GATEWAY = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_GATEWAY;
  static const TapeClientType CLIENT_TYPE_READTP = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_READTP;
  static const TapeClientType CLIENT_TYPE_WRITETP = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_WRITETP;
  static const TapeClientType CLIENT_TYPE_DUMPTP = NotifyDriveBeforeMountStarted_TapeClientType_CLIENT_TYPE_DUMPTP;
  static inline bool TapeClientType_IsValid(int value) {
    return NotifyDriveBeforeMountStarted_TapeClientType_IsValid(value);
  }
  static const TapeClientType TapeClientType_MIN =
    NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_MIN;
  static const TapeClientType TapeClientType_MAX =
    NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_MAX;
  static const int TapeClientType_ARRAYSIZE =
    NotifyDriveBeforeMountStarted_TapeClientType_TapeClientType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TapeClientType_descriptor() {
    return NotifyDriveBeforeMountStarted_TapeClientType_descriptor();
  }
  static inline const ::std::string& TapeClientType_Name(TapeClientType value) {
    return NotifyDriveBeforeMountStarted_TapeClientType_Name(value);
  }
  static inline bool TapeClientType_Parse(const ::std::string& name,
      TapeClientType* value) {
    return NotifyDriveBeforeMountStarted_TapeClientType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline const ::std::string& vid() const;
  inline void set_vid(const ::std::string& value);
  inline void set_vid(const char* value);
  inline void set_vid(const char* value, size_t size);
  inline ::std::string* mutable_vid();
  
  // required string unitName = 2;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 2;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  
  // required .castor.messages.TapeMode mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline castor::messages::TapeMode mode() const;
  inline void set_mode(castor::messages::TapeMode value);
  
  // required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
  inline bool has_clienttype() const;
  inline void clear_clienttype();
  static const int kClientTypeFieldNumber = 4;
  inline ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType clienttype() const;
  inline void set_clienttype(::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.NotifyDriveBeforeMountStarted)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* vid_;
  static const ::std::string _default_vid_;
  ::std::string* unitname_;
  static const ::std::string _default_unitname_;
  int mode_;
  int clienttype_;
  friend void  protobuf_AddDesc_NotifyDrive_2eproto();
  friend void protobuf_AssignDesc_NotifyDrive_2eproto();
  friend void protobuf_ShutdownFile_NotifyDrive_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NotifyDriveBeforeMountStarted* default_instance_;
};
// -------------------------------------------------------------------

class NotifyDriveTapeMounted : public ::google::protobuf::Message {
 public:
  NotifyDriveTapeMounted();
  virtual ~NotifyDriveTapeMounted();
  
  NotifyDriveTapeMounted(const NotifyDriveTapeMounted& from);
  
  inline NotifyDriveTapeMounted& operator=(const NotifyDriveTapeMounted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDriveTapeMounted& default_instance();
  
  void Swap(NotifyDriveTapeMounted* other);
  
  // implements Message ----------------------------------------------
  
  NotifyDriveTapeMounted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDriveTapeMounted& from);
  void MergeFrom(const NotifyDriveTapeMounted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline const ::std::string& vid() const;
  inline void set_vid(const ::std::string& value);
  inline void set_vid(const char* value);
  inline void set_vid(const char* value, size_t size);
  inline ::std::string* mutable_vid();
  
  // required string unitName = 2;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 2;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  
  // required .castor.messages.TapeMode mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline castor::messages::TapeMode mode() const;
  inline void set_mode(castor::messages::TapeMode value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.NotifyDriveTapeMounted)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* vid_;
  static const ::std::string _default_vid_;
  ::std::string* unitname_;
  static const ::std::string _default_unitname_;
  int mode_;
  friend void  protobuf_AddDesc_NotifyDrive_2eproto();
  friend void protobuf_AssignDesc_NotifyDrive_2eproto();
  friend void protobuf_ShutdownFile_NotifyDrive_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NotifyDriveTapeMounted* default_instance_;
};
// -------------------------------------------------------------------

class NotifyDriveUnmountStarted : public ::google::protobuf::Message {
 public:
  NotifyDriveUnmountStarted();
  virtual ~NotifyDriveUnmountStarted();
  
  NotifyDriveUnmountStarted(const NotifyDriveUnmountStarted& from);
  
  inline NotifyDriveUnmountStarted& operator=(const NotifyDriveUnmountStarted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDriveUnmountStarted& default_instance();
  
  void Swap(NotifyDriveUnmountStarted* other);
  
  // implements Message ----------------------------------------------
  
  NotifyDriveUnmountStarted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDriveUnmountStarted& from);
  void MergeFrom(const NotifyDriveUnmountStarted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:castor.messages.NotifyDriveUnmountStarted)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_NotifyDrive_2eproto();
  friend void protobuf_AssignDesc_NotifyDrive_2eproto();
  friend void protobuf_ShutdownFile_NotifyDrive_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NotifyDriveUnmountStarted* default_instance_;
};
// -------------------------------------------------------------------

class NotifyDriveTapeUnmounted : public ::google::protobuf::Message {
 public:
  NotifyDriveTapeUnmounted();
  virtual ~NotifyDriveTapeUnmounted();
  
  NotifyDriveTapeUnmounted(const NotifyDriveTapeUnmounted& from);
  
  inline NotifyDriveTapeUnmounted& operator=(const NotifyDriveTapeUnmounted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDriveTapeUnmounted& default_instance();
  
  void Swap(NotifyDriveTapeUnmounted* other);
  
  // implements Message ----------------------------------------------
  
  NotifyDriveTapeUnmounted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDriveTapeUnmounted& from);
  void MergeFrom(const NotifyDriveTapeUnmounted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:castor.messages.NotifyDriveTapeUnmounted)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_NotifyDrive_2eproto();
  friend void protobuf_AssignDesc_NotifyDrive_2eproto();
  friend void protobuf_ShutdownFile_NotifyDrive_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NotifyDriveTapeUnmounted* default_instance_;
};
// -------------------------------------------------------------------

class NotifyDriveBeforeMountStartedAnswer : public ::google::protobuf::Message {
 public:
  NotifyDriveBeforeMountStartedAnswer();
  virtual ~NotifyDriveBeforeMountStartedAnswer();
  
  NotifyDriveBeforeMountStartedAnswer(const NotifyDriveBeforeMountStartedAnswer& from);
  
  inline NotifyDriveBeforeMountStartedAnswer& operator=(const NotifyDriveBeforeMountStartedAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyDriveBeforeMountStartedAnswer& default_instance();
  
  void Swap(NotifyDriveBeforeMountStartedAnswer* other);
  
  // implements Message ----------------------------------------------
  
  NotifyDriveBeforeMountStartedAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyDriveBeforeMountStartedAnswer& from);
  void MergeFrom(const NotifyDriveBeforeMountStartedAnswer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 howManyFilesOnTape = 1;
  inline bool has_howmanyfilesontape() const;
  inline void clear_howmanyfilesontape();
  static const int kHowManyFilesOnTapeFieldNumber = 1;
  inline ::google::protobuf::uint32 howmanyfilesontape() const;
  inline void set_howmanyfilesontape(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.NotifyDriveBeforeMountStartedAnswer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 howmanyfilesontape_;
  friend void  protobuf_AddDesc_NotifyDrive_2eproto();
  friend void protobuf_AssignDesc_NotifyDrive_2eproto();
  friend void protobuf_ShutdownFile_NotifyDrive_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NotifyDriveBeforeMountStartedAnswer* default_instance_;
};
// ===================================================================


// ===================================================================

// NotifyDriveBeforeMountStarted

// required string vid = 1;
inline bool NotifyDriveBeforeMountStarted::has_vid() const {
  return _has_bit(0);
}
inline void NotifyDriveBeforeMountStarted::clear_vid() {
  if (vid_ != &_default_vid_) {
    vid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NotifyDriveBeforeMountStarted::vid() const {
  return *vid_;
}
inline void NotifyDriveBeforeMountStarted::set_vid(const ::std::string& value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void NotifyDriveBeforeMountStarted::set_vid(const char* value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void NotifyDriveBeforeMountStarted::set_vid(const char* value, size_t size) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyDriveBeforeMountStarted::mutable_vid() {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  return vid_;
}

// required string unitName = 2;
inline bool NotifyDriveBeforeMountStarted::has_unitname() const {
  return _has_bit(1);
}
inline void NotifyDriveBeforeMountStarted::clear_unitname() {
  if (unitname_ != &_default_unitname_) {
    unitname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NotifyDriveBeforeMountStarted::unitname() const {
  return *unitname_;
}
inline void NotifyDriveBeforeMountStarted::set_unitname(const ::std::string& value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void NotifyDriveBeforeMountStarted::set_unitname(const char* value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void NotifyDriveBeforeMountStarted::set_unitname(const char* value, size_t size) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyDriveBeforeMountStarted::mutable_unitname() {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}

// required .castor.messages.TapeMode mode = 3;
inline bool NotifyDriveBeforeMountStarted::has_mode() const {
  return _has_bit(2);
}
inline void NotifyDriveBeforeMountStarted::clear_mode() {
  mode_ = 1;
  _clear_bit(2);
}
inline castor::messages::TapeMode NotifyDriveBeforeMountStarted::mode() const {
  return static_cast< castor::messages::TapeMode >(mode_);
}
inline void NotifyDriveBeforeMountStarted::set_mode(castor::messages::TapeMode value) {
  GOOGLE_DCHECK(castor::messages::TapeMode_IsValid(value));
  _set_bit(2);
  mode_ = value;
}

// required .castor.messages.NotifyDriveBeforeMountStarted.TapeClientType clientType = 4;
inline bool NotifyDriveBeforeMountStarted::has_clienttype() const {
  return _has_bit(3);
}
inline void NotifyDriveBeforeMountStarted::clear_clienttype() {
  clienttype_ = 1;
  _clear_bit(3);
}
inline ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType NotifyDriveBeforeMountStarted::clienttype() const {
  return static_cast< ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType >(clienttype_);
}
inline void NotifyDriveBeforeMountStarted::set_clienttype(::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType value) {
  GOOGLE_DCHECK(::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType_IsValid(value));
  _set_bit(3);
  clienttype_ = value;
}

// -------------------------------------------------------------------

// NotifyDriveTapeMounted

// required string vid = 1;
inline bool NotifyDriveTapeMounted::has_vid() const {
  return _has_bit(0);
}
inline void NotifyDriveTapeMounted::clear_vid() {
  if (vid_ != &_default_vid_) {
    vid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NotifyDriveTapeMounted::vid() const {
  return *vid_;
}
inline void NotifyDriveTapeMounted::set_vid(const ::std::string& value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void NotifyDriveTapeMounted::set_vid(const char* value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void NotifyDriveTapeMounted::set_vid(const char* value, size_t size) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyDriveTapeMounted::mutable_vid() {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  return vid_;
}

// required string unitName = 2;
inline bool NotifyDriveTapeMounted::has_unitname() const {
  return _has_bit(1);
}
inline void NotifyDriveTapeMounted::clear_unitname() {
  if (unitname_ != &_default_unitname_) {
    unitname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NotifyDriveTapeMounted::unitname() const {
  return *unitname_;
}
inline void NotifyDriveTapeMounted::set_unitname(const ::std::string& value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void NotifyDriveTapeMounted::set_unitname(const char* value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void NotifyDriveTapeMounted::set_unitname(const char* value, size_t size) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyDriveTapeMounted::mutable_unitname() {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}

// required .castor.messages.TapeMode mode = 3;
inline bool NotifyDriveTapeMounted::has_mode() const {
  return _has_bit(2);
}
inline void NotifyDriveTapeMounted::clear_mode() {
  mode_ = 1;
  _clear_bit(2);
}
inline castor::messages::TapeMode NotifyDriveTapeMounted::mode() const {
  return static_cast< castor::messages::TapeMode >(mode_);
}
inline void NotifyDriveTapeMounted::set_mode(castor::messages::TapeMode value) {
  GOOGLE_DCHECK(castor::messages::TapeMode_IsValid(value));
  _set_bit(2);
  mode_ = value;
}

// -------------------------------------------------------------------

// NotifyDriveUnmountStarted

// -------------------------------------------------------------------

// NotifyDriveTapeUnmounted

// -------------------------------------------------------------------

// NotifyDriveBeforeMountStartedAnswer

// required uint32 howManyFilesOnTape = 1;
inline bool NotifyDriveBeforeMountStartedAnswer::has_howmanyfilesontape() const {
  return _has_bit(0);
}
inline void NotifyDriveBeforeMountStartedAnswer::clear_howmanyfilesontape() {
  howmanyfilesontape_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 NotifyDriveBeforeMountStartedAnswer::howmanyfilesontape() const {
  return howmanyfilesontape_;
}
inline void NotifyDriveBeforeMountStartedAnswer::set_howmanyfilesontape(::google::protobuf::uint32 value) {
  _set_bit(0);
  howmanyfilesontape_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType>() {
  return ::castor::messages::NotifyDriveBeforeMountStarted_TapeClientType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< castor::messages::TapeMode>() {
  return castor::messages::TapeMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NotifyDrive_2eproto__INCLUDED
