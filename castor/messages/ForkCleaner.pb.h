// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForkCleaner.proto

#ifndef PROTOBUF_ForkCleaner_2eproto__INCLUDED
#define PROTOBUF_ForkCleaner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ForkCleaner_2eproto();
void protobuf_AssignDesc_ForkCleaner_2eproto();
void protobuf_ShutdownFile_ForkCleaner_2eproto();

class ForkCleaner;

// ===================================================================

class ForkCleaner : public ::google::protobuf::Message {
 public:
  ForkCleaner();
  virtual ~ForkCleaner();
  
  ForkCleaner(const ForkCleaner& from);
  
  inline ForkCleaner& operator=(const ForkCleaner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForkCleaner& default_instance();
  
  void Swap(ForkCleaner* other);
  
  // implements Message ----------------------------------------------
  
  ForkCleaner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForkCleaner& from);
  void MergeFrom(const ForkCleaner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string unitname = 1;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitnameFieldNumber = 1;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  
  // required string dgn = 2;
  inline bool has_dgn() const;
  inline void clear_dgn();
  static const int kDgnFieldNumber = 2;
  inline const ::std::string& dgn() const;
  inline void set_dgn(const ::std::string& value);
  inline void set_dgn(const char* value);
  inline void set_dgn(const char* value, size_t size);
  inline ::std::string* mutable_dgn();
  
  // required string devfilename = 3;
  inline bool has_devfilename() const;
  inline void clear_devfilename();
  static const int kDevfilenameFieldNumber = 3;
  inline const ::std::string& devfilename() const;
  inline void set_devfilename(const ::std::string& value);
  inline void set_devfilename(const char* value);
  inline void set_devfilename(const char* value, size_t size);
  inline ::std::string* mutable_devfilename();
  
  // required string libraryslot = 4;
  inline bool has_libraryslot() const;
  inline void clear_libraryslot();
  static const int kLibraryslotFieldNumber = 4;
  inline const ::std::string& libraryslot() const;
  inline void set_libraryslot(const ::std::string& value);
  inline void set_libraryslot(const char* value);
  inline void set_libraryslot(const char* value, size_t size);
  inline ::std::string* mutable_libraryslot();
  
  // required string vid = 5;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 5;
  inline const ::std::string& vid() const;
  inline void set_vid(const ::std::string& value);
  inline void set_vid(const char* value);
  inline void set_vid(const char* value, size_t size);
  inline ::std::string* mutable_vid();
  
  // required uint32 drivereadydelayinseconds = 6;
  inline bool has_drivereadydelayinseconds() const;
  inline void clear_drivereadydelayinseconds();
  static const int kDrivereadydelayinsecondsFieldNumber = 6;
  inline ::google::protobuf::uint32 drivereadydelayinseconds() const;
  inline void set_drivereadydelayinseconds(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.ForkCleaner)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* unitname_;
  static const ::std::string _default_unitname_;
  ::std::string* dgn_;
  static const ::std::string _default_dgn_;
  ::std::string* devfilename_;
  static const ::std::string _default_devfilename_;
  ::std::string* libraryslot_;
  static const ::std::string _default_libraryslot_;
  ::std::string* vid_;
  static const ::std::string _default_vid_;
  ::google::protobuf::uint32 drivereadydelayinseconds_;
  friend void  protobuf_AddDesc_ForkCleaner_2eproto();
  friend void protobuf_AssignDesc_ForkCleaner_2eproto();
  friend void protobuf_ShutdownFile_ForkCleaner_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForkCleaner* default_instance_;
};
// ===================================================================


// ===================================================================

// ForkCleaner

// required string unitname = 1;
inline bool ForkCleaner::has_unitname() const {
  return _has_bit(0);
}
inline void ForkCleaner::clear_unitname() {
  if (unitname_ != &_default_unitname_) {
    unitname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ForkCleaner::unitname() const {
  return *unitname_;
}
inline void ForkCleaner::set_unitname(const ::std::string& value) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void ForkCleaner::set_unitname(const char* value) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void ForkCleaner::set_unitname(const char* value, size_t size) {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkCleaner::mutable_unitname() {
  _set_bit(0);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}

// required string dgn = 2;
inline bool ForkCleaner::has_dgn() const {
  return _has_bit(1);
}
inline void ForkCleaner::clear_dgn() {
  if (dgn_ != &_default_dgn_) {
    dgn_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ForkCleaner::dgn() const {
  return *dgn_;
}
inline void ForkCleaner::set_dgn(const ::std::string& value) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(value);
}
inline void ForkCleaner::set_dgn(const char* value) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(value);
}
inline void ForkCleaner::set_dgn(const char* value, size_t size) {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  dgn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkCleaner::mutable_dgn() {
  _set_bit(1);
  if (dgn_ == &_default_dgn_) {
    dgn_ = new ::std::string;
  }
  return dgn_;
}

// required string devfilename = 3;
inline bool ForkCleaner::has_devfilename() const {
  return _has_bit(2);
}
inline void ForkCleaner::clear_devfilename() {
  if (devfilename_ != &_default_devfilename_) {
    devfilename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ForkCleaner::devfilename() const {
  return *devfilename_;
}
inline void ForkCleaner::set_devfilename(const ::std::string& value) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(value);
}
inline void ForkCleaner::set_devfilename(const char* value) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(value);
}
inline void ForkCleaner::set_devfilename(const char* value, size_t size) {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  devfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkCleaner::mutable_devfilename() {
  _set_bit(2);
  if (devfilename_ == &_default_devfilename_) {
    devfilename_ = new ::std::string;
  }
  return devfilename_;
}

// required string libraryslot = 4;
inline bool ForkCleaner::has_libraryslot() const {
  return _has_bit(3);
}
inline void ForkCleaner::clear_libraryslot() {
  if (libraryslot_ != &_default_libraryslot_) {
    libraryslot_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ForkCleaner::libraryslot() const {
  return *libraryslot_;
}
inline void ForkCleaner::set_libraryslot(const ::std::string& value) {
  _set_bit(3);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(value);
}
inline void ForkCleaner::set_libraryslot(const char* value) {
  _set_bit(3);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(value);
}
inline void ForkCleaner::set_libraryslot(const char* value, size_t size) {
  _set_bit(3);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  libraryslot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkCleaner::mutable_libraryslot() {
  _set_bit(3);
  if (libraryslot_ == &_default_libraryslot_) {
    libraryslot_ = new ::std::string;
  }
  return libraryslot_;
}

// required string vid = 5;
inline bool ForkCleaner::has_vid() const {
  return _has_bit(4);
}
inline void ForkCleaner::clear_vid() {
  if (vid_ != &_default_vid_) {
    vid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ForkCleaner::vid() const {
  return *vid_;
}
inline void ForkCleaner::set_vid(const ::std::string& value) {
  _set_bit(4);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void ForkCleaner::set_vid(const char* value) {
  _set_bit(4);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void ForkCleaner::set_vid(const char* value, size_t size) {
  _set_bit(4);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForkCleaner::mutable_vid() {
  _set_bit(4);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  return vid_;
}

// required uint32 drivereadydelayinseconds = 6;
inline bool ForkCleaner::has_drivereadydelayinseconds() const {
  return _has_bit(5);
}
inline void ForkCleaner::clear_drivereadydelayinseconds() {
  drivereadydelayinseconds_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 ForkCleaner::drivereadydelayinseconds() const {
  return drivereadydelayinseconds_;
}
inline void ForkCleaner::set_drivereadydelayinseconds(::google::protobuf::uint32 value) {
  _set_bit(5);
  drivereadydelayinseconds_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ForkCleaner_2eproto__INCLUDED
