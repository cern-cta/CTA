// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AcsDismountTape.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* AcsDismountTape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcsDismountTape_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AcsDismountTape_2eproto() {
  protobuf_AddDesc_AcsDismountTape_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AcsDismountTape.proto");
  GOOGLE_CHECK(file != NULL);
  AcsDismountTape_descriptor_ = file->message_type(0);
  static const int AcsDismountTape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, acs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, lsm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, drive_),
  };
  AcsDismountTape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcsDismountTape_descriptor_,
      AcsDismountTape::default_instance_,
      AcsDismountTape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcsDismountTape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcsDismountTape));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AcsDismountTape_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcsDismountTape_descriptor_, &AcsDismountTape::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AcsDismountTape_2eproto() {
  delete AcsDismountTape::default_instance_;
  delete AcsDismountTape_reflection_;
}

void protobuf_AddDesc_AcsDismountTape_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025AcsDismountTape.proto\022\017castor.messages"
    "\"V\n\017AcsDismountTape\022\013\n\003vid\030\001 \002(\t\022\013\n\003acs\030"
    "\002 \002(\r\022\013\n\003lsm\030\003 \002(\r\022\r\n\005panel\030\004 \002(\r\022\r\n\005dri"
    "ve\030\005 \002(\r", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AcsDismountTape.proto", &protobuf_RegisterTypes);
  AcsDismountTape::default_instance_ = new AcsDismountTape();
  AcsDismountTape::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AcsDismountTape_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AcsDismountTape_2eproto {
  StaticDescriptorInitializer_AcsDismountTape_2eproto() {
    protobuf_AddDesc_AcsDismountTape_2eproto();
  }
} static_descriptor_initializer_AcsDismountTape_2eproto_;


// ===================================================================

const ::std::string AcsDismountTape::_default_vid_;
#ifndef _MSC_VER
const int AcsDismountTape::kVidFieldNumber;
const int AcsDismountTape::kAcsFieldNumber;
const int AcsDismountTape::kLsmFieldNumber;
const int AcsDismountTape::kPanelFieldNumber;
const int AcsDismountTape::kDriveFieldNumber;
#endif  // !_MSC_VER

AcsDismountTape::AcsDismountTape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcsDismountTape::InitAsDefaultInstance() {
}

AcsDismountTape::AcsDismountTape(const AcsDismountTape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcsDismountTape::SharedCtor() {
  _cached_size_ = 0;
  vid_ = const_cast< ::std::string*>(&_default_vid_);
  acs_ = 0u;
  lsm_ = 0u;
  panel_ = 0u;
  drive_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcsDismountTape::~AcsDismountTape() {
  SharedDtor();
}

void AcsDismountTape::SharedDtor() {
  if (vid_ != &_default_vid_) {
    delete vid_;
  }
  if (this != default_instance_) {
  }
}

void AcsDismountTape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcsDismountTape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcsDismountTape_descriptor_;
}

const AcsDismountTape& AcsDismountTape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcsDismountTape_2eproto();  return *default_instance_;
}

AcsDismountTape* AcsDismountTape::default_instance_ = NULL;

AcsDismountTape* AcsDismountTape::New() const {
  return new AcsDismountTape;
}

void AcsDismountTape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vid_ != &_default_vid_) {
        vid_->clear();
      }
    }
    acs_ = 0u;
    lsm_ = 0u;
    panel_ = 0u;
    drive_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcsDismountTape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid().data(), this->vid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acs;
        break;
      }
      
      // required uint32 acs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acs_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lsm;
        break;
      }
      
      // required uint32 lsm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lsm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lsm_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_panel;
        break;
      }
      
      // required uint32 panel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_panel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &panel_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drive;
        break;
      }
      
      // required uint32 drive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drive_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcsDismountTape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vid(), output);
  }
  
  // required uint32 acs = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acs(), output);
  }
  
  // required uint32 lsm = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lsm(), output);
  }
  
  // required uint32 panel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->panel(), output);
  }
  
  // required uint32 drive = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->drive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcsDismountTape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string vid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }
  
  // required uint32 acs = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->acs(), target);
  }
  
  // required uint32 lsm = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lsm(), target);
  }
  
  // required uint32 panel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->panel(), target);
  }
  
  // required uint32 drive = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->drive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcsDismountTape::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }
    
    // required uint32 acs = 2;
    if (has_acs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acs());
    }
    
    // required uint32 lsm = 3;
    if (has_lsm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lsm());
    }
    
    // required uint32 panel = 4;
    if (has_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->panel());
    }
    
    // required uint32 drive = 5;
    if (has_drive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drive());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcsDismountTape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcsDismountTape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcsDismountTape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcsDismountTape::MergeFrom(const AcsDismountTape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_acs(from.acs());
    }
    if (from._has_bit(2)) {
      set_lsm(from.lsm());
    }
    if (from._has_bit(3)) {
      set_panel(from.panel());
    }
    if (from._has_bit(4)) {
      set_drive(from.drive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcsDismountTape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcsDismountTape::CopyFrom(const AcsDismountTape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcsDismountTape::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AcsDismountTape::Swap(AcsDismountTape* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(acs_, other->acs_);
    std::swap(lsm_, other->lsm_);
    std::swap(panel_, other->panel_);
    std::swap(drive_, other->drive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcsDismountTape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcsDismountTape_descriptor_;
  metadata.reflection = AcsDismountTape_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

// @@protoc_insertion_point(global_scope)
