// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecallJob.proto

#ifndef PROTOBUF_RecallJob_2eproto__INCLUDED
#define PROTOBUF_RecallJob_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace castor {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecallJob_2eproto();
void protobuf_AssignDesc_RecallJob_2eproto();
void protobuf_ShutdownFile_RecallJob_2eproto();

class RecallJob;

enum RecallJob_ClientType {
  RecallJob_ClientType_CLIENT_TYPE_GATEWAY = 1,
  RecallJob_ClientType_CLIENT_TYPE_READTP = 2
};
bool RecallJob_ClientType_IsValid(int value);
const RecallJob_ClientType RecallJob_ClientType_ClientType_MIN = RecallJob_ClientType_CLIENT_TYPE_GATEWAY;
const RecallJob_ClientType RecallJob_ClientType_ClientType_MAX = RecallJob_ClientType_CLIENT_TYPE_READTP;
const int RecallJob_ClientType_ClientType_ARRAYSIZE = RecallJob_ClientType_ClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecallJob_ClientType_descriptor();
inline const ::std::string& RecallJob_ClientType_Name(RecallJob_ClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecallJob_ClientType_descriptor(), value);
}
inline bool RecallJob_ClientType_Parse(
    const ::std::string& name, RecallJob_ClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecallJob_ClientType>(
    RecallJob_ClientType_descriptor(), name, value);
}
// ===================================================================

class RecallJob : public ::google::protobuf::Message {
 public:
  RecallJob();
  virtual ~RecallJob();
  
  RecallJob(const RecallJob& from);
  
  inline RecallJob& operator=(const RecallJob& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecallJob& default_instance();
  
  void Swap(RecallJob* other);
  
  // implements Message ----------------------------------------------
  
  RecallJob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecallJob& from);
  void MergeFrom(const RecallJob& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RecallJob_ClientType ClientType;
  static const ClientType CLIENT_TYPE_GATEWAY = RecallJob_ClientType_CLIENT_TYPE_GATEWAY;
  static const ClientType CLIENT_TYPE_READTP = RecallJob_ClientType_CLIENT_TYPE_READTP;
  static inline bool ClientType_IsValid(int value) {
    return RecallJob_ClientType_IsValid(value);
  }
  static const ClientType ClientType_MIN =
    RecallJob_ClientType_ClientType_MIN;
  static const ClientType ClientType_MAX =
    RecallJob_ClientType_ClientType_MAX;
  static const int ClientType_ARRAYSIZE =
    RecallJob_ClientType_ClientType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClientType_descriptor() {
    return RecallJob_ClientType_descriptor();
  }
  static inline const ::std::string& ClientType_Name(ClientType value) {
    return RecallJob_ClientType_Name(value);
  }
  static inline bool ClientType_Parse(const ::std::string& name,
      ClientType* value) {
    return RecallJob_ClientType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline const ::std::string& vid() const;
  inline void set_vid(const ::std::string& value);
  inline void set_vid(const char* value);
  inline void set_vid(const char* value, size_t size);
  inline ::std::string* mutable_vid();
  
  // required string unitname = 2;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitnameFieldNumber = 2;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  
  // required .castor.messages.RecallJob.ClientType clienttype = 3;
  inline bool has_clienttype() const;
  inline void clear_clienttype();
  static const int kClienttypeFieldNumber = 3;
  inline ::castor::messages::RecallJob_ClientType clienttype() const;
  inline void set_clienttype(::castor::messages::RecallJob_ClientType value);
  
  // @@protoc_insertion_point(class_scope:castor.messages.RecallJob)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* vid_;
  static const ::std::string _default_vid_;
  ::std::string* unitname_;
  static const ::std::string _default_unitname_;
  int clienttype_;
  friend void  protobuf_AddDesc_RecallJob_2eproto();
  friend void protobuf_AssignDesc_RecallJob_2eproto();
  friend void protobuf_ShutdownFile_RecallJob_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecallJob* default_instance_;
};
// ===================================================================


// ===================================================================

// RecallJob

// required string vid = 1;
inline bool RecallJob::has_vid() const {
  return _has_bit(0);
}
inline void RecallJob::clear_vid() {
  if (vid_ != &_default_vid_) {
    vid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RecallJob::vid() const {
  return *vid_;
}
inline void RecallJob::set_vid(const ::std::string& value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void RecallJob::set_vid(const char* value) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void RecallJob::set_vid(const char* value, size_t size) {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  vid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecallJob::mutable_vid() {
  _set_bit(0);
  if (vid_ == &_default_vid_) {
    vid_ = new ::std::string;
  }
  return vid_;
}

// required string unitname = 2;
inline bool RecallJob::has_unitname() const {
  return _has_bit(1);
}
inline void RecallJob::clear_unitname() {
  if (unitname_ != &_default_unitname_) {
    unitname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RecallJob::unitname() const {
  return *unitname_;
}
inline void RecallJob::set_unitname(const ::std::string& value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void RecallJob::set_unitname(const char* value) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void RecallJob::set_unitname(const char* value, size_t size) {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecallJob::mutable_unitname() {
  _set_bit(1);
  if (unitname_ == &_default_unitname_) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}

// required .castor.messages.RecallJob.ClientType clienttype = 3;
inline bool RecallJob::has_clienttype() const {
  return _has_bit(2);
}
inline void RecallJob::clear_clienttype() {
  clienttype_ = 1;
  _clear_bit(2);
}
inline ::castor::messages::RecallJob_ClientType RecallJob::clienttype() const {
  return static_cast< ::castor::messages::RecallJob_ClientType >(clienttype_);
}
inline void RecallJob::set_clienttype(::castor::messages::RecallJob_ClientType value) {
  GOOGLE_DCHECK(::castor::messages::RecallJob_ClientType_IsValid(value));
  _set_bit(2);
  clienttype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace castor

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::castor::messages::RecallJob_ClientType>() {
  return ::castor::messages::RecallJob_ClientType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecallJob_2eproto__INCLUDED
