/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/infoPolicy/PolicyObjCInt.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "castor/IObject.hpp"
#include "castor/infoPolicy/CnsInfoPolicy.hpp"
#include "castor/infoPolicy/DbInfoPolicy.hpp"
#include "castor/infoPolicy/PolicyObj.hpp"
#include "osdep.h"
#include <vector>

extern "C" {

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_create
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_create(castor::infoPolicy::PolicyObj** obj) {
    *obj = new castor::infoPolicy::PolicyObj();
    return 0;
  }
  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_delete
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_delete(castor::infoPolicy::PolicyObj* obj) {
    delete obj;
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_getIObject
  //----------------------------------------------------------------------------
  castor::IObject* CinfoPolicy_PolicyObj_getIObject(castor::infoPolicy::PolicyObj* obj) {
    return obj;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_fromIObject
  //----------------------------------------------------------------------------
  castor::infoPolicy::PolicyObj* CinfoPolicy_PolicyObj_fromIObject(castor::IObject* obj) {
    return dynamic_cast<castor::infoPolicy::PolicyObj*>(obj);
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_print
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_print(castor::infoPolicy::PolicyObj* instance) {
    instance->print();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_TYPE
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_TYPE(int* ret) {
    *ret = castor::infoPolicy::PolicyObj::TYPE();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_type
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_type(castor::infoPolicy::PolicyObj* instance,
                                 int* ret) {
    *ret = instance->type();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_clone
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_clone(castor::infoPolicy::PolicyObj* instance,
                                  castor::IObject** ret) {
    *ret = instance->clone();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_policyName
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_policyName(castor::infoPolicy::PolicyObj* instance, const char** var) {
    *var = instance->policyName().c_str();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_setPolicyName
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_setPolicyName(castor::infoPolicy::PolicyObj* instance, const char* new_var) {
    std::string snew_var(new_var, strlen(new_var));
    instance->setPolicyName(snew_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_svcClassName
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_svcClassName(castor::infoPolicy::PolicyObj* instance, const char** var) {
    *var = instance->svcClassName().c_str();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_setSvcClassName
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_setSvcClassName(castor::infoPolicy::PolicyObj* instance, const char* new_var) {
    std::string snew_var(new_var, strlen(new_var));
    instance->setSvcClassName(snew_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_id
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_id(castor::infoPolicy::PolicyObj* instance, u_signed64* var) {
    *var = instance->id();
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_setId
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_setId(castor::infoPolicy::PolicyObj* instance, u_signed64 new_var) {
    instance->setId(new_var);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_addDbInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_addDbInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::DbInfoPolicy* obj) {
    instance->addDbInfoPolicy(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_removeDbInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_removeDbInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::DbInfoPolicy* obj) {
    instance->removeDbInfoPolicy(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_dbInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_dbInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::DbInfoPolicy*** var, int* len) {
    std::vector<castor::infoPolicy::DbInfoPolicy*>& result = instance->dbInfoPolicy();
    *len = result.size();
    *var = (castor::infoPolicy::DbInfoPolicy**) malloc((*len) * sizeof(castor::infoPolicy::DbInfoPolicy*));
    for (int i = 0; i < *len; i++) {
      (*var)[i] = result[i];
    }
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_addCnsInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_addCnsInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::CnsInfoPolicy* obj) {
    instance->addCnsInfoPolicy(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_removeCnsInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_removeCnsInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::CnsInfoPolicy* obj) {
    instance->removeCnsInfoPolicy(obj);
    return 0;
  }

  //----------------------------------------------------------------------------
  // CinfoPolicy_PolicyObj_cnsInfoPolicy
  //----------------------------------------------------------------------------
  int CinfoPolicy_PolicyObj_cnsInfoPolicy(castor::infoPolicy::PolicyObj* instance, castor::infoPolicy::CnsInfoPolicy*** var, int* len) {
    std::vector<castor::infoPolicy::CnsInfoPolicy*>& result = instance->cnsInfoPolicy();
    *len = result.size();
    *var = (castor::infoPolicy::CnsInfoPolicy**) malloc((*len) * sizeof(castor::infoPolicy::CnsInfoPolicy*));
    for (int i = 0; i < *len; i++) {
      (*var)[i] = result[i];
    }
    return 0;
  }

} // End of extern "C"
