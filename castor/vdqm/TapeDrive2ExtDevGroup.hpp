/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/vdqm/TapeDrive2ExtDevGroup.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile: TapeDrive2ExtDevGroup.hpp,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/21 17:36:12 $ $Author: mbraeger $
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_VDQM_TAPEDRIVE2EXTDEVGROUP_HPP
#define CASTOR_VDQM_TAPEDRIVE2EXTDEVGROUP_HPP

namespace castor {

  namespace vdqm {

    // Forward declarations
    class TapeDrive;
    class ExtendedDeviceGroup;

    /**
     * class TapeDrive2ExtDevGroup
     * This db table is used to handle the mapping between a tape drive and its
     * ExtendedDeviceGroups.To each ExtendedDeviceGroup is assigned a priorityLevel
     * number, which specifies the tape model which should be served first.
     */
    class TapeDrive2ExtDevGroup {

    public:

      /**
       * Empty Constructor
       */
      TapeDrive2ExtDevGroup() throw();

      /**
       * Empty Destructor
       */
      virtual ~TapeDrive2ExtDevGroup() throw();

      /**
       * Get the value of m_priorityLevel
       * The level of priority for the specified ExtendedDeviceGroup and a specific tape
       * drive model
       * @return the value of m_priorityLevel
       */
      int priorityLevel() const {
        return m_priorityLevel;
      }

      /**
       * Set the value of m_priorityLevel
       * The level of priority for the specified ExtendedDeviceGroup and a specific tape
       * drive model
       * @param new_var the new value of m_priorityLevel
       */
      void setPriorityLevel(int new_var) {
        m_priorityLevel = new_var;
      }

      /**
       * Get the value of m_tapeDrive
       * @return the value of m_tapeDrive
       */
      TapeDrive* tapeDrive() const {
        return m_tapeDrive;
      }

      /**
       * Set the value of m_tapeDrive
       * @param new_var the new value of m_tapeDrive
       */
      void setTapeDrive(TapeDrive* new_var) {
        m_tapeDrive = new_var;
      }

      /**
       * Get the value of m_extDeviceGroup
       * @return the value of m_extDeviceGroup
       */
      ExtendedDeviceGroup* extDeviceGroup() const {
        return m_extDeviceGroup;
      }

      /**
       * Set the value of m_extDeviceGroup
       * @param new_var the new value of m_extDeviceGroup
       */
      void setExtDeviceGroup(ExtendedDeviceGroup* new_var) {
        m_extDeviceGroup = new_var;
      }

    private:

      /// The level of priority for the specified ExtendedDeviceGroup and a specific tape drive model
      int m_priorityLevel;

      TapeDrive* m_tapeDrive;

      ExtendedDeviceGroup* m_extDeviceGroup;

    }; // end of class TapeDrive2ExtDevGroup

  }; // end of namespace vdqm

}; // end of namespace castor

#endif // CASTOR_VDQM_TAPEDRIVE2EXTDEVGROUP_HPP
