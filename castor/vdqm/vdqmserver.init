#!/bin/sh
#
# vdqmserver         Start/Stop vdqmserver.
#
# chkconfig: 345 64 41
# description: VDQM server daemon Version 2
#
# $Id: vdqmserver.init,v 1.3 2005/11/30 09:14:53 jdurand Exp $
#
# @(#)$RCSfile: vdqmserver.init,v $ $Revision: 1.3 $ $Date: 2005/11/30 09:14:53 $ CERN/IT/ADC/CA Jean-Damien Durand
#

sysname=`uname -s`

# source function library
if [ -r /etc/rc.d/init.d/functions ]; then
	. /etc/rc.d/init.d/functions
	DAEMON=daemon
	FAILURE=failure
	ECHO_FAILURE=failure
	SUCCESS=success
	ECHO_SUCCESS=echo_success
	ECHO_END=echo
	if [ $sysname = "Linux" ]; then
		ECHOOPT=-n
	fi
else
	DAEMON=
	FAILURE=
	ECHO_FAILURE=
	SUCCESS=
	ECHO_SUCCESS=
	ECHOOPT=
	ECHO_END=
fi

RETVAL=0
prog="vdqmserver"
PIDFILE=/var/run/vdqmserver.pid
PIDDIR=/var/run
SUBSYS=/var/lock/subsys/vdqmserver
SUBSYSDIR=/var/lock/subsys
[ -z "$SILENTSTOP" ] && SILENTSTOP=0
VDQMSERVER=/usr/bin/vdqmserver
# Not yet supported
OPTIONS=""
SYSCONFIGVDQMSERVER=/etc/sysconfig/vdqmserver

#
## Blindly attempt to create useful directories
#
[ ! -d $PIDDIR ] && mkdir -p $PIDDIR >& /dev/null
[ ! -d $SUBSYSDIR ] && mkdir -p $SUBSYSDIR >& /dev/null

if [ $sysname = "HP-UX" ]; then
	export UNIX95=1
fi
if [ $sysname = "SunOS" ]; then
	format4comm="fname"
else
	format4comm="comm"
fi

#
## Unless sysconfig says no the default is to run the server
#
RUN_VDQMSERVER=yes

case "$1" in
  start)
	echo $ECHOOPT "Starting $prog: "
	if [ $sysname = "Linux" -a `whoami` = "root" ]; then
        netstat -ap | egrep '\*:5012|\*:vdqmserver' | grep LISTEN | egrep "\/vdqmserver *\$" > /dev/null
    else
        netstat -a  | egrep '\*:5012|\*:vdqmserver' | egrep 'LISTEN *$' > /dev/null
    fi
	# ps -eo ppid,$format4comm | egrep '^[ \t]+1 vdqmserver' > /dev/null
	if [ $? -eq 0 ]; then
		echo $ECHOOPT "vdqmserver already started: "
		[ -n "$FAILURE" ] && $FAILURE "vdqmserver already started: "
		RETVAL=1
	else
        if [ -r $SYSCONFIGVDQMSERVER ]; then
            #
            ## Source the configuration
            #
            . $SYSCONFIGVDQMSERVER
            if [ "${RUN_VDQMSERVER}" != "yes" ]; then
                echo $ECHOOPT "$SYSCONFIGVDQMSERVER says NO: "
                [ -n "$FAILURE" ] && $FAILURE "$SYSCONFIGVDQMSERVER says NO: "
                RETVAL=1
            fi
        fi
	if [ $RETVAL -eq 0 ]; then
            #
            ## Because we might generate a core file
            ## We explicitely chdir in the workdir
            #
	    cd /var/spool/vdqm
            $DAEMON $VDQMSERVER $OPTIONS
            if [ $? -eq 0 ]; then
                [ -d $SUBSYSDIR ] && touch $SUBSYS
                if [ -d $PIDDIR ]; then
                    pid=`ps -eo pid,ppid,$format4comm | egrep " 1 vdqmserver\$" | awk '{print $1}'`
                    # The point of $PIDFILE is that it kills only
                    # the master daemon.
                    rm -f $PIDFILE
		    if [ -n "$pid" ]; then
			echo $pid > $PIDFILE
			RETVAL=0
		    else
			echo $ECHOOPT "vdqmserver not started: "
			[ -n "$FAILURE" ] && $FAILURE "vdqmserver not started: "
			RETVAL=1
		    fi
                else
                  RETVAL=0
		fi
            else
                echo $ECHOOPT "vdqmserver not started: "
                [ -n "$FAILURE" ] && $FAILURE "vdqmserver not started: "
                RETVAL=1
            fi
        fi
	fi
	$ECHO_END
	;;
  stop)
	if [ -f $PIDFILE ]; then
	    [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
	    if [ $SILENTSTOP -eq 0 ]; then
		kill -2 -`cat $PIDFILE`
	    else
		kill -2 -`cat $PIDFILE` >& /dev/null
	    fi
	    RETVAL=$?
	    if [ $RETVAL -eq 0 ]; then
		rm -f $PIDFILE
	    fi
	else
	       # vdqmserver might have been started by hand
	    pid=`ps -eo pid,ppid,$format4comm | egrep " 1 vdqmserver\$" | awk '{print $1}'`
	    if [ -n "$pid" ]; then
		[ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
		if [ $SILENTSTOP -eq 0 ]; then
		    kill -2 -$pid
		else
		    kill -2 -$pid >& /dev/null
		fi
		RETVAL=$?
	    else
		[ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "vdqmserver already stopped: "
		[ $SILENTSTOP -eq 0 -a -n "$FAILURE" ] && $FAILURE "vdqmserver already stopped: "
		RETVAL=1
	    fi
	fi
	if [ $SILENTSTOP -eq 0 -a $sysname = "Linux" ]; then
	    if [ $RETVAL -eq 0 ]; then
		$ECHO_SUCCESS
	    else
		$ECHO_FAILURE
	    fi
	fi
	[ -d $SUBSYSDIR ] && rm -f $SUBSYS
	[ $SILENTSTOP -eq 0 -a -n "$ECHO_END" ] && $ECHO_END
    #
    ## Basically: if SILENTSTOP is not 0 when we never print something
    ## But if the stop is successful... One might want to see stop: OK
    ## anyway ?
    #
	if [ $SILENTSTOP -ne 0 -a $RETVAL -eq 0 ]; then
        echo $ECHOOPT "Stopping $prog: "
        [ $sysname = "Linux" ] && $ECHO_SUCCESS
        [ -n "$ECHO_END" ] && $ECHO_END
    fi
	;;
  restart)
	$0 stop
	if [ $? -eq 0 -o $SILENTSTOP -eq 0 ]; then
		$0 start
		RETVAL=$?
	else
        #
        ## It is legal to return zero it if was
        ## a conditional restart
        #
        if [ $SILENTSTOP -eq 0 ]; then
            RETVAL=1
        else
            RETVAL=0
        fi
	fi
	;;
  condrestart)
	SILENTSTOP=1
    export SILENTSTOP
	$0 restart
    RETVAL=$?
	;;
  status)
	pid=`ps -eo pid,ppid,$format4comm | egrep " 1 vdqmserver\$" | awk '{print $1}'`
	if [ -n "$pid" ]; then
		echo $ECHOOPT "vdqmserver (pid $pid) is running..."
		$ECHO_SUCCESS
		$ECHO_END
	else
		if [ -f $PIDFILE ]; then
			pid=`head -1 $PIDFILE`
			if [ "$pid" != "" ] ; then
				echo $ECHOOPT "vdqmserver dead but pid file exists"
				$ECHO_FAILURE
				$ECHO_END
			fi
		else
			if [ -f $SUBSYS ]; then
				echo $ECHOOPT "vdqmserver dead but subsys ($SUBSYS) locked"
			else
				echo $ECHOOPT "vdqmserver is stopped"
			fi
			$ECHO_FAILURE
			$ECHO_END
		fi
	fi
	;;
  *)
	echo "Usage: $0 {start|stop|status|restart|condrestart}"
	RETVAL=1
	;;
esac

exit $RETVAL
