#!/usr/bin/perl -w

use strict;

my $vdqm_constants_filename="VdqmDlfMessageConstants.hpp";
my $vdqm_constants_head_filename="VdqmDlfMessageConstantsHeader.txt";
my $vdqm_messages_filename="VdqmDlfMessages.csv";
my $vdqm_constants_tail_filename="VdqmDlfMessageConstantsTrailer.txt";
my $vdqm_strings_filename="VdqmDlfMessageStrings.cpp";
my $vdqm_strings_head_filename="VdqmDlfMessageStringsHeader.txt";


sub writeConstantsFile {
  my $date = $_[0];

  # Open the constants file for writing
  open(VDQMCONSTANTS, ">$vdqm_constants_filename")
    or die("Could not open $vdqm_constants_filename for writing: $!\n");

  print(VDQMCONSTANTS "/* This file was generated by $0 on $date */\n\n");

  # Write the header text
  open(VDQMCONSTANTSHEAD, "<$vdqm_constants_head_filename")
    or die("Could not open $vdqm_constants_head_filename for reading: $!\n");
  while(<VDQMCONSTANTSHEAD>) {
    print(VDQMCONSTANTS);
  }
  close(VDQMCONSTANTSHEAD);

  # Count the number of messages
  open(VDQMMESSAGES, "<$vdqm_messages_filename")
    or die("Could not open $vdqm_messages_filename for reading: $!\n");
  my $nbMessages = 0;
  while(<VDQMMESSAGES>) {
    $nbMessages = $nbMessages + 1;
  }
  close(VDQMMESSAGES);

  # Write the body text
  open(VDQMMESSAGES, "<$vdqm_messages_filename")
    or die("Could not open $vdqm_messages_filename for reading: $!\n");
  my $const_name;
  my $const_val;
  my $msg;
  my $currentMessageNb = 0;
  while(<VDQMMESSAGES>) {
    $currentMessageNb = $currentMessageNb + 1;
    m/^([A-Z0-9_]*),(\d*),(.*)/;
    $const_name = $1;
    $const_val  = $2;
    $msg        = $3;

    # If this is not the last message
    if($currentMessageNb != $nbMessages) {
      # Terminate the enumeration item with a comma
      print(VDQMCONSTANTS "${const_name}=${const_val}, /* ${msg} */\n");
    } else {
      # Don't terminate the enumeration item with a comma
      print(VDQMCONSTANTS "${const_name}=${const_val} /* ${msg} */\n");
    }
  }
  close(VDQMMESSAGES);

  # Write the trailer text
  open(VDQMCONSTANTSTAIL, "<$vdqm_constants_tail_filename")
    or die("Could not open $vdqm_constants_tail_filename for reading: $!\n");
  while(<VDQMCONSTANTSTAIL>) {
    print(VDQMCONSTANTS);
  }
  close(VDQMCONSTANTSTAIL);

  # Close the constants file
  close(VDQMCONSTANTS);
}


sub writeStringsFile {
  my $date = $_[0];

  # Open the strings file for writing
  open(VDQMSTRINGS, ">$vdqm_strings_filename")
    or die("Could not open $vdqm_strings_filename for writing: $!\n");

  print(VDQMSTRINGS "/* This file was generated by $0 on $date */\n\n");

  # Write the header text
  open(VDQMSTRINGSHEAD, "<$vdqm_strings_head_filename")
    or die("Could not open $vdqm_strings_head_filename for reading: $!\n");
  while(<VDQMSTRINGSHEAD>) {
    print(VDQMSTRINGS);
  }
  close(VDQMSTRINGSHEAD);

  # Write the body text
  open(VDQMMESSAGES, "<$vdqm_messages_filename")
    or die("Could not open $vdqm_messages_filename for reading: $!\n");
  my $const_name;
  my $const_val;
  my $msg;
  while(<VDQMMESSAGES>) {
    m/^([A-Z0-9_]*),(\d*),(.*)/;
    $const_name = $1;
    $const_val  = $2;
    $msg        = $3;

    print(VDQMSTRINGS "{${const_name}, ${msg}},\n");
  }
  close(VDQMMESSAGES);

  # Write the trailer text
  print(VDQMSTRINGS "{-1, \"\"}};\n");

  # Close the strings file
  close(VDQMSTRINGS);
}

my $date = `date`;

print("\n");
print("Source code generator for VDQM DLF messages\n");
print("===========================================\n\n");
print("Generating $vdqm_constants_filename\n");
&writeConstantsFile($date);
print("Generating $vdqm_strings_filename\n");
&writeStringsFile($date);
print("Finished\n\n");
