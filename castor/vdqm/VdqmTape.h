/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/vdqm/VdqmTape.h
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_VDQM_VDQMTAPE_H
#define CASTOR_VDQM_VDQMTAPE_H

/* Include Files and Forward declarations for the C world */
#include "castor/vdqm/TapeStatusCodes.h"
#include "osdep.h"
struct C_IObject_t;
struct Cvdqm_ErrorHistory_t;
struct Cvdqm_VdqmTape_t;

/* --------------------------------------------------------------------------
  This defines a C interface to the following class
// class VdqmTape
  -------------------------------------------------------------------------- */

/**
 * Empty Constructor
 */
int Cvdqm_VdqmTape_create(struct Cvdqm_VdqmTape_t** obj);

/**
 * Empty Destructor
 */
int Cvdqm_VdqmTape_delete(struct Cvdqm_VdqmTape_t* obj);

/**
 * Cast into IObject
 */
struct C_IObject_t* Cvdqm_VdqmTape_getIObject(struct Cvdqm_VdqmTape_t* obj);

/**
 * Dynamic cast from IObject
 */
struct Cvdqm_VdqmTape_t* Cvdqm_VdqmTape_fromIObject(struct C_IObject_t* obj);

/**
 * Outputs this object in a human readable format
 */
int Cvdqm_VdqmTape_print(struct Cvdqm_VdqmTape_t* instance);

/**
 * Gets the type of this kind of objects
 */
int Cvdqm_VdqmTape_TYPE(int* ret);

/***************************************/
/* Implementation of IObject interface */
/***************************************/

/**
 * Gets the type of the object
 */
int Cvdqm_VdqmTape_type(struct Cvdqm_VdqmTape_t* instance,
                        int* ret);

/**
 * virtual method to clone any object
 */
int Cvdqm_VdqmTape_clone(struct Cvdqm_VdqmTape_t* instance,
                         struct C_IObject_t* ret);

/**
 * Get the value of vid
 * Tape visual identifier
 */
int Cvdqm_VdqmTape_vid(struct Cvdqm_VdqmTape_t* instance, const char** var);

/**
 * Set the value of vid
 * Tape visual identifier
 */
int Cvdqm_VdqmTape_setVid(struct Cvdqm_VdqmTape_t* instance, const char* new_var);

/**
 * Get the value of side
 * Side (for future support of two sided media)
 */
int Cvdqm_VdqmTape_side(struct Cvdqm_VdqmTape_t* instance, int* var);

/**
 * Set the value of side
 * Side (for future support of two sided media)
 */
int Cvdqm_VdqmTape_setSide(struct Cvdqm_VdqmTape_t* instance, int new_var);

/**
 * Get the value of tpmode
 * Tape access mode (WRITE_DISABLE or WRITE_ENABLE)
 */
int Cvdqm_VdqmTape_tpmode(struct Cvdqm_VdqmTape_t* instance, int* var);

/**
 * Set the value of tpmode
 * Tape access mode (WRITE_DISABLE or WRITE_ENABLE)
 */
int Cvdqm_VdqmTape_setTpmode(struct Cvdqm_VdqmTape_t* instance, int new_var);

/**
 * Get the value of errMsgTxt
 */
int Cvdqm_VdqmTape_errMsgTxt(struct Cvdqm_VdqmTape_t* instance, const char** var);

/**
 * Set the value of errMsgTxt
 */
int Cvdqm_VdqmTape_setErrMsgTxt(struct Cvdqm_VdqmTape_t* instance, const char* new_var);

/**
 * Get the value of errorCode
 * RTCOPY serrno if status == SEGMENT_FAILED
 */
int Cvdqm_VdqmTape_errorCode(struct Cvdqm_VdqmTape_t* instance, int* var);

/**
 * Set the value of errorCode
 * RTCOPY serrno if status == SEGMENT_FAILED
 */
int Cvdqm_VdqmTape_setErrorCode(struct Cvdqm_VdqmTape_t* instance, int new_var);

/**
 * Get the value of severity
 */
int Cvdqm_VdqmTape_severity(struct Cvdqm_VdqmTape_t* instance, int* var);

/**
 * Set the value of severity
 */
int Cvdqm_VdqmTape_setSeverity(struct Cvdqm_VdqmTape_t* instance, int new_var);

/**
 * Get the value of vwAddress
 * Vid worker address for killing requests
 */
int Cvdqm_VdqmTape_vwAddress(struct Cvdqm_VdqmTape_t* instance, const char** var);

/**
 * Set the value of vwAddress
 * Vid worker address for killing requests
 */
int Cvdqm_VdqmTape_setVwAddress(struct Cvdqm_VdqmTape_t* instance, const char* new_var);

/**
 * Get the value of id
 * The id of this object
 */
int Cvdqm_VdqmTape_id(struct Cvdqm_VdqmTape_t* instance, u_signed64* var);

/**
 * Set the value of id
 * The id of this object
 */
int Cvdqm_VdqmTape_setId(struct Cvdqm_VdqmTape_t* instance, u_signed64 new_var);

/**
 * Add a struct Cvdqm_ErrorHistory_t* object to the errorHistory list
 */
int Cvdqm_VdqmTape_addErrorHistory(struct Cvdqm_VdqmTape_t* instance, struct Cvdqm_ErrorHistory_t* obj);

/**
 * Remove a struct Cvdqm_ErrorHistory_t* object from errorHistory
 */
int Cvdqm_VdqmTape_removeErrorHistory(struct Cvdqm_VdqmTape_t* instance, struct Cvdqm_ErrorHistory_t* obj);

/**
 * Get the list of struct Cvdqm_ErrorHistory_t* objects held by errorHistory. Note
 * that the caller is responsible for the deletion of the returned vector.
 */
int Cvdqm_VdqmTape_errorHistory(struct Cvdqm_VdqmTape_t* instance, struct Cvdqm_ErrorHistory_t*** var, int* len);

/**
 * Get the value of status
 */
int Cvdqm_VdqmTape_status(struct Cvdqm_VdqmTape_t* instance, enum Cvdqm_TapeStatusCodes_t* var);

/**
 * Set the value of status
 */
int Cvdqm_VdqmTape_setStatus(struct Cvdqm_VdqmTape_t* instance, enum Cvdqm_TapeStatusCodes_t new_var);

#endif /* CASTOR_VDQM_VDQMTAPE_H */
