/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/vdqm/TapeDrive.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_VDQM_TAPEDRIVE_HPP
#define CASTOR_VDQM_TAPEDRIVE_HPP

// Include Files
#include "castor/IObject.hpp"
#include "castor/vdqm/TapeDriveStatusCodes.hpp"
#include "osdep.h"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;

  // Forward declarations
  namespace stager {

    // Forward declarations
    class Tape;

  }; // end of namespace stager

  namespace vdqm {

    // Forward declarations
    class TapeServer;
    class ExtendedDeviceGroup;

    /**
     * class TapeDrive
     * An instance of this class contains the informations of one specific tape drive of
     * a server.
     */
    class TapeDrive : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      TapeDrive() throw();

      /**
       * Empty Destructor
       */
      virtual ~TapeDrive() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_jobID
       * @return the value of m_jobID
       */
      int jobID() const {
        return m_jobID;
      }

      /**
       * Set the value of m_jobID
       * @param new_var the new value of m_jobID
       */
      void setJobID(int new_var) {
        m_jobID = new_var;
      }

      /**
       * Get the value of m_creationTime
       * The time, when the tape drive begins with its job.
       * @return the value of m_creationTime
       */
      int creationTime() const {
        return m_creationTime;
      }

      /**
       * Set the value of m_creationTime
       * The time, when the tape drive begins with its job.
       * @param new_var the new value of m_creationTime
       */
      void setCreationTime(int new_var) {
        m_creationTime = new_var;
      }

      /**
       * Get the value of m_resettime
       * Last time counters were reset
       * @return the value of m_resettime
       */
      int resettime() const {
        return m_resettime;
      }

      /**
       * Set the value of m_resettime
       * Last time counters were reset
       * @param new_var the new value of m_resettime
       */
      void setResettime(int new_var) {
        m_resettime = new_var;
      }

      /**
       * Get the value of m_usecount
       * Usage counter (total number of VolReqs so far)
       * @return the value of m_usecount
       */
      int usecount() const {
        return m_usecount;
      }

      /**
       * Set the value of m_usecount
       * Usage counter (total number of VolReqs so far)
       * @param new_var the new value of m_usecount
       */
      void setUsecount(int new_var) {
        m_usecount = new_var;
      }

      /**
       * Get the value of m_errcount
       * Drive error counter
       * @return the value of m_errcount
       */
      int errcount() const {
        return m_errcount;
      }

      /**
       * Set the value of m_errcount
       * Drive error counter
       * @param new_var the new value of m_errcount
       */
      void setErrcount(int new_var) {
        m_errcount = new_var;
      }

      /**
       * Get the value of m_transferredMB
       * MBytes transfered in last request.
       * @return the value of m_transferredMB
       */
      int transferredMB() const {
        return m_transferredMB;
      }

      /**
       * Set the value of m_transferredMB
       * MBytes transfered in last request.
       * @param new_var the new value of m_transferredMB
       */
      void setTransferredMB(int new_var) {
        m_transferredMB = new_var;
      }

      /**
       * Get the value of m_totalMB
       * Total MBytes transfered
       * @return the value of m_totalMB
       */
      u_signed64 totalMB() const {
        return m_totalMB;
      }

      /**
       * Set the value of m_totalMB
       * Total MBytes transfered
       * @param new_var the new value of m_totalMB
       */
      void setTotalMB(u_signed64 new_var) {
        m_totalMB = new_var;
      }

      /**
       * Get the value of m_dedicate
       * @return the value of m_dedicate
       */
      std::string dedicate() const {
        return m_dedicate;
      }

      /**
       * Set the value of m_dedicate
       * @param new_var the new value of m_dedicate
       */
      void setDedicate(std::string new_var) {
        m_dedicate = new_var;
      }

      /**
       * Get the value of m_newDedicate
       * Regexp optimization
       * @return the value of m_newDedicate
       */
      std::string newDedicate() const {
        return m_newDedicate;
      }

      /**
       * Set the value of m_newDedicate
       * Regexp optimization
       * @param new_var the new value of m_newDedicate
       */
      void setNewDedicate(std::string new_var) {
        m_newDedicate = new_var;
      }

      /**
       * Get the value of m_is_uid
       * @return the value of m_is_uid
       */
      short is_uid() const {
        return m_is_uid;
      }

      /**
       * Set the value of m_is_uid
       * @param new_var the new value of m_is_uid
       */
      void setIs_uid(short new_var) {
        m_is_uid = new_var;
      }

      /**
       * Get the value of m_is_gid
       * @return the value of m_is_gid
       */
      short is_gid() const {
        return m_is_gid;
      }

      /**
       * Set the value of m_is_gid
       * @param new_var the new value of m_is_gid
       */
      void setIs_gid(short new_var) {
        m_is_gid = new_var;
      }

      /**
       * Get the value of m_is_name
       * @return the value of m_is_name
       */
      short is_name() const {
        return m_is_name;
      }

      /**
       * Set the value of m_is_name
       * @param new_var the new value of m_is_name
       */
      void setIs_name(short new_var) {
        m_is_name = new_var;
      }

      /**
       * Get the value of m_no_uid
       * @return the value of m_no_uid
       */
      short no_uid() const {
        return m_no_uid;
      }

      /**
       * Set the value of m_no_uid
       * @param new_var the new value of m_no_uid
       */
      void setNo_uid(short new_var) {
        m_no_uid = new_var;
      }

      /**
       * Get the value of m_no_gid
       * @return the value of m_no_gid
       */
      short no_gid() const {
        return m_no_gid;
      }

      /**
       * Set the value of m_no_gid
       * @param new_var the new value of m_no_gid
       */
      void setNo_gid(short new_var) {
        m_no_gid = new_var;
      }

      /**
       * Get the value of m_no_name
       * @return the value of m_no_name
       */
      short no_name() const {
        return m_no_name;
      }

      /**
       * Set the value of m_no_name
       * @param new_var the new value of m_no_name
       */
      void setNo_name(short new_var) {
        m_no_name = new_var;
      }

      /**
       * Get the value of m_no_host
       * @return the value of m_no_host
       */
      short no_host() const {
        return m_no_host;
      }

      /**
       * Set the value of m_no_host
       * @param new_var the new value of m_no_host
       */
      void setNo_host(short new_var) {
        m_no_host = new_var;
      }

      /**
       * Get the value of m_no_vid
       * @return the value of m_no_vid
       */
      short no_vid() const {
        return m_no_vid;
      }

      /**
       * Set the value of m_no_vid
       * @param new_var the new value of m_no_vid
       */
      void setNo_vid(short new_var) {
        m_no_vid = new_var;
      }

      /**
       * Get the value of m_no_mode
       * @return the value of m_no_mode
       */
      short no_mode() const {
        return m_no_mode;
      }

      /**
       * Set the value of m_no_mode
       * @param new_var the new value of m_no_mode
       */
      void setNo_mode(short new_var) {
        m_no_mode = new_var;
      }

      /**
       * Get the value of m_no_date
       * @return the value of m_no_date
       */
      short no_date() const {
        return m_no_date;
      }

      /**
       * Set the value of m_no_date
       * @param new_var the new value of m_no_date
       */
      void setNo_date(short new_var) {
        m_no_date = new_var;
      }

      /**
       * Get the value of m_no_time
       * @return the value of m_no_time
       */
      short no_time() const {
        return m_no_time;
      }

      /**
       * Set the value of m_no_time
       * @param new_var the new value of m_no_time
       */
      void setNo_time(short new_var) {
        m_no_time = new_var;
      }

      /**
       * Get the value of m_no_age
       * @return the value of m_no_age
       */
      short no_age() const {
        return m_no_age;
      }

      /**
       * Set the value of m_no_age
       * @param new_var the new value of m_no_age
       */
      void setNo_age(short new_var) {
        m_no_age = new_var;
      }

      /**
       * Get the value of m_uid
       * @return the value of m_uid
       */
      long uid() const {
        return m_uid;
      }

      /**
       * Set the value of m_uid
       * @param new_var the new value of m_uid
       */
      void setUid(long new_var) {
        m_uid = new_var;
      }

      /**
       * Get the value of m_gid
       * @return the value of m_gid
       */
      long gid() const {
        return m_gid;
      }

      /**
       * Set the value of m_gid
       * @param new_var the new value of m_gid
       */
      void setGid(long new_var) {
        m_gid = new_var;
      }

      /**
       * Get the value of m_name
       * @return the value of m_name
       */
      std::string name() const {
        return m_name;
      }

      /**
       * Set the value of m_name
       * @param new_var the new value of m_name
       */
      void setName(std::string new_var) {
        m_name = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Get the value of m_tape
       * @return the value of m_tape
       */
      castor::stager::Tape* tape() const {
        return m_tape;
      }

      /**
       * Set the value of m_tape
       * @param new_var the new value of m_tape
       */
      void setTape(castor::stager::Tape* new_var) {
        m_tape = new_var;
      }

      /**
       * Add a ExtendedDeviceGroup* object to the m_extDevGrpVector list
       */
      void addExtDevGrp(ExtendedDeviceGroup* add_object) {
        m_extDevGrpVector.push_back(add_object);
      }

      /**
       * Remove a ExtendedDeviceGroup* object from m_extDevGrpVector
       */
      void removeExtDevGrp(ExtendedDeviceGroup* remove_object) {
        for (unsigned int i = 0; i < m_extDevGrpVector.size(); i++) {
          ExtendedDeviceGroup* item = m_extDevGrpVector[i];
          if (item == remove_object) {
            std::vector<ExtendedDeviceGroup*>::iterator it = m_extDevGrpVector.begin() + i;
            m_extDevGrpVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of ExtendedDeviceGroup* objects held by m_extDevGrpVector
       * @return list of ExtendedDeviceGroup* objects held by m_extDevGrpVector
       */
      std::vector<ExtendedDeviceGroup*>& extDevGrp() {
        return m_extDevGrpVector;
      }

      /**
       * Get the value of m_status
       * @return the value of m_status
       */
      TapeDriveStatusCodes status() const {
        return m_status;
      }

      /**
       * Set the value of m_status
       * @param new_var the new value of m_status
       */
      void setStatus(TapeDriveStatusCodes new_var) {
        m_status = new_var;
      }

      /**
       * Get the value of m_tapeServer
       * @return the value of m_tapeServer
       */
      TapeServer* tapeServer() const {
        return m_tapeServer;
      }

      /**
       * Set the value of m_tapeServer
       * @param new_var the new value of m_tapeServer
       */
      void setTapeServer(TapeServer* new_var) {
        m_tapeServer = new_var;
      }

    private:

      int m_jobID;

      /// The time, when the tape drive begins with its job.
      int m_creationTime;

      /// Last time counters were reset
      int m_resettime;

      /// Usage counter (total number of VolReqs so far)
      int m_usecount;

      /// Drive error counter
      int m_errcount;

      /// MBytes transfered in last request.
      int m_transferredMB;

      /// Total MBytes transfered
      u_signed64 m_totalMB;

      std::string m_dedicate;

      /// Regexp optimization
      std::string m_newDedicate;

      short m_is_uid;

      short m_is_gid;

      short m_is_name;

      short m_no_uid;

      short m_no_gid;

      short m_no_name;

      short m_no_host;

      short m_no_vid;

      short m_no_mode;

      short m_no_date;

      short m_no_time;

      short m_no_age;

      long m_uid;

      long m_gid;

      std::string m_name;

      /// The id of this object
      u_signed64 m_id;

      castor::stager::Tape* m_tape;

      std::vector<ExtendedDeviceGroup*> m_extDevGrpVector;

      TapeDriveStatusCodes m_status;

      TapeServer* m_tapeServer;

    }; // end of class TapeDrive

  }; // end of namespace vdqm

}; // end of namespace castor

#endif // CASTOR_VDQM_TAPEDRIVE_HPP
