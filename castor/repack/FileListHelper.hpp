/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/repack/FileListHelper.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile: FileListHelper.hpp,v $ $Revision: 1.5 $ $Release$ $Date: 2006/02/14 15:33:41 $ $Author: felixehm $
 *
 * The Filelisthelper offers some little functions for getting the file 
 * information for a tape.
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_REPACK_FILELISTHELPER_HPP
#define CASTOR_REPACK_FILELISTHELPER_HPP

// Include Files

#include "castor/repack/RepackCommonHeader.hpp"
#include "osdep.h"
#include "Cns_api.h"
#include <common.h>
#include <map>
#include <vector>

namespace castor {

  namespace repack {

    /**
     * class FileListHelper
     */
    class FileListHelper {

    public:

      /**
       * Empty Constructor, initialises with the nameserver given by the castor
       * config file.
       * @throws castor::exception::Internal if no entry is found in the config file.
       */
      FileListHelper() throw (castor::exception::Internal);
      
      /**
       * Contructor, which initialises the FilelistHelper 
       * with a special nameserver
       */
      FileListHelper(std::string nameserver);

      /**
       * Empty Destructor
       */
      virtual ~FileListHelper();

      /**
       * Returns a vector with a filelist with full pathname.
       * @param rreq The Request of the Tape
       */
      std::vector<u_signed64>* getFileList(
      							castor::repack::RepackSubRequest *sreq, Cuuid_t& cuuid) throw();

      /**
       * Fills the Request with the segments on the tape
       * elements
       * @param vid The Request of the Tape
       */
      int getFileListSegs(castor::repack::RepackSubRequest *sreq, Cuuid_t& cuuid);
      
      
      std::vector<std::string>* getFilePathnames(
								castor::repack::RepackSubRequest *subreq, Cuuid_t& cuuid) throw();
                          
	private:
		/**
		 * The nameserver this Class contacts
		 */
		char* m_ns;
		
    }; // end of class FileListHelper

  }; // end of namespace repack

}; // end of namespace castor

#endif // CASTOR_REPACK_FILELISTHELPER_HPP
