/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/repack/RepackSegment.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_REPACK_REPACKSEGMENT_HPP
#define CASTOR_REPACK_REPACKSEGMENT_HPP

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace repack {

    // Forward declarations
    class RepackSubRequest;

    /**
     * class RepackSegment
     */
    class RepackSegment : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      RepackSegment() throw();

      /**
       * Empty Destructor
       */
      virtual ~RepackSegment() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_fileid
       * @return the value of m_fileid
       */
      u_signed64 fileid() const {
        return m_fileid;
      }

      /**
       * Set the value of m_fileid
       * @param new_var the new value of m_fileid
       */
      void setFileid(u_signed64 new_var) {
        m_fileid = new_var;
      }

      /**
       * Get the value of m_segsize
       * @return the value of m_segsize
       */
      u_signed64 segsize() const {
        return m_segsize;
      }

      /**
       * Set the value of m_segsize
       * @param new_var the new value of m_segsize
       */
      void setSegsize(u_signed64 new_var) {
        m_segsize = new_var;
      }

      /**
       * Get the value of m_compression
       * @return the value of m_compression
       */
      int compression() const {
        return m_compression;
      }

      /**
       * Set the value of m_compression
       * @param new_var the new value of m_compression
       */
      void setCompression(int new_var) {
        m_compression = new_var;
      }

      /**
       * Get the value of m_filesec
       * @return the value of m_filesec
       */
      int filesec() const {
        return m_filesec;
      }

      /**
       * Set the value of m_filesec
       * @param new_var the new value of m_filesec
       */
      void setFilesec(int new_var) {
        m_filesec = new_var;
      }

      /**
       * Get the value of m_copyno
       * @return the value of m_copyno
       */
      int copyno() const {
        return m_copyno;
      }

      /**
       * Set the value of m_copyno
       * @param new_var the new value of m_copyno
       */
      void setCopyno(int new_var) {
        m_copyno = new_var;
      }

      /**
       * Get the value of m_blockid
       * @return the value of m_blockid
       */
      u_signed64 blockid() const {
        return m_blockid;
      }

      /**
       * Set the value of m_blockid
       * @param new_var the new value of m_blockid
       */
      void setBlockid(u_signed64 new_var) {
        m_blockid = new_var;
      }

      /**
       * Get the value of m_fileseq
       * @return the value of m_fileseq
       */
      u_signed64 fileseq() const {
        return m_fileseq;
      }

      /**
       * Set the value of m_fileseq
       * @param new_var the new value of m_fileseq
       */
      void setFileseq(u_signed64 new_var) {
        m_fileseq = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Get the value of m_subrequest
       * @return the value of m_subrequest
       */
      RepackSubRequest* subrequest() const {
        return m_subrequest;
      }

      /**
       * Set the value of m_subrequest
       * @param new_var the new value of m_subrequest
       */
      void setSubrequest(RepackSubRequest* new_var) {
        m_subrequest = new_var;
      }

    private:

      u_signed64 m_fileid;

      u_signed64 m_segsize;

      int m_compression;

      int m_filesec;

      int m_copyno;

      u_signed64 m_blockid;

      u_signed64 m_fileseq;

      /// The id of this object
      u_signed64 m_id;

      RepackSubRequest* m_subrequest;

    }; /* end of class RepackSegment */

  } /* end of namespace repack */

} /* end of namespace castor */

#endif // CASTOR_REPACK_REPACKSEGMENT_HPP
