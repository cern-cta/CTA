/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "castor/Constants.hpp"
#include "castor/IObject.hpp"
#include "castor/ObjectSet.hpp"
#include "castor/repack/RepackSegment.hpp"
#include "castor/repack/RepackSubRequest.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::repack::RepackSegment::RepackSegment() throw() :
  m_fileid(0),
  m_compression(0),
  m_segsize(0),
  m_filesec(0),
  m_copyno(0),
  m_id(0),
  m_vid(0) {
};

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::repack::RepackSegment::~RepackSegment() throw() {
  if (0 != m_vid) {
    m_vid->removeSegment(this);
  }
};

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::repack::RepackSegment::print(std::ostream& stream,
                                          std::string indent,
                                          castor::ObjectSet& alreadyPrinted) const {
  stream << indent << "[# RepackSegment #]" << std::endl;
  if (alreadyPrinted.find(this) != alreadyPrinted.end()) {
    // Circular dependency, this object was already printed
    stream << indent << "Back pointer, see above" << std::endl;
    return;
  }
  // Output of all members
  stream << indent << "fileid : " << m_fileid << std::endl;
  stream << indent << "compression : " << m_compression << std::endl;
  stream << indent << "segsize : " << m_segsize << std::endl;
  stream << indent << "filesec : " << m_filesec << std::endl;
  stream << indent << "copyno : " << m_copyno << std::endl;
  stream << indent << "id : " << m_id << std::endl;
  alreadyPrinted.insert(this);
  stream << indent << "Vid : " << std::endl;
  if (0 != m_vid) {
    m_vid->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
}

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::repack::RepackSegment::print() const {
  castor::ObjectSet alreadyPrinted;
  print(std::cout, "", alreadyPrinted);
}

//------------------------------------------------------------------------------
// TYPE
//------------------------------------------------------------------------------
int castor::repack::RepackSegment::TYPE() {
  return OBJ_RepackSegment;
}

//------------------------------------------------------------------------------
// type
//------------------------------------------------------------------------------
int castor::repack::RepackSegment::type() const {
  return TYPE();
}

//------------------------------------------------------------------------------
// clone
//------------------------------------------------------------------------------
castor::IObject* castor::repack::RepackSegment::clone() {
  return new RepackSegment(*this);
}

