/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/repack/DatabaseHelper.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile: DatabaseHelper.hpp,v $ $Revision: 1.8 $ $Release$ $Date: 2006/02/23 12:36:03 $ $Author: felixehm $
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_REPACK_DATABASEHELPER_HPP
#define CASTOR_REPACK_DATABASEHELPER_HPP

// Include Files
#include "castor/repack/RepackCommonHeader.hpp"
#include <vector>
#include "castor/BaseAddress.hpp"
#include "castor/Services.hpp"
#include "castor/db/DbBaseObj.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/SQLError.hpp"
#include "stager_client_api.h"

namespace castor {
	
  namespace repack {

    // Forward declarations
    class RepackRequest;
    class IObject;
	class Services;
    

    /**
     * class DatabaseHelper
     * 
     */
    class DatabaseHelper  : public castor::db::DbBaseObj{

    public:

      /**
       * Empty Constructor
       */
      DatabaseHelper() throw();

      /**
       * Empty Destructor
       */
      virtual ~DatabaseHelper() throw();

      /**
       * Stores a RepackRequest in the Database
       * @param rreq The RepackRequest
       */
      void storeRequest(castor::repack::RepackRequest* rreq) 
					throw(castor::exception::Internal);


      /**
	   * Selects the next request the Repack daemon should deal with.
	   * It returns a RepackSubRequest, so directly the tape to repack.
	   * The corresponding main Request can be fetched by TODO:: <other function>>
 	   * TODO: select statement
	   * 
	   * @return the Request to process
	   * @exception Exception in case of error
	   */
	  castor::repack::RepackSubRequest* requestToDo() 
					throw (castor::exception::Exception);



	  

	  /**
       * Resets the converter. In particular any prepared
       * statements are destroyed.
       */
      virtual void reset() throw();

      /**
       * updates the RepackSubRequest. For logging purpose the cuuid is given as
       * parameter.
       */
      void updateSubRequest(castor::repack::RepackSubRequest* obj, Cuuid_t& cuuid) throw ();

	  /**
	   * Checks the RepackDB for SubRequests in a certain status.
	   * TODO: select statement
	   */
	  RepackSubRequest* checkSubRequestStatus(int status) throw();
	  
	  void remove(castor::IObject* obj) throw() ;

	  RepackSubRequest* getSubRequestByVid(std::string vid) throw();
      /**
       * Checks,wether a Tape is already stored in the RepackSubRequest Table.
       * This is needed before a Tape is inserted as a new repackjob.
       */
      bool is_stored(std::string vid) throw();
      private:
      
        /**
         * Little Helper to get a get a SubRequest from DB.
         */
	  	RepackSubRequest* DatabaseHelper::getSubRequest(u_signed64 sub_id) throw();
      
      /// SQL statement for function ToDo
        static const std::string m_selectToDoStatementString;
        castor::db::IDbStatement *m_selectToDoStatement;

        static const std::string m_selectCheckStatementString;
        castor::db::IDbStatement *m_selectCheckStatement;
        
        static const std::string m_selectCheckSubRequestStatementString;
        castor::db::IDbStatement *m_selectCheckSubRequestStatement;
      
      
		castor::BaseAddress ad;
      
    }; // end of class DatabaseHelper

  }; // end of namespace repack

}; // end of namespace castor

#endif // CASTOR_REPACK_DATABASEHELPER_HPP
