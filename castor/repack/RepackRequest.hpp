/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/repack/RepackRequest.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_REPACK_REPACKREQUEST_HPP
#define CASTOR_REPACK_REPACKREQUEST_HPP

// Include Files
#include "castor/IObject.hpp"
#include "castor/repack/RepackCommandCode.hpp"
#include "osdep.h"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace repack {

    // Forward declarations
    class RepackSubRequest;

    /**
     * class RepackRequest
     */
    class RepackRequest : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      RepackRequest() throw();

      /**
       * Empty Destructor
       */
      virtual ~RepackRequest() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_machine
       * @return the value of m_machine
       */
      std::string machine() const {
        return m_machine;
      }

      /**
       * Set the value of m_machine
       * @param new_var the new value of m_machine
       */
      void setMachine(std::string new_var) {
        m_machine = new_var;
      }

      /**
       * Get the value of m_userName
       * @return the value of m_userName
       */
      std::string userName() const {
        return m_userName;
      }

      /**
       * Set the value of m_userName
       * @param new_var the new value of m_userName
       */
      void setUserName(std::string new_var) {
        m_userName = new_var;
      }

      /**
       * Get the value of m_creationTime
       * @return the value of m_creationTime
       */
      u_signed64 creationTime() const {
        return m_creationTime;
      }

      /**
       * Set the value of m_creationTime
       * @param new_var the new value of m_creationTime
       */
      void setCreationTime(u_signed64 new_var) {
        m_creationTime = new_var;
      }

      /**
       * Get the value of m_pool
       * @return the value of m_pool
       */
      std::string pool() const {
        return m_pool;
      }

      /**
       * Set the value of m_pool
       * @param new_var the new value of m_pool
       */
      void setPool(std::string new_var) {
        m_pool = new_var;
      }

      /**
       * Get the value of m_pid
       * @return the value of m_pid
       */
      u_signed64 pid() const {
        return m_pid;
      }

      /**
       * Set the value of m_pid
       * @param new_var the new value of m_pid
       */
      void setPid(u_signed64 new_var) {
        m_pid = new_var;
      }

      /**
       * Get the value of m_svcclass
       * @return the value of m_svcclass
       */
      std::string svcclass() const {
        return m_svcclass;
      }

      /**
       * Set the value of m_svcclass
       * @param new_var the new value of m_svcclass
       */
      void setSvcclass(std::string new_var) {
        m_svcclass = new_var;
      }

      /**
       * Get the value of m_stager
       * @return the value of m_stager
       */
      std::string stager() const {
        return m_stager;
      }

      /**
       * Set the value of m_stager
       * @param new_var the new value of m_stager
       */
      void setStager(std::string new_var) {
        m_stager = new_var;
      }

      /**
       * Get the value of m_userId
       * @return the value of m_userId
       */
      int userId() const {
        return m_userId;
      }

      /**
       * Set the value of m_userId
       * @param new_var the new value of m_userId
       */
      void setUserId(int new_var) {
        m_userId = new_var;
      }

      /**
       * Get the value of m_groupId
       * @return the value of m_groupId
       */
      int groupId() const {
        return m_groupId;
      }

      /**
       * Set the value of m_groupId
       * @param new_var the new value of m_groupId
       */
      void setGroupId(int new_var) {
        m_groupId = new_var;
      }

      /**
       * Get the value of m_retryMax
       * @return the value of m_retryMax
       */
      u_signed64 retryMax() const {
        return m_retryMax;
      }

      /**
       * Set the value of m_retryMax
       * @param new_var the new value of m_retryMax
       */
      void setRetryMax(u_signed64 new_var) {
        m_retryMax = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Add a RepackSubRequest* object to the m_repacksubrequestVector list
       */
      void addRepacksubrequest(RepackSubRequest* add_object) {
        m_repacksubrequestVector.push_back(add_object);
      }

      /**
       * Remove a RepackSubRequest* object from m_repacksubrequestVector
       */
      void removeRepacksubrequest(RepackSubRequest* remove_object) {
        for (unsigned int i = 0; i < m_repacksubrequestVector.size(); i++) {
          RepackSubRequest* item = m_repacksubrequestVector[i];
          if (item == remove_object) {
            std::vector<RepackSubRequest*>::iterator it = m_repacksubrequestVector.begin() + i;
            m_repacksubrequestVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of RepackSubRequest* objects held by m_repacksubrequestVector
       * @return list of RepackSubRequest* objects held by m_repacksubrequestVector
       */
      std::vector<RepackSubRequest*>& repacksubrequest() {
        return m_repacksubrequestVector;
      }

      /**
       * Get the value of m_command
       * @return the value of m_command
       */
      RepackCommandCode command() const {
        return m_command;
      }

      /**
       * Set the value of m_command
       * @param new_var the new value of m_command
       */
      void setCommand(RepackCommandCode new_var) {
        m_command = new_var;
      }

    private:

      std::string m_machine;

      std::string m_userName;

      u_signed64 m_creationTime;

      std::string m_pool;

      u_signed64 m_pid;

      std::string m_svcclass;

      std::string m_stager;

      int m_userId;

      int m_groupId;

      u_signed64 m_retryMax;

      /// The id of this object
      u_signed64 m_id;

      std::vector<RepackSubRequest*> m_repacksubrequestVector;

      RepackCommandCode m_command;

    }; /* end of class RepackRequest */

  } /* end of namespace repack */

} /* end of namespace castor */

#endif // CASTOR_REPACK_REPACKREQUEST_HPP
