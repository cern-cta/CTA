/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_RH_RESPONSE_HPP
#define CASTOR_RH_RESPONSE_HPP

// Include Files
#include "castor/IObject.hpp"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace rh {

    /**
     * class Response
     * The base class for all responses send back to the client
     */
    class Response : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      Response() throw();

      /**
       * Empty Destructor
       */
      virtual ~Response() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Get the value of m_errorCode
       * The error code in case of error
       * @return the value of m_errorCode
       */
      unsigned int errorCode() const {
        return m_errorCode;
      }

      /**
       * Set the value of m_errorCode
       * The error code in case of error
       * @param new_var the new value of m_errorCode
       */
      void setErrorCode(unsigned int new_var) {
        m_errorCode = new_var;
      }

      /**
       * Get the value of m_errorMessage
       * The error message in case of error
       * @return the value of m_errorMessage
       */
      std::string errorMessage() const {
        return m_errorMessage;
      }

      /**
       * Set the value of m_errorMessage
       * The error message in case of error
       * @param new_var the new value of m_errorMessage
       */
      void setErrorMessage(std::string new_var) {
        m_errorMessage = new_var;
      }

    private:

      /// The error code in case of error
      unsigned int m_errorCode;

      /// The error message in case of error
      std::string m_errorMessage;

    }; // end of class Response

  }; // end of namespace rh

}; // end of namespace castor

#endif // CASTOR_RH_RESPONSE_HPP
