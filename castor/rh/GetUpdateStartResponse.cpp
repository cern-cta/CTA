/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "castor/Constants.hpp"
#include "castor/IObject.hpp"
#include "castor/ObjectSet.hpp"
#include "castor/rh/GetUpdateStartResponse.hpp"
#include "castor/rh/StartResponse.hpp"
#include "castor/stager/DiskCopyForRecall.hpp"
#include <iostream>
#include <string>
#include <vector>

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::rh::GetUpdateStartResponse::GetUpdateStartResponse() throw() :
  StartResponse(),
  m_emptyFile(false) {
};

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::rh::GetUpdateStartResponse::~GetUpdateStartResponse() throw() {
  m_sourcesVector.clear();
};

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::rh::GetUpdateStartResponse::print(std::ostream& stream,
                                               std::string indent,
                                               castor::ObjectSet& alreadyPrinted) const {
  stream << indent << "[# GetUpdateStartResponse #]" << std::endl;
  if (alreadyPrinted.find(this) != alreadyPrinted.end()) {
    // Circular dependency, this object was already printed
    stream << indent << "Back pointer, see above" << std::endl;
    return;
  }
  // Call print on the parent class(es)
  this->StartResponse::print(stream, indent, alreadyPrinted);
  // Output of all members
  stream << indent << "emptyFile : " << m_emptyFile << std::endl;
  alreadyPrinted.insert(this);
  {
    stream << indent << "Sources : " << std::endl;
    int i;
    std::vector<castor::stager::DiskCopyForRecall*>::const_iterator it;
    for (it = m_sourcesVector.begin(), i = 0;
         it != m_sourcesVector.end();
         it++, i++) {
      stream << indent << "  " << i << " :" << std::endl;
      (*it)->print(stream, indent + "    ", alreadyPrinted);
    }
  }
}

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::rh::GetUpdateStartResponse::print() const {
  castor::ObjectSet alreadyPrinted;
  print(std::cout, "", alreadyPrinted);
}

//------------------------------------------------------------------------------
// TYPE
//------------------------------------------------------------------------------
int castor::rh::GetUpdateStartResponse::TYPE() {
  return OBJ_GetUpdateStartResponse;
}

//------------------------------------------------------------------------------
// type
//------------------------------------------------------------------------------
int castor::rh::GetUpdateStartResponse::type() const {
  return TYPE();
}

//------------------------------------------------------------------------------
// clone
//------------------------------------------------------------------------------
castor::IObject* castor::rh::GetUpdateStartResponse::clone() {
  return new GetUpdateStartResponse(*this);
}

