/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_REQIDREQUEST_HPP
#define CASTOR_STAGER_REQIDREQUEST_HPP

// Include Files
#include "castor/stager/Request.hpp"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    // Forward declarations
    class FileRequest;

    /**
     * class ReqIdRequest
     * An abstract ancester for all requests refering to another one
     */
    class ReqIdRequest : public virtual Request {

    public:

      /**
       * Empty Constructor
       */
      ReqIdRequest() throw();

      /**
       * Empty Destructor
       */
      virtual ~ReqIdRequest() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Get the value of m_parentUuid
       * The UUID of the parent request. This is used by clients to build the request and
       * @return the value of m_parentUuid
       */
      std::string parentUuid() const {
        return m_parentUuid;
      }

      /**
       * Set the value of m_parentUuid
       * The UUID of the parent request. This is used by clients to build the request and
       * @param new_var the new value of m_parentUuid
       */
      void setParentUuid(std::string new_var) {
        m_parentUuid = new_var;
      }

      /**
       * Get the value of m_parent
       * @return the value of m_parent
       */
      FileRequest* parent() const {
        return m_parent;
      }

      /**
       * Set the value of m_parent
       * @param new_var the new value of m_parent
       */
      void setParent(FileRequest* new_var) {
        m_parent = new_var;
      }

    private:

      /// The UUID of the parent request. This is used by clients to build the request and is converted to a link to an existing FileRequest in the stager
      std::string m_parentUuid;

      FileRequest* m_parent;

    }; // end of class ReqIdRequest

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_REQIDREQUEST_HPP
