/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_CASTORFILE_HPP
#define CASTOR_STAGER_CASTORFILE_HPP

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    // Forward declarations
    class TapeCopy;
    class SvcClass;
    class FileClass;
    class DiskCopy;

    /**
     * class CastorFile
     * A castor file.
     */
    class CastorFile : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      CastorFile() throw();

      /**
       * Empty Destructor
       */
      virtual ~CastorFile() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_fileId
       * The id of this castor file. This identifies it uniquely
       * @return the value of m_fileId
       */
      u_signed64 fileId() const {
        return m_fileId;
      }

      /**
       * Set the value of m_fileId
       * The id of this castor file. This identifies it uniquely
       * @param new_var the new value of m_fileId
       */
      void setFileId(u_signed64 new_var) {
        m_fileId = new_var;
      }

      /**
       * Get the value of m_nsHost
       * The name server hosting this castor file
       * @return the value of m_nsHost
       */
      std::string nsHost() const {
        return m_nsHost;
      }

      /**
       * Set the value of m_nsHost
       * The name server hosting this castor file
       * @param new_var the new value of m_nsHost
       */
      void setNsHost(std::string new_var) {
        m_nsHost = new_var;
      }

      /**
       * Get the value of m_fileSize
       * Size of the file
       * @return the value of m_fileSize
       */
      u_signed64 fileSize() const {
        return m_fileSize;
      }

      /**
       * Set the value of m_fileSize
       * Size of the file
       * @param new_var the new value of m_fileSize
       */
      void setFileSize(u_signed64 new_var) {
        m_fileSize = new_var;
      }

      /**
       * Get the value of m_creationTime
       * Time when this instance of a CastorFile was created
       * @return the value of m_creationTime
       */
      u_signed64 creationTime() const {
        return m_creationTime;
      }

      /**
       * Set the value of m_creationTime
       * Time when this instance of a CastorFile was created
       * @param new_var the new value of m_creationTime
       */
      void setCreationTime(u_signed64 new_var) {
        m_creationTime = new_var;
      }

      /**
       * Get the value of m_lastAccessTime
       * Time of the last access to this CastorFile
       * @return the value of m_lastAccessTime
       */
      u_signed64 lastAccessTime() const {
        return m_lastAccessTime;
      }

      /**
       * Set the value of m_lastAccessTime
       * Time of the last access to this CastorFile
       * @param new_var the new value of m_lastAccessTime
       */
      void setLastAccessTime(u_signed64 new_var) {
        m_lastAccessTime = new_var;
      }

      /**
       * Get the value of m_nbAccesses
       * Number of accesses to this CastorFile since its creation
       * @return the value of m_nbAccesses
       */
      unsigned int nbAccesses() const {
        return m_nbAccesses;
      }

      /**
       * Set the value of m_nbAccesses
       * Number of accesses to this CastorFile since its creation
       * @param new_var the new value of m_nbAccesses
       */
      void setNbAccesses(unsigned int new_var) {
        m_nbAccesses = new_var;
      }

      /**
       * Get the value of m_lastKnownFileName
       * The name of the castorfile at the time it was created in this database. This can
       * This information is only here for efficient and approximate querying. It should
       * @return the value of m_lastKnownFileName
       */
      std::string lastKnownFileName() const {
        return m_lastKnownFileName;
      }

      /**
       * Set the value of m_lastKnownFileName
       * The name of the castorfile at the time it was created in this database. This can
       * This information is only here for efficient and approximate querying. It should
       * @param new_var the new value of m_lastKnownFileName
       */
      void setLastKnownFileName(std::string new_var) {
        m_lastKnownFileName = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Get the value of m_svcClass
       * @return the value of m_svcClass
       */
      SvcClass* svcClass() const {
        return m_svcClass;
      }

      /**
       * Set the value of m_svcClass
       * @param new_var the new value of m_svcClass
       */
      void setSvcClass(SvcClass* new_var) {
        m_svcClass = new_var;
      }

      /**
       * Get the value of m_fileClass
       * @return the value of m_fileClass
       */
      FileClass* fileClass() const {
        return m_fileClass;
      }

      /**
       * Set the value of m_fileClass
       * @param new_var the new value of m_fileClass
       */
      void setFileClass(FileClass* new_var) {
        m_fileClass = new_var;
      }

      /**
       * Add a DiskCopy* object to the m_diskCopiesVector list
       */
      void addDiskCopies(DiskCopy* add_object) {
        m_diskCopiesVector.push_back(add_object);
      }

      /**
       * Remove a DiskCopy* object from m_diskCopiesVector
       */
      void removeDiskCopies(DiskCopy* remove_object) {
        for (unsigned int i = 0; i < m_diskCopiesVector.size(); i++) {
          DiskCopy* item = m_diskCopiesVector[i];
          if (item == remove_object) {
            std::vector<DiskCopy*>::iterator it = m_diskCopiesVector.begin() + i;
            m_diskCopiesVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of DiskCopy* objects held by m_diskCopiesVector
       * @return list of DiskCopy* objects held by m_diskCopiesVector
       */
      std::vector<DiskCopy*>& diskCopies() {
        return m_diskCopiesVector;
      }

      /**
       * Add a TapeCopy* object to the m_tapeCopiesVector list
       */
      void addTapeCopies(TapeCopy* add_object) {
        m_tapeCopiesVector.push_back(add_object);
      }

      /**
       * Remove a TapeCopy* object from m_tapeCopiesVector
       */
      void removeTapeCopies(TapeCopy* remove_object) {
        for (unsigned int i = 0; i < m_tapeCopiesVector.size(); i++) {
          TapeCopy* item = m_tapeCopiesVector[i];
          if (item == remove_object) {
            std::vector<TapeCopy*>::iterator it = m_tapeCopiesVector.begin() + i;
            m_tapeCopiesVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of TapeCopy* objects held by m_tapeCopiesVector
       * @return list of TapeCopy* objects held by m_tapeCopiesVector
       */
      std::vector<TapeCopy*>& tapeCopies() {
        return m_tapeCopiesVector;
      }

    private:

      /// The id of this castor file. This identifies it uniquely
      u_signed64 m_fileId;

      /// The name server hosting this castor file
      std::string m_nsHost;

      /// Size of the file
      u_signed64 m_fileSize;

      /// Time when this instance of a CastorFile was created
      u_signed64 m_creationTime;

      /// Time of the last access to this CastorFile
      u_signed64 m_lastAccessTime;

      /// Number of accesses to this CastorFile since its creation
      unsigned int m_nbAccesses;

      /*
       * The name of the castorfile at the time it was created in this database. This can very well be different from the current name if the file was renamed.
       * This information is only here for efficient and approximate querying. It should never be used in processing. There, only the fileid/nshost couple is trustable
      */
      std::string m_lastKnownFileName;

      /// The id of this object
      u_signed64 m_id;

      SvcClass* m_svcClass;

      FileClass* m_fileClass;

      std::vector<DiskCopy*> m_diskCopiesVector;

      std::vector<TapeCopy*> m_tapeCopiesVector;

    }; // end of class CastorFile

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_CASTORFILE_HPP
