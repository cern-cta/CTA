/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/stager/ClientIdentification.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_STAGER_CLIENTIDENTIFICATION_HPP
#define CASTOR_STAGER_CLIENTIDENTIFICATION_HPP

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    /**
     * class ClientIdentification
     * An object to store all client related informations. In future this should be
     * replaced by an abstract class to support also other identification methods, like
     */
    class ClientIdentification : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      ClientIdentification() throw();

      /**
       * Empty Destructor
       */
      virtual ~ClientIdentification() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_machine
       * @return the value of m_machine
       */
      std::string machine() const {
        return m_machine;
      }

      /**
       * Set the value of m_machine
       * @param new_var the new value of m_machine
       */
      void setMachine(std::string new_var) {
        m_machine = new_var;
      }

      /**
       * Get the value of m_userName
       * @return the value of m_userName
       */
      std::string userName() const {
        return m_userName;
      }

      /**
       * Set the value of m_userName
       * @param new_var the new value of m_userName
       */
      void setUserName(std::string new_var) {
        m_userName = new_var;
      }

      /**
       * Get the value of m_port
       * The port, to where the client want to have send its messages. It is not used for
       * @return the value of m_port
       */
      int port() const {
        return m_port;
      }

      /**
       * Set the value of m_port
       * The port, to where the client want to have send its messages. It is not used for
       * @param new_var the new value of m_port
       */
      void setPort(int new_var) {
        m_port = new_var;
      }

      /**
       * Get the value of m_euid
       * @return the value of m_euid
       */
      int euid() const {
        return m_euid;
      }

      /**
       * Set the value of m_euid
       * @param new_var the new value of m_euid
       */
      void setEuid(int new_var) {
        m_euid = new_var;
      }

      /**
       * Get the value of m_egid
       * @return the value of m_egid
       */
      int egid() const {
        return m_egid;
      }

      /**
       * Set the value of m_egid
       * @param new_var the new value of m_egid
       */
      void setEgid(int new_var) {
        m_egid = new_var;
      }

      /**
       * Get the value of m_magic
       * Specifies the protocol, which is using the client
       * @return the value of m_magic
       */
      int magic() const {
        return m_magic;
      }

      /**
       * Set the value of m_magic
       * Specifies the protocol, which is using the client
       * @param new_var the new value of m_magic
       */
      void setMagic(int new_var) {
        m_magic = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

    private:

      std::string m_machine;

      std::string m_userName;

      /// The port, to where the client want to have send its messages. It is not used for TapeDrive at the moment.
      int m_port;

      int m_euid;

      int m_egid;

      /// Specifies the protocol, which is using the client
      int m_magic;

      /// The id of this object
      u_signed64 m_id;

    }; // end of class ClientIdentification

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_CLIENTIDENTIFICATION_HPP
