/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_DISKCOPYINFO_HPP
#define CASTOR_STAGER_DISKCOPYINFO_HPP

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    /**
     * class DiskCopyInfo
     */
    class DiskCopyInfo : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      DiskCopyInfo() throw();

      /**
       * Empty Destructor
       */
      virtual ~DiskCopyInfo() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_DiskCopyPath
       * Path of the DiskCopy described
       * @return the value of m_DiskCopyPath
       */
      std::string DiskCopyPath() const {
        return m_DiskCopyPath;
      }

      /**
       * Set the value of m_DiskCopyPath
       * Path of the DiskCopy described
       * @param new_var the new value of m_DiskCopyPath
       */
      void setDiskCopyPath(std::string new_var) {
        m_DiskCopyPath = new_var;
      }

      /**
       * Get the value of m_size
       * Size of the underlying CastorFile
       * @return the value of m_size
       */
      u_signed64 size() const {
        return m_size;
      }

      /**
       * Set the value of m_size
       * Size of the underlying CastorFile
       * @param new_var the new value of m_size
       */
      void setSize(u_signed64 new_var) {
        m_size = new_var;
      }

      /**
       * Get the value of m_diskCopyStatus
       * Status of the DiskCopy described
       * @return the value of m_diskCopyStatus
       */
      int diskCopyStatus() const {
        return m_diskCopyStatus;
      }

      /**
       * Set the value of m_diskCopyStatus
       * Status of the DiskCopy described
       * @param new_var the new value of m_diskCopyStatus
       */
      void setDiskCopyStatus(int new_var) {
        m_diskCopyStatus = new_var;
      }

      /**
       * Get the value of m_tapeCopyStatus
       * Status of the tapeCopy(ies?) associated to the underlying CastorFile
       * @return the value of m_tapeCopyStatus
       */
      int tapeCopyStatus() const {
        return m_tapeCopyStatus;
      }

      /**
       * Set the value of m_tapeCopyStatus
       * Status of the tapeCopy(ies?) associated to the underlying CastorFile
       * @param new_var the new value of m_tapeCopyStatus
       */
      void setTapeCopyStatus(int new_var) {
        m_tapeCopyStatus = new_var;
      }

      /**
       * Get the value of m_segmentStatus
       * Status of the segment(s?) associated to the underlying CastorFile
       * @return the value of m_segmentStatus
       */
      int segmentStatus() const {
        return m_segmentStatus;
      }

      /**
       * Set the value of m_segmentStatus
       * Status of the segment(s?) associated to the underlying CastorFile
       * @param new_var the new value of m_segmentStatus
       */
      void setSegmentStatus(int new_var) {
        m_segmentStatus = new_var;
      }

      /**
       * Get the value of m_DiskCopyId
       * Id of the DiskCopy Described
       * @return the value of m_DiskCopyId
       */
      u_signed64 DiskCopyId() const {
        return m_DiskCopyId;
      }

      /**
       * Set the value of m_DiskCopyId
       * Id of the DiskCopy Described
       * @param new_var the new value of m_DiskCopyId
       */
      void setDiskCopyId(u_signed64 new_var) {
        m_DiskCopyId = new_var;
      }

      /**
       * Get the value of m_fileId
       * fileId of the underlying castorfile
       * @return the value of m_fileId
       */
      u_signed64 fileId() const {
        return m_fileId;
      }

      /**
       * Set the value of m_fileId
       * fileId of the underlying castorfile
       * @param new_var the new value of m_fileId
       */
      void setFileId(u_signed64 new_var) {
        m_fileId = new_var;
      }

      /**
       * Get the value of m_nsHost
       * name server host of the underlying castorfile
       * @return the value of m_nsHost
       */
      std::string nsHost() const {
        return m_nsHost;
      }

      /**
       * Set the value of m_nsHost
       * name server host of the underlying castorfile
       * @param new_var the new value of m_nsHost
       */
      void setNsHost(std::string new_var) {
        m_nsHost = new_var;
      }

      /**
       * Get the value of m_diskServer
       * Name of the DiskServer on which the Diskcopy resides
       * @return the value of m_diskServer
       */
      std::string diskServer() const {
        return m_diskServer;
      }

      /**
       * Set the value of m_diskServer
       * Name of the DiskServer on which the Diskcopy resides
       * @param new_var the new value of m_diskServer
       */
      void setDiskServer(std::string new_var) {
        m_diskServer = new_var;
      }

      /**
       * Get the value of m_mountPoint
       * mount point of the file system where the DiskCopy resides on the diskserver
       * @return the value of m_mountPoint
       */
      std::string mountPoint() const {
        return m_mountPoint;
      }

      /**
       * Set the value of m_mountPoint
       * mount point of the file system where the DiskCopy resides on the diskserver
       * @param new_var the new value of m_mountPoint
       */
      void setMountPoint(std::string new_var) {
        m_mountPoint = new_var;
      }

      /**
       * Get the value of m_nbAccesses
       * Number of accesses to the CastorFile this DiskCopy is linked with
       * @return the value of m_nbAccesses
       */
      unsigned int nbAccesses() const {
        return m_nbAccesses;
      }

      /**
       * Set the value of m_nbAccesses
       * Number of accesses to the CastorFile this DiskCopy is linked with
       * @param new_var the new value of m_nbAccesses
       */
      void setNbAccesses(unsigned int new_var) {
        m_nbAccesses = new_var;
      }

      /**
       * Get the value of m_lastKnownFileName
       * Last known file name for this file, from the stager point of view. This does not
       * @return the value of m_lastKnownFileName
       */
      std::string lastKnownFileName() const {
        return m_lastKnownFileName;
      }

      /**
       * Set the value of m_lastKnownFileName
       * Last known file name for this file, from the stager point of view. This does not
       * @param new_var the new value of m_lastKnownFileName
       */
      void setLastKnownFileName(std::string new_var) {
        m_lastKnownFileName = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

    private:

      /// Path of the DiskCopy described
      std::string m_DiskCopyPath;

      /// Size of the underlying CastorFile
      u_signed64 m_size;

      /// Status of the DiskCopy described
      int m_diskCopyStatus;

      /// Status of the tapeCopy(ies?) associated to the underlying CastorFile
      int m_tapeCopyStatus;

      /// Status of the segment(s?) associated to the underlying CastorFile
      int m_segmentStatus;

      /// Id of the DiskCopy Described
      u_signed64 m_DiskCopyId;

      /// fileId of the underlying castorfile
      u_signed64 m_fileId;

      /// name server host of the underlying castorfile
      std::string m_nsHost;

      /// Name of the DiskServer on which the Diskcopy resides
      std::string m_diskServer;

      /// mount point of the file system where the DiskCopy resides on the diskserver
      std::string m_mountPoint;

      /// Number of accesses to the CastorFile this DiskCopy is linked with
      unsigned int m_nbAccesses;

      /// Last known file name for this file, from the stager point of view. This does not mean it is the current one in the nameserver
      std::string m_lastKnownFileName;

      /// The id of this object
      u_signed64 m_id;

    }; // end of class DiskCopyInfo

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_DISKCOPYINFO_HPP
