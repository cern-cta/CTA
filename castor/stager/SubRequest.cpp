/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "castor/Constants.hpp"
#include "castor/IObject.hpp"
#include "castor/ObjectSet.hpp"
#include "castor/stager/CastorFile.hpp"
#include "castor/stager/DiskCopy.hpp"
#include "castor/stager/FileRequest.hpp"
#include "castor/stager/SubRequest.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::stager::SubRequest::SubRequest() throw() :
  m_retryCounter(0),
  m_fileName(""),
  m_protocol(""),
  m_xsize(0),
  m_priority(0),
  m_subreqId(""),
  m_flags(0),
  m_modeBits(0),
  m_creationTime(0),
  m_lastModificationTime(0),
  m_answered(0),
  m_repackVid(""),
  m_id(0),
  m_diskcopy(0),
  m_castorFile(0),
  m_parent(0),
  m_status(SubRequestStatusCodes(0)),
  m_request(0),
  m_getNextStatus(SubRequestGetNextStatusCodes(0)) {
};

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::stager::SubRequest::~SubRequest() throw() {
  if (0 != m_diskcopy) {
    m_diskcopy->removeSubRequests(this);
  }
  if (0 != m_parent) {
    m_parent->removeChild(this);
  }
  if (0 != m_request) {
    m_request->removeSubRequests(this);
  }
};

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::SubRequest::print(std::ostream& stream,
                                       std::string indent,
                                       castor::ObjectSet& alreadyPrinted) const {
  stream << indent << "[# SubRequest #]" << std::endl;
  if (alreadyPrinted.find(this) != alreadyPrinted.end()) {
    // Circular dependency, this object was already printed
    stream << indent << "Back pointer, see above" << std::endl;
    return;
  }
  // Output of all members
  stream << indent << "retryCounter : " << m_retryCounter << std::endl;
  stream << indent << "fileName : " << m_fileName << std::endl;
  stream << indent << "protocol : " << m_protocol << std::endl;
  stream << indent << "xsize : " << m_xsize << std::endl;
  stream << indent << "priority : " << m_priority << std::endl;
  stream << indent << "subreqId : " << m_subreqId << std::endl;
  stream << indent << "flags : " << m_flags << std::endl;
  stream << indent << "modeBits : " << m_modeBits << std::endl;
  stream << indent << "creationTime : " << m_creationTime << std::endl;
  stream << indent << "lastModificationTime : " << m_lastModificationTime << std::endl;
  stream << indent << "answered : " << m_answered << std::endl;
  stream << indent << "repackVid : " << m_repackVid << std::endl;
  stream << indent << "id : " << m_id << std::endl;
  alreadyPrinted.insert(this);
  stream << indent << "Diskcopy : " << std::endl;
  if (0 != m_diskcopy) {
    m_diskcopy->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
  stream << indent << "CastorFile : " << std::endl;
  if (0 != m_castorFile) {
    m_castorFile->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
  stream << indent << "Parent : " << std::endl;
  if (0 != m_parent) {
    m_parent->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
  stream << indent << "status : " << SubRequestStatusCodesStrings[m_status] << std::endl;
  stream << indent << "Request : " << std::endl;
  if (0 != m_request) {
    m_request->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
  stream << indent << "getNextStatus : " << SubRequestGetNextStatusCodesStrings[m_getNextStatus] << std::endl;
}

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::SubRequest::print() const {
  castor::ObjectSet alreadyPrinted;
  print(std::cout, "", alreadyPrinted);
}

//------------------------------------------------------------------------------
// TYPE
//------------------------------------------------------------------------------
int castor::stager::SubRequest::TYPE() {
  return OBJ_SubRequest;
}

//------------------------------------------------------------------------------
// type
//------------------------------------------------------------------------------
int castor::stager::SubRequest::type() const {
  return TYPE();
}

//------------------------------------------------------------------------------
// clone
//------------------------------------------------------------------------------
castor::IObject* castor::stager::SubRequest::clone() {
  return new SubRequest(*this);
}

