/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "castor/Constants.hpp"
#include "castor/IObject.hpp"
#include "castor/ObjectSet.hpp"
#include "castor/stager/DiskPool.hpp"
#include "castor/stager/FileSystem.hpp"
#include "castor/stager/SvcClass.hpp"
#include "osdep.h"
#include <iostream>
#include <string>
#include <vector>

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::stager::DiskPool::DiskPool() throw() :
  m_name(""),
  m_id(0) {
};

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::stager::DiskPool::~DiskPool() throw() {
  for (unsigned int i = 0; i < m_fileSystemsVector.size(); i++) {
    m_fileSystemsVector[i]->setDiskPool(0);
  }
  m_fileSystemsVector.clear();
  for (unsigned int i = 0; i < m_svcClassesVector.size(); i++) {
    m_svcClassesVector[i]->removeDiskPools(this);
  }
  m_svcClassesVector.clear();
};

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::DiskPool::print(std::ostream& stream,
                                     std::string indent,
                                     castor::ObjectSet& alreadyPrinted) const {
  stream << indent << "[# DiskPool #]" << std::endl;
  if (alreadyPrinted.find(this) != alreadyPrinted.end()) {
    // Circular dependency, this object was already printed
    stream << indent << "Back pointer, see above" << std::endl;
    return;
  }
  // Output of all members
  stream << indent << "name : " << m_name << std::endl;
  stream << indent << "id : " << m_id << std::endl;
  alreadyPrinted.insert(this);
  {
    stream << indent << "FileSystems : " << std::endl;
    int i;
    std::vector<FileSystem*>::const_iterator it;
    for (it = m_fileSystemsVector.begin(), i = 0;
         it != m_fileSystemsVector.end();
         it++, i++) {
      stream << indent << "  " << i << " :" << std::endl;
      (*it)->print(stream, indent + "    ", alreadyPrinted);
    }
  }
  {
    stream << indent << "SvcClasses : " << std::endl;
    int i;
    std::vector<SvcClass*>::const_iterator it;
    for (it = m_svcClassesVector.begin(), i = 0;
         it != m_svcClassesVector.end();
         it++, i++) {
      stream << indent << "  " << i << " :" << std::endl;
      (*it)->print(stream, indent + "    ", alreadyPrinted);
    }
  }
}

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::DiskPool::print() const {
  castor::ObjectSet alreadyPrinted;
  print(std::cout, "", alreadyPrinted);
}

//------------------------------------------------------------------------------
// TYPE
//------------------------------------------------------------------------------
int castor::stager::DiskPool::TYPE() {
  return OBJ_DiskPool;
}

//------------------------------------------------------------------------------
// type
//------------------------------------------------------------------------------
int castor::stager::DiskPool::type() const {
  return TYPE();
}

//------------------------------------------------------------------------------
// clone
//------------------------------------------------------------------------------
castor::IObject* castor::stager::DiskPool::clone() {
  return new DiskPool(*this);
}

