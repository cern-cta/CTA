/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_QRYREQUEST_HPP
#define CASTOR_STAGER_QRYREQUEST_HPP

// Include Files
#include "castor/stager/Request.hpp"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    // Forward declarations
    class QueryParameter;

    /**
     * class QryRequest
     * An abstract ancester for all query requests
     */
    class QryRequest : public virtual Request {

    public:

      /**
       * Empty Constructor
       */
      QryRequest() throw();

      /**
       * Empty Destructor
       */
      virtual ~QryRequest() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Add a QueryParameter* object to the m_parametersVector list
       */
      void addParameters(QueryParameter* add_object) {
        m_parametersVector.push_back(add_object);
      }

      /**
       * Remove a QueryParameter* object from m_parametersVector
       */
      void removeParameters(QueryParameter* remove_object) {
        for (unsigned int i = 0; i < m_parametersVector.size(); i++) {
          QueryParameter* item = m_parametersVector[i];
          if (item == remove_object) {
            std::vector<QueryParameter*>::iterator it = m_parametersVector.begin() + i;
            m_parametersVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of QueryParameter* objects held by m_parametersVector
       * @return list of QueryParameter* objects held by m_parametersVector
       */
      std::vector<QueryParameter*>& parameters() {
        return m_parametersVector;
      }

    private:

      std::vector<QueryParameter*> m_parametersVector;

    }; // end of class QryRequest

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_QRYREQUEST_HPP
