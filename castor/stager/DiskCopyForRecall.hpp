/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_DISKCOPYFORRECALL_HPP
#define CASTOR_STAGER_DISKCOPYFORRECALL_HPP

// Include Files
#include "castor/stager/DiskCopy.hpp"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;
  class IObject;

  namespace stager {

    /**
     * class DiskCopyForRecall
     */
    class DiskCopyForRecall : public DiskCopy {

    public:

      /**
       * Empty Constructor
       */
      DiskCopyForRecall() throw();

      /**
       * Empty Destructor
       */
      virtual ~DiskCopyForRecall() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_mountPoint
       * The mountpoint of the filesystem where the file resides/should be put
       * @return the value of m_mountPoint
       */
      std::string mountPoint() const {
        return m_mountPoint;
      }

      /**
       * Set the value of m_mountPoint
       * The mountpoint of the filesystem where the file resides/should be put
       * @param new_var the new value of m_mountPoint
       */
      void setMountPoint(std::string new_var) {
        m_mountPoint = new_var;
      }

      /**
       * Get the value of m_diskServer
       * The disk server on which the file resides/should be put
       * @return the value of m_diskServer
       */
      std::string diskServer() const {
        return m_diskServer;
      }

      /**
       * Set the value of m_diskServer
       * The disk server on which the file resides/should be put
       * @param new_var the new value of m_diskServer
       */
      void setDiskServer(std::string new_var) {
        m_diskServer = new_var;
      }

      /**
       * Get the value of m_fsWeight
       * The weight of the filesystem on which the file resides/should be put
       * @return the value of m_fsWeight
       */
      float fsWeight() const {
        return m_fsWeight;
      }

      /**
       * Set the value of m_fsWeight
       * The weight of the filesystem on which the file resides/should be put
       * @param new_var the new value of m_fsWeight
       */
      void setFsWeight(float new_var) {
        m_fsWeight = new_var;
      }

    private:

      /// The mountpoint of the filesystem where the file resides/should be put
      std::string m_mountPoint;

      /// The disk server on which the file resides/should be put
      std::string m_diskServer;

      /// The weight of the filesystem on which the file resides/should be put
      float m_fsWeight;

    }; // end of class DiskCopyForRecall

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_DISKCOPYFORRECALL_HPP
