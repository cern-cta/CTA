/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_STARTREQUEST_HPP
#define CASTOR_STAGER_STARTREQUEST_HPP

// Include Files
#include "castor/stager/Request.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    /**
     * class StartRequest
     * Abstract class for all Job start requests
     */
    class StartRequest : public virtual Request {

    public:

      /**
       * Empty Constructor
       */
      StartRequest() throw();

      /**
       * Empty Destructor
       */
      virtual ~StartRequest() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Get the value of m_subreqId
       * The id of the subRequest that should be scheduled
       * @return the value of m_subreqId
       */
      u_signed64 subreqId() const {
        return m_subreqId;
      }

      /**
       * Set the value of m_subreqId
       * The id of the subRequest that should be scheduled
       * @param new_var the new value of m_subreqId
       */
      void setSubreqId(u_signed64 new_var) {
        m_subreqId = new_var;
      }

      /**
       * Get the value of m_diskServer
       * The name of the diskserver on which the selected filesystem for the given
       * @return the value of m_diskServer
       */
      std::string diskServer() const {
        return m_diskServer;
      }

      /**
       * Set the value of m_diskServer
       * The name of the diskserver on which the selected filesystem for the given
       * @param new_var the new value of m_diskServer
       */
      void setDiskServer(std::string new_var) {
        m_diskServer = new_var;
      }

      /**
       * Get the value of m_fileSystem
       * The mount point of the selected filesystem for the given SubRequest
       * @return the value of m_fileSystem
       */
      std::string fileSystem() const {
        return m_fileSystem;
      }

      /**
       * Set the value of m_fileSystem
       * The mount point of the selected filesystem for the given SubRequest
       * @param new_var the new value of m_fileSystem
       */
      void setFileSystem(std::string new_var) {
        m_fileSystem = new_var;
      }

    private:

      /// The id of the subRequest that should be scheduled
      u_signed64 m_subreqId;

      /// The name of the diskserver on which the selected filesystem for the given SubRequest resides
      std::string m_diskServer;

      /// The mount point of the selected filesystem for the given SubRequest
      std::string m_fileSystem;

    }; // end of class StartRequest

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_STARTREQUEST_HPP
