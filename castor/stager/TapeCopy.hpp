/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_TAPECOPY_HPP
#define CASTOR_STAGER_TAPECOPY_HPP

// Include Files
#include "castor/IObject.hpp"
#include "castor/stager/TapeCopyStatusCodes.hpp"
#include "osdep.h"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    // Forward declarations
    class Stream;
    class Segment;
    class CastorFile;

    /**
     * class TapeCopy
     * One copy of a given file on a tape
     */
    class TapeCopy : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      TapeCopy() throw();

      /**
       * Empty Destructor
       */
      virtual ~TapeCopy() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_copyNb
       * @return the value of m_copyNb
       */
      unsigned int copyNb() const {
        return m_copyNb;
      }

      /**
       * Set the value of m_copyNb
       * @param new_var the new value of m_copyNb
       */
      void setCopyNb(unsigned int new_var) {
        m_copyNb = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Add a Stream* object to the m_streamVector list
       */
      void addStream(Stream* add_object) {
        m_streamVector.push_back(add_object);
      }

      /**
       * Remove a Stream* object from m_streamVector
       */
      void removeStream(Stream* remove_object) {
        for (unsigned int i = 0; i < m_streamVector.size(); i++) {
          Stream* item = m_streamVector[i];
          if (item == remove_object) {
            std::vector<Stream*>::iterator it = m_streamVector.begin() + i;
            m_streamVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of Stream* objects held by m_streamVector
       * @return list of Stream* objects held by m_streamVector
       */
      std::vector<Stream*>& stream() {
        return m_streamVector;
      }

      /**
       * Add a Segment* object to the m_segmentsVector list
       */
      void addSegments(Segment* add_object) {
        m_segmentsVector.push_back(add_object);
      }

      /**
       * Remove a Segment* object from m_segmentsVector
       */
      void removeSegments(Segment* remove_object) {
        for (unsigned int i = 0; i < m_segmentsVector.size(); i++) {
          Segment* item = m_segmentsVector[i];
          if (item == remove_object) {
            std::vector<Segment*>::iterator it = m_segmentsVector.begin() + i;
            m_segmentsVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of Segment* objects held by m_segmentsVector
       * @return list of Segment* objects held by m_segmentsVector
       */
      std::vector<Segment*>& segments() {
        return m_segmentsVector;
      }

      /**
       * Get the value of m_castorFile
       * @return the value of m_castorFile
       */
      CastorFile* castorFile() const {
        return m_castorFile;
      }

      /**
       * Set the value of m_castorFile
       * @param new_var the new value of m_castorFile
       */
      void setCastorFile(CastorFile* new_var) {
        m_castorFile = new_var;
      }

      /**
       * Get the value of m_status
       * @return the value of m_status
       */
      TapeCopyStatusCodes status() const {
        return m_status;
      }

      /**
       * Set the value of m_status
       * @param new_var the new value of m_status
       */
      void setStatus(TapeCopyStatusCodes new_var) {
        m_status = new_var;
      }

    private:

      /// The copy number allows to identify the different copies on tape of a single file
      unsigned int m_copyNb;

      /// The id of this object
      u_signed64 m_id;

      std::vector<Stream*> m_streamVector;

      std::vector<Segment*> m_segmentsVector;

      CastorFile* m_castorFile;

      TapeCopyStatusCodes m_status;

    }; // end of class TapeCopy

  }; // end of namespace stager

}; // end of namespace castor

#endif // CASTOR_STAGER_TAPECOPY_HPP
