/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_STAGER_FILESYSTEM_H
#define CASTOR_STAGER_FILESYSTEM_H

// Include Files and Forward declarations for the C world
#include "castor/stager/FileSystemStatusCodes.h"
#include "osdep.h"
struct C_IObject_t;
struct Cstager_DiskCopy_t;
struct Cstager_DiskPool_t;
struct Cstager_DiskServer_t;
struct Cstager_FileSystem_t;

//------------------------------------------------------------------------------
// This defines a C interface to the following class
// class FileSystem
// A file system used in a disk pool
//------------------------------------------------------------------------------

/**
 * Empty Constructor
 */
int Cstager_FileSystem_create(struct Cstager_FileSystem_t** obj);

/**
 * Empty Destructor
 */
int Cstager_FileSystem_delete(struct Cstager_FileSystem_t* obj);

/**
 * Cast into IObject
 */
struct C_IObject_t* Cstager_FileSystem_getIObject(struct Cstager_FileSystem_t* obj);

/**
 * Dynamic cast from IObject
 */
struct Cstager_FileSystem_t* Cstager_FileSystem_fromIObject(struct C_IObject_t* obj);

/**
 * Outputs this object in a human readable format
 */
int Cstager_FileSystem_print(struct Cstager_FileSystem_t* instance);

/**
 * Gets the type of this kind of objects
 */
int Cstager_FileSystem_TYPE(int* ret);

/***************************************/
/* Implementation of IObject interface */
/***************************************/

/**
 * Gets the type of the object
 */
int Cstager_FileSystem_type(struct Cstager_FileSystem_t* instance,
                            int* ret);

/**
 * virtual method to clone any object
 */
int Cstager_FileSystem_clone(struct Cstager_FileSystem_t* instance,
                             struct C_IObject_t* ret);

/**
 * Get the value of free
 * Free space on the filesystem
 */
int Cstager_FileSystem_free(struct Cstager_FileSystem_t* instance, u_signed64* var);

/**
 * Set the value of free
 * Free space on the filesystem
 */
int Cstager_FileSystem_setFree(struct Cstager_FileSystem_t* instance, u_signed64 new_var);

/**
 * Get the value of weight
 * Weight of the filesystem, as computed by the expert system
 */
int Cstager_FileSystem_weight(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of weight
 * Weight of the filesystem, as computed by the expert system
 */
int Cstager_FileSystem_setWeight(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of fsDeviation
 */
int Cstager_FileSystem_fsDeviation(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of fsDeviation
 */
int Cstager_FileSystem_setFsDeviation(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of mountPoint
 */
int Cstager_FileSystem_mountPoint(struct Cstager_FileSystem_t* instance, const char** var);

/**
 * Set the value of mountPoint
 */
int Cstager_FileSystem_setMountPoint(struct Cstager_FileSystem_t* instance, const char* new_var);

/**
 * Get the value of deltaWeight
 * Estimation of the modifications of the weight since the last update.
 */
int Cstager_FileSystem_deltaWeight(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of deltaWeight
 * Estimation of the modifications of the weight since the last update.
 */
int Cstager_FileSystem_setDeltaWeight(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of deltaFree
 * Estimation of the modifications of the free space since the last update.
 */
int Cstager_FileSystem_deltaFree(struct Cstager_FileSystem_t* instance, int* var);

/**
 * Set the value of deltaFree
 * Estimation of the modifications of the free space since the last update.
 */
int Cstager_FileSystem_setDeltaFree(struct Cstager_FileSystem_t* instance, int new_var);

/**
 * Get the value of reservedSpace
 * Space reserved on the filesystem but not yet used and thus not taken into account
 */
int Cstager_FileSystem_reservedSpace(struct Cstager_FileSystem_t* instance, int* var);

/**
 * Set the value of reservedSpace
 * Space reserved on the filesystem but not yet used and thus not taken into account
 */
int Cstager_FileSystem_setReservedSpace(struct Cstager_FileSystem_t* instance, int new_var);

/**
 * Get the value of minFreeSpace
 * Minimum free space that should be kept on this FileSystem. This limit can be
 * transgressed but the garbage collector will then be launched. This is given as a
 */
int Cstager_FileSystem_minFreeSpace(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of minFreeSpace
 * Minimum free space that should be kept on this FileSystem. This limit can be
 * transgressed but the garbage collector will then be launched. This is given as a
 */
int Cstager_FileSystem_setMinFreeSpace(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of minAllowedFreeSpace
 * Minimum free space that shall be kept on this FileSystem. If this limit is
 * transgressed no jobs will be scheduled on this FileSystem. This is given as a
 */
int Cstager_FileSystem_minAllowedFreeSpace(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of minAllowedFreeSpace
 * Minimum free space that shall be kept on this FileSystem. If this limit is
 * transgressed no jobs will be scheduled on this FileSystem. This is given as a
 */
int Cstager_FileSystem_setMinAllowedFreeSpace(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of maxFreeSpace
 * Maximum free space this FileSystem should have. Of course this limit can be
 * transgressed but a Garbage Collector should never go under this limit. This is
 */
int Cstager_FileSystem_maxFreeSpace(struct Cstager_FileSystem_t* instance, float* var);

/**
 * Set the value of maxFreeSpace
 * Maximum free space this FileSystem should have. Of course this limit can be
 * transgressed but a Garbage Collector should never go under this limit. This is
 */
int Cstager_FileSystem_setMaxFreeSpace(struct Cstager_FileSystem_t* instance, float new_var);

/**
 * Get the value of spaceToBeFreed
 * The space that will be deleted in the future by the GC workers. This are files
 * that were selected by the GC but are not yet physically removed. This value can
 */
int Cstager_FileSystem_spaceToBeFreed(struct Cstager_FileSystem_t* instance, u_signed64* var);

/**
 * Set the value of spaceToBeFreed
 * The space that will be deleted in the future by the GC workers. This are files
 * that were selected by the GC but are not yet physically removed. This value can
 */
int Cstager_FileSystem_setSpaceToBeFreed(struct Cstager_FileSystem_t* instance, u_signed64 new_var);

/**
 * Get the value of totalSize
 * Total size of the fileSystem (given in bytes)
 */
int Cstager_FileSystem_totalSize(struct Cstager_FileSystem_t* instance, u_signed64* var);

/**
 * Set the value of totalSize
 * Total size of the fileSystem (given in bytes)
 */
int Cstager_FileSystem_setTotalSize(struct Cstager_FileSystem_t* instance, u_signed64 new_var);

/**
 * Get the value of id
 * The id of this object
 */
int Cstager_FileSystem_id(struct Cstager_FileSystem_t* instance, u_signed64* var);

/**
 * Set the value of id
 * The id of this object
 */
int Cstager_FileSystem_setId(struct Cstager_FileSystem_t* instance, u_signed64 new_var);

/**
 * Get the value of diskPool
 */
int Cstager_FileSystem_diskPool(struct Cstager_FileSystem_t* instance, struct Cstager_DiskPool_t** var);

/**
 * Set the value of diskPool
 */
int Cstager_FileSystem_setDiskPool(struct Cstager_FileSystem_t* instance, struct Cstager_DiskPool_t* new_var);

/**
 * Add a struct Cstager_DiskCopy_t* object to the copies list
 */
int Cstager_FileSystem_addCopies(struct Cstager_FileSystem_t* instance, struct Cstager_DiskCopy_t* obj);

/**
 * Remove a struct Cstager_DiskCopy_t* object from copies
 */
int Cstager_FileSystem_removeCopies(struct Cstager_FileSystem_t* instance, struct Cstager_DiskCopy_t* obj);

/**
 * Get the list of struct Cstager_DiskCopy_t* objects held by copies. Note that the
 */
int Cstager_FileSystem_copies(struct Cstager_FileSystem_t* instance, struct Cstager_DiskCopy_t*** var, int* len);

/**
 * Get the value of diskserver
 */
int Cstager_FileSystem_diskserver(struct Cstager_FileSystem_t* instance, struct Cstager_DiskServer_t** var);

/**
 * Set the value of diskserver
 */
int Cstager_FileSystem_setDiskserver(struct Cstager_FileSystem_t* instance, struct Cstager_DiskServer_t* new_var);

/**
 * Get the value of status
 */
int Cstager_FileSystem_status(struct Cstager_FileSystem_t* instance, enum Cstager_FileSystemStatusCodes_t* var);

/**
 * Set the value of status
 */
int Cstager_FileSystem_setStatus(struct Cstager_FileSystem_t* instance, enum Cstager_FileSystemStatusCodes_t new_var);

#endif // CASTOR_STAGER_FILESYSTEM_H
