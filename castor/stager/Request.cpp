/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "castor/IClient.hpp"
#include "castor/ObjectSet.hpp"
#include "castor/stager/Request.hpp"
#include "castor/stager/SvcClass.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::stager::Request::Request() throw() :
  m_flags(0),
  m_userName(""),
  m_euid(0),
  m_egid(0),
  m_mask(0),
  m_pid(0),
  m_machine(""),
  m_svcClassName(""),
  m_userTag(""),
  m_reqId(""),
  m_creationTime(0),
  m_lastModificationTime(0),
  m_svcClass(0),
  m_client(0) {
};

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::stager::Request::~Request() throw() {
  if (0 != m_client) {
    delete m_client;
    m_client = 0;
  }
};

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::Request::print(std::ostream& stream,
                                    std::string indent,
                                    castor::ObjectSet& alreadyPrinted) const {
  stream << indent << "[# Request #]" << std::endl;
  if (alreadyPrinted.find(this) != alreadyPrinted.end()) {
    // Circular dependency, this object was already printed
    stream << indent << "Back pointer, see above" << std::endl;
    return;
  }
  // Output of all members
  stream << indent << "flags : " << m_flags << std::endl;
  stream << indent << "userName : " << m_userName << std::endl;
  stream << indent << "euid : " << m_euid << std::endl;
  stream << indent << "egid : " << m_egid << std::endl;
  stream << indent << "mask : " << m_mask << std::endl;
  stream << indent << "pid : " << m_pid << std::endl;
  stream << indent << "machine : " << m_machine << std::endl;
  stream << indent << "svcClassName : " << m_svcClassName << std::endl;
  stream << indent << "userTag : " << m_userTag << std::endl;
  stream << indent << "reqId : " << m_reqId << std::endl;
  stream << indent << "creationTime : " << m_creationTime << std::endl;
  stream << indent << "lastModificationTime : " << m_lastModificationTime << std::endl;
  alreadyPrinted.insert(this);
  stream << indent << "SvcClass : " << std::endl;
  if (0 != m_svcClass) {
    m_svcClass->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
  stream << indent << "Client : " << std::endl;
  if (0 != m_client) {
    m_client->print(stream, indent + "  ", alreadyPrinted);
  } else {
    stream << indent << "  null" << std::endl;
  }
}

//------------------------------------------------------------------------------
// print
//------------------------------------------------------------------------------
void castor::stager::Request::print() const {
  castor::ObjectSet alreadyPrinted;
  print(std::cout, "", alreadyPrinted);
}

