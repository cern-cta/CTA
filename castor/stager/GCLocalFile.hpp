/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/stager/GCLocalFile.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_STAGER_GCLOCALFILE_HPP
#define CASTOR_STAGER_GCLOCALFILE_HPP

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace stager {

    /**
     * class GCLocalFile
     * Represents a local file on a diskServer
     */
    class GCLocalFile : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      GCLocalFile() throw();

      /**
       * Empty Destructor
       */
      virtual ~GCLocalFile() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_fileName
       * local file name
       * @return the value of m_fileName
       */
      std::string fileName() const {
        return m_fileName;
      }

      /**
       * Set the value of m_fileName
       * local file name
       * @param new_var the new value of m_fileName
       */
      void setFileName(std::string new_var) {
        m_fileName = new_var;
      }

      /**
       * Get the value of m_diskCopyId
       * Id of the DiskCopy this local files materializes
       * @return the value of m_diskCopyId
       */
      u_signed64 diskCopyId() const {
        return m_diskCopyId;
      }

      /**
       * Set the value of m_diskCopyId
       * Id of the DiskCopy this local files materializes
       * @param new_var the new value of m_diskCopyId
       */
      void setDiskCopyId(u_signed64 new_var) {
        m_diskCopyId = new_var;
      }

      /**
       * Get the value of m_fileId
       * The id of this castor file. This identifies it uniquely
       * @return the value of m_fileId
       */
      u_signed64 fileId() const {
        return m_fileId;
      }

      /**
       * Set the value of m_fileId
       * The id of this castor file. This identifies it uniquely
       * @param new_var the new value of m_fileId
       */
      void setFileId(u_signed64 new_var) {
        m_fileId = new_var;
      }

      /**
       * Get the value of m_nsHost
       * The name server hosting this castor file
       * @return the value of m_nsHost
       */
      std::string nsHost() const {
        return m_nsHost;
      }

      /**
       * Set the value of m_nsHost
       * The name server hosting this castor file
       * @param new_var the new value of m_nsHost
       */
      void setNsHost(std::string new_var) {
        m_nsHost = new_var;
      }

      /**
       * Get the value of m_lastAccessTime
       * Time when this DiskCopy was last accessed: this information is used to recompute
       * the gcWeight at each access
       * @return the value of m_lastAccessTime
       */
      u_signed64 lastAccessTime() const {
        return m_lastAccessTime;
      }

      /**
       * Set the value of m_lastAccessTime
       * Time when this DiskCopy was last accessed: this information is used to recompute
       * the gcWeight at each access
       * @param new_var the new value of m_lastAccessTime
       */
      void setLastAccessTime(u_signed64 new_var) {
        m_lastAccessTime = new_var;
      }

      /**
       * Get the value of m_nbAccesses
       * Number of accesses to this diskcopy
       * @return the value of m_nbAccesses
       */
      unsigned int nbAccesses() const {
        return m_nbAccesses;
      }

      /**
       * Set the value of m_nbAccesses
       * Number of accesses to this diskcopy
       * @param new_var the new value of m_nbAccesses
       */
      void setNbAccesses(unsigned int new_var) {
        m_nbAccesses = new_var;
      }

      /**
       * Get the value of m_gcWeight
       * Weight used by the garbage collector to decide who is the next candidate for
       * removal
       * @return the value of m_gcWeight
       */
      double gcWeight() const {
        return m_gcWeight;
      }

      /**
       * Set the value of m_gcWeight
       * Weight used by the garbage collector to decide who is the next candidate for
       * removal
       * @param new_var the new value of m_gcWeight
       */
      void setGcWeight(double new_var) {
        m_gcWeight = new_var;
      }

      /**
       * Get the value of m_gcTriggeredBy
       * The action that triggered the garbage collection
       * @return the value of m_gcTriggeredBy
       */
      std::string gcTriggeredBy() const {
        return m_gcTriggeredBy;
      }

      /**
       * Set the value of m_gcTriggeredBy
       * The action that triggered the garbage collection
       * @param new_var the new value of m_gcTriggeredBy
       */
      void setGcTriggeredBy(std::string new_var) {
        m_gcTriggeredBy = new_var;
      }

      /**
       * Get the value of m_svcClassName
       * The name of the service class
       * @return the value of m_svcClassName
       */
      std::string svcClassName() const {
        return m_svcClassName;
      }

      /**
       * Set the value of m_svcClassName
       * The name of the service class
       * @param new_var the new value of m_svcClassName
       */
      void setSvcClassName(std::string new_var) {
        m_svcClassName = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

    private:

      /// local file name
      std::string m_fileName;

      /// Id of the DiskCopy this local files materializes
      u_signed64 m_diskCopyId;

      /// The id of this castor file. This identifies it uniquely
      u_signed64 m_fileId;

      /// The name server hosting this castor file
      std::string m_nsHost;

      /// Time when this DiskCopy was last accessed: this information is used to recompute the gcWeight at each access
      u_signed64 m_lastAccessTime;

      /// Number of accesses to this diskcopy
      unsigned int m_nbAccesses;

      /// Weight used by the garbage collector to decide who is the next candidate for removal
      double m_gcWeight;

      /// The action that triggered the garbage collection
      std::string m_gcTriggeredBy;

      /// The name of the service class
      std::string m_svcClassName;

      /// The id of this object
      u_signed64 m_id;

    }; /* end of class GCLocalFile */

  } /* end of namespace stager */

} /* end of namespace castor */

#endif // CASTOR_STAGER_GCLOCALFILE_HPP
