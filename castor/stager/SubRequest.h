/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/stager/SubRequest.h
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_STAGER_SUBREQUEST_H
#define CASTOR_STAGER_SUBREQUEST_H

// Include Files and Forward declarations for the C world
#include "castor/stager/SubRequestGetNextStatusCodes.h"
#include "castor/stager/SubRequestStatusCodes.h"
#include "osdep.h"
struct C_IObject_t;
struct Cstager_CastorFile_t;
struct Cstager_DiskCopy_t;
struct Cstager_FileRequest_t;
struct Cstager_SubRequest_t;

//------------------------------------------------------------------------------
// This defines a C interface to the following class
// class SubRequest
// A subpart of a request dealing with a single castor file
//------------------------------------------------------------------------------

/**
 * Empty Constructor
 */
int Cstager_SubRequest_create(struct Cstager_SubRequest_t** obj);

/**
 * Empty Destructor
 */
int Cstager_SubRequest_delete(struct Cstager_SubRequest_t* obj);

/**
 * Cast into IObject
 */
struct C_IObject_t* Cstager_SubRequest_getIObject(struct Cstager_SubRequest_t* obj);

/**
 * Dynamic cast from IObject
 */
struct Cstager_SubRequest_t* Cstager_SubRequest_fromIObject(struct C_IObject_t* obj);

/**
 * Outputs this object in a human readable format
 */
int Cstager_SubRequest_print(struct Cstager_SubRequest_t* instance);

/**
 * Gets the type of this kind of objects
 */
int Cstager_SubRequest_TYPE(int* ret);

/***************************************/
/* Implementation of IObject interface */
/***************************************/

/**
 * Gets the type of the object
 */
int Cstager_SubRequest_type(struct Cstager_SubRequest_t* instance,
                            int* ret);

/**
 * virtual method to clone any object
 */
int Cstager_SubRequest_clone(struct Cstager_SubRequest_t* instance,
                             struct C_IObject_t* ret);

/**
 * Get the value of retryCounter
 */
int Cstager_SubRequest_retryCounter(struct Cstager_SubRequest_t* instance, unsigned int* var);

/**
 * Set the value of retryCounter
 */
int Cstager_SubRequest_setRetryCounter(struct Cstager_SubRequest_t* instance, unsigned int new_var);

/**
 * Get the value of fileName
 * Name of the file this SubRequest deals with.
 * When stored in the catalog, this is redundant with the link to the CastorFile
 */
int Cstager_SubRequest_fileName(struct Cstager_SubRequest_t* instance, const char** var);

/**
 * Set the value of fileName
 * Name of the file this SubRequest deals with.
 * When stored in the catalog, this is redundant with the link to the CastorFile
 */
int Cstager_SubRequest_setFileName(struct Cstager_SubRequest_t* instance, const char* new_var);

/**
 * Get the value of protocol
 * The protocol that will be used to access the file this SubRequest deals with
 */
int Cstager_SubRequest_protocol(struct Cstager_SubRequest_t* instance, const char** var);

/**
 * Set the value of protocol
 * The protocol that will be used to access the file this SubRequest deals with
 */
int Cstager_SubRequest_setProtocol(struct Cstager_SubRequest_t* instance, const char* new_var);

/**
 * Get the value of xsize
 */
int Cstager_SubRequest_xsize(struct Cstager_SubRequest_t* instance, u_signed64* var);

/**
 * Set the value of xsize
 */
int Cstager_SubRequest_setXsize(struct Cstager_SubRequest_t* instance, u_signed64 new_var);

/**
 * Get the value of priority
 * The priority defines in which order the files will be processed by the user when
 * calling stage_get_next. The files of the SubRequest of same priority are given in
 */
int Cstager_SubRequest_priority(struct Cstager_SubRequest_t* instance, unsigned int* var);

/**
 * Set the value of priority
 * The priority defines in which order the files will be processed by the user when
 * calling stage_get_next. The files of the SubRequest of same priority are given in
 */
int Cstager_SubRequest_setPriority(struct Cstager_SubRequest_t* instance, unsigned int new_var);

/**
 * Get the value of subreqId
 * The Cuuid identifying the SubRequest, stored as a human readable string
 */
int Cstager_SubRequest_subreqId(struct Cstager_SubRequest_t* instance, const char** var);

/**
 * Set the value of subreqId
 * The Cuuid identifying the SubRequest, stored as a human readable string
 */
int Cstager_SubRequest_setSubreqId(struct Cstager_SubRequest_t* instance, const char* new_var);

/**
 * Get the value of flags
 * open flags for the file handled by this SubRequest
 */
int Cstager_SubRequest_flags(struct Cstager_SubRequest_t* instance, int* var);

/**
 * Set the value of flags
 * open flags for the file handled by this SubRequest
 */
int Cstager_SubRequest_setFlags(struct Cstager_SubRequest_t* instance, int new_var);

/**
 * Get the value of modeBits
 * Permissions for the file handled by this SubRequest (essentially used at creation
 */
int Cstager_SubRequest_modeBits(struct Cstager_SubRequest_t* instance, int* var);

/**
 * Set the value of modeBits
 * Permissions for the file handled by this SubRequest (essentially used at creation
 */
int Cstager_SubRequest_setModeBits(struct Cstager_SubRequest_t* instance, int new_var);

/**
 * Get the value of creationTime
 * The time when this SubRequest was created
 */
int Cstager_SubRequest_creationTime(struct Cstager_SubRequest_t* instance, u_signed64* var);

/**
 * Set the value of creationTime
 * The time when this SubRequest was created
 */
int Cstager_SubRequest_setCreationTime(struct Cstager_SubRequest_t* instance, u_signed64 new_var);

/**
 * Get the value of lastModificationTime
 * Time of the last modification on this SubRequest
 */
int Cstager_SubRequest_lastModificationTime(struct Cstager_SubRequest_t* instance, u_signed64* var);

/**
 * Set the value of lastModificationTime
 * Time of the last modification on this SubRequest
 */
int Cstager_SubRequest_setLastModificationTime(struct Cstager_SubRequest_t* instance, u_signed64 new_var);

/**
 * Get the value of answered
 * Whether somebody answered to this subRequest already. 1 means that it is the
 * This was introduced to deal with prepareToGet where the answer is sent before the
 */
int Cstager_SubRequest_answered(struct Cstager_SubRequest_t* instance, int* var);

/**
 * Set the value of answered
 * Whether somebody answered to this subRequest already. 1 means that it is the
 * This was introduced to deal with prepareToGet where the answer is sent before the
 */
int Cstager_SubRequest_setAnswered(struct Cstager_SubRequest_t* instance, int new_var);

/**
 * Get the value of repackVid
 * If the request comes from repack, this field contains the Vid of the tape to be
 */
int Cstager_SubRequest_repackVid(struct Cstager_SubRequest_t* instance, const char** var);

/**
 * Set the value of repackVid
 * If the request comes from repack, this field contains the Vid of the tape to be
 */
int Cstager_SubRequest_setRepackVid(struct Cstager_SubRequest_t* instance, const char* new_var);

/**
 * Get the value of id
 * The id of this object
 */
int Cstager_SubRequest_id(struct Cstager_SubRequest_t* instance, u_signed64* var);

/**
 * Set the value of id
 * The id of this object
 */
int Cstager_SubRequest_setId(struct Cstager_SubRequest_t* instance, u_signed64 new_var);

/**
 * Get the value of diskcopy
 */
int Cstager_SubRequest_diskcopy(struct Cstager_SubRequest_t* instance, struct Cstager_DiskCopy_t** var);

/**
 * Set the value of diskcopy
 */
int Cstager_SubRequest_setDiskcopy(struct Cstager_SubRequest_t* instance, struct Cstager_DiskCopy_t* new_var);

/**
 * Get the value of castorFile
 */
int Cstager_SubRequest_castorFile(struct Cstager_SubRequest_t* instance, struct Cstager_CastorFile_t** var);

/**
 * Set the value of castorFile
 */
int Cstager_SubRequest_setCastorFile(struct Cstager_SubRequest_t* instance, struct Cstager_CastorFile_t* new_var);

/**
 * Get the value of parent
 */
int Cstager_SubRequest_parent(struct Cstager_SubRequest_t* instance, struct Cstager_SubRequest_t** var);

/**
 * Set the value of parent
 */
int Cstager_SubRequest_setParent(struct Cstager_SubRequest_t* instance, struct Cstager_SubRequest_t* new_var);

/**
 * Add a struct Cstager_SubRequest_t* object to the child list
 */
int Cstager_SubRequest_addChild(struct Cstager_SubRequest_t* instance, struct Cstager_SubRequest_t* obj);

/**
 * Remove a struct Cstager_SubRequest_t* object from child
 */
int Cstager_SubRequest_removeChild(struct Cstager_SubRequest_t* instance, struct Cstager_SubRequest_t* obj);

/**
 * Get the list of struct Cstager_SubRequest_t* objects held by child. Note that the
 */
int Cstager_SubRequest_child(struct Cstager_SubRequest_t* instance, struct Cstager_SubRequest_t*** var, int* len);

/**
 * Get the value of status
 */
int Cstager_SubRequest_status(struct Cstager_SubRequest_t* instance, enum Cstager_SubRequestStatusCodes_t* var);

/**
 * Set the value of status
 */
int Cstager_SubRequest_setStatus(struct Cstager_SubRequest_t* instance, enum Cstager_SubRequestStatusCodes_t new_var);

/**
 * Get the value of request
 */
int Cstager_SubRequest_request(struct Cstager_SubRequest_t* instance, struct Cstager_FileRequest_t** var);

/**
 * Set the value of request
 */
int Cstager_SubRequest_setRequest(struct Cstager_SubRequest_t* instance, struct Cstager_FileRequest_t* new_var);

/**
 * Get the value of getNextStatus
 */
int Cstager_SubRequest_getNextStatus(struct Cstager_SubRequest_t* instance, enum Cstager_SubRequestGetNextStatusCodes_t* var);

/**
 * Set the value of getNextStatus
 */
int Cstager_SubRequest_setGetNextStatus(struct Cstager_SubRequest_t* instance, enum Cstager_SubRequestGetNextStatusCodes_t new_var);

#endif // CASTOR_STAGER_SUBREQUEST_H
