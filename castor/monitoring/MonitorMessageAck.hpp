/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/monitoring/MonitorMessageAck.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_MONITORING_MONITORMESSAGEACK_HPP
#define CASTOR_MONITORING_MONITORMESSAGEACK_HPP

// Include Files
#include "castor/MessageAck.hpp"
#include "castor/stager/DiskServerStatusCode.hpp"
#include <iostream>
#include <string>
#include <vector>

namespace castor {

  // Forward declarations
  class ObjectSet;
  class IObject;

  namespace monitoring {

    // Forward declarations
    class FileSystemStateAck;

    /**
     * class MonitorMessageAck
     * Message ack used by the rmmaster daemon to send the node status, as computed by
     * the master, back to the rmnode daemon, as seen
     */
    class MonitorMessageAck : public castor::MessageAck {

    public:

      /**
       * Empty Constructor
       */
      MonitorMessageAck() throw();

      /**
       * Empty Destructor
       */
      virtual ~MonitorMessageAck() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_diskServerStatus
       * @return the value of m_diskServerStatus
       */
      castor::stager::DiskServerStatusCode diskServerStatus() const {
        return m_diskServerStatus;
      }

      /**
       * Set the value of m_diskServerStatus
       * @param new_var the new value of m_diskServerStatus
       */
      void setDiskServerStatus(castor::stager::DiskServerStatusCode new_var) {
        m_diskServerStatus = new_var;
      }

      /**
       * Add a FileSystemStateAck* object to the m_ackVector list
       */
      void addAck(FileSystemStateAck* add_object) {
        m_ackVector.push_back(add_object);
      }

      /**
       * Remove a FileSystemStateAck* object from m_ackVector
       */
      void removeAck(FileSystemStateAck* remove_object) {
        for (unsigned int i = 0; i < m_ackVector.size(); i++) {
          FileSystemStateAck* item = m_ackVector[i];
          if (item == remove_object) {
            std::vector<FileSystemStateAck*>::iterator it = m_ackVector.begin() + i;
            m_ackVector.erase(it);
            return;
          }
        }
      }

      /**
       * Get the list of FileSystemStateAck* objects held by m_ackVector
       * @return list of FileSystemStateAck* objects held by m_ackVector
       */
      std::vector<FileSystemStateAck*>& ack() {
        return m_ackVector;
      }

    private:

      castor::stager::DiskServerStatusCode m_diskServerStatus;

      std::vector<FileSystemStateAck*> m_ackVector;

    }; /* end of class MonitorMessageAck */

  } /* end of namespace monitoring */

} /* end of namespace castor */

#endif // CASTOR_MONITORING_MONITORMESSAGEACK_HPP
