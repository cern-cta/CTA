/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/bwlist/Privilege.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#pragma once

// Include Files
#include "castor/IObject.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  namespace bwlist {

    // Forward declarations
    class ListPrivilegesResponse;

    /**
     * class Privilege
     * Describes a privilege, as handled by the black and white lists.
     */
    class Privilege : public virtual castor::IObject {

    public:

      /**
       * Empty Constructor
       */
      Privilege() throw();

      /**
       * Empty Destructor
       */
      virtual ~Privilege() throw();

      /**
       * Outputs this object in a human readable format
       * @param stream The stream where to print this object
       * @param indent The indentation to use
       * @param alreadyPrinted The set of objects already printed.
       * This is to avoid looping when printing circular dependencies
       */
      virtual void print(std::ostream& stream,
                         std::string indent,
                         castor::ObjectSet& alreadyPrinted) const;

      /**
       * Outputs this object in a human readable format
       */
      virtual void print() const;

      /**
       * Gets the type of this kind of objects
       */
      static int TYPE();

      /********************************************/
      /* Implementation of IObject abstract class */
      /********************************************/
      /**
       * Gets the type of the object
       */
      virtual int type() const;

      /**
       * virtual method to clone any object
       */
      virtual castor::IObject* clone();

      /*********************************/
      /* End of IObject abstract class */
      /*********************************/
      /**
       * Get the value of m_serviceClass
       * the service class concerned. '*' means any
       * @return the value of m_serviceClass
       */
      std::string serviceClass() const {
        return m_serviceClass;
      }

      /**
       * Set the value of m_serviceClass
       * the service class concerned. '*' means any
       * @param new_var the new value of m_serviceClass
       */
      void setServiceClass(std::string new_var) {
        m_serviceClass = new_var;
      }

      /**
       * Get the value of m_euid
       * the user concerned. -1 means all
       * @return the value of m_euid
       */
      int euid() const {
        return m_euid;
      }

      /**
       * Set the value of m_euid
       * the user concerned. -1 means all
       * @param new_var the new value of m_euid
       */
      void setEuid(int new_var) {
        m_euid = new_var;
      }

      /**
       * Get the value of m_egid
       * the group concerned. -1 means all
       * @return the value of m_egid
       */
      int egid() const {
        return m_egid;
      }

      /**
       * Set the value of m_egid
       * the group concerned. -1 means all
       * @param new_var the new value of m_egid
       */
      void setEgid(int new_var) {
        m_egid = new_var;
      }

      /**
       * Get the value of m_requestType
       * The request type concerned. '0' means all
       * @return the value of m_requestType
       */
      int requestType() const {
        return m_requestType;
      }

      /**
       * Set the value of m_requestType
       * The request type concerned. '0' means all
       * @param new_var the new value of m_requestType
       */
      void setRequestType(int new_var) {
        m_requestType = new_var;
      }

      /**
       * Get the value of m_granted
       * whether this privilege is granted or denied
       * @return the value of m_granted
       */
      bool granted() const {
        return m_granted;
      }

      /**
       * Set the value of m_granted
       * whether this privilege is granted or denied
       * @param new_var the new value of m_granted
       */
      void setGranted(bool new_var) {
        m_granted = new_var;
      }

      /**
       * Get the value of m_id
       * The id of this object
       * @return the value of m_id
       */
      u_signed64 id() const {
        return m_id;
      }

      /**
       * Set the value of m_id
       * The id of this object
       * @param new_var the new value of m_id
       */
      void setId(u_signed64 new_var) {
        m_id = new_var;
      }

      /**
       * Get the value of m_response
       * @return the value of m_response
       */
      ListPrivilegesResponse* response() const {
        return m_response;
      }

      /**
       * Set the value of m_response
       * @param new_var the new value of m_response
       */
      void setResponse(ListPrivilegesResponse* new_var) {
        m_response = new_var;
      }

    private:

      /// the service class concerned. '*' means any
      std::string m_serviceClass;

      /// the user concerned. -1 means all
      int m_euid;

      /// the group concerned. -1 means all
      int m_egid;

      /// The request type concerned. '0' means all
      int m_requestType;

      /// whether this privilege is granted or denied
      bool m_granted;

      /// The id of this object
      u_signed64 m_id;

      ListPrivilegesResponse* m_response;

    }; /* end of class Privilege */

  } /* end of namespace bwlist */

} /* end of namespace castor */

