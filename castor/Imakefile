#
#                      castor/Imakefile
#
# This file is part of the Castor project.
# See http://castor.web.cern.ch/castor
#
# Copyright (C) 2003  CERN
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# @(#)$RCSfile: Imakefile,v $ $Revision: 1.34 $ $Release$ $Date: 2004/08/27 10:15:02 $ $Author: sponcec3 $
#
# Make Castor libraries and executables
#
# @author Sebastien Ponce, sebastien.ponce@cern.ch
#

#include <Project.tmpl>

SUBDIRS = $(DBCPPDIR) $(RHCPPDIR) $(DSTAGECPPDIR) $(PROTOCPPDIR)
DEPENDDIRS = $(DBCPPDIR) $(RHCPPDIR) $(DSTAGECPPDIR) $(PROTOCPPDIR)

#if _AIX
OSLIBS = -L FileName(..,shlib) -lshift
#else
#if defined(__alpha) && defined(__osf__)
OSLIBS = -no_so -L FileName(..,shlib) -lshift -so_archive
#else
#if hpux
OSLIBS = -L FileName(..,shlib) -lshift
#else
#if linux
OSLIBS = -L FileName(..,shlib) -lshift $(ADNSLIB) -lnsl
#else
#if sgi
OSLIBS = -L FileName(..,shlib) -lshift
#else
#if SOLARIS
OSLIBS = -L FileName(..,shlib) -lshift -lsocket -lnsl
#else
#if _WIN32
OSLIBS = DepLibraryTargetName(lib,shift) wsock32.lib advapi32.lib
#endif
#endif
#endif
#endif
#endif
#endif
#endif
LIBS = $(OSLIBS) $(MTLDLIBS)

#if BuildSecurity
LIBS+= -ldl
#endif

#if !defined(_WIN32)
#if linux
DEBUG  = -g -O0
#else
DEBUG  = -g
#endif
#endif

DEPLIB = DepSharedLibraryTargetName(shlib,shift)

INCLUDES = -I FileName(..,h) -I ..
CPPFLAGS = $(DEBUG) $(INCLUDES) $(MTCCFLAGS)

STGLIB_SRCS = IAddressCInt.cpp \
              BaseAddress.cpp \
              BaseAddressCInt.cpp \
              BaseCnvSvc.cpp \
              BaseObject.cpp \
              BaseObjectCInt.cpp \
              BaseServer.cpp \
              BaseSvc.cpp \
              Converters.cpp \
              Factories.cpp \
              IAddress.cpp \
              IClientCInt.cpp \
              IObjectCInt.cpp \
              IRequestHandlerCInt.cpp \
              MessageAck.cpp \
              MessageAckCInt.cpp \
              MsgSvc.cpp \
              NoMsgSvc.cpp \
              StdMsgSvc.cpp \
              DlfMsgSvc.cpp \
              ObjectCatalog.cpp \
              ObjectSet.cpp \
              Services.cpp \
              ServicesCInt.cpp \
              logstream.cpp \
              logbuf.cpp \
              stdbuf.cpp \
              dlfbuf.cpp \
              client/BaseClient.cpp \
              io/AbstractSocket.cpp \
              io/ClientSocket.cpp \
              io/ServerSocket.cpp \
              io/StreamAddress.cpp \
              io/StreamBaseCnv.cpp \
              io/StreamCastorFileCnv.cpp \
              io/StreamClientCnv.cpp \
              io/StreamCnvSvc.cpp \
              io/StreamCuuidCnv.cpp \
              io/StreamDiskFileCnv.cpp \
              io/StreamDiskFileCopyCnv.cpp \
              io/StreamDiskFileSystemCnv.cpp \
              io/StreamDiskServerCnv.cpp \
              io/StreamFileCnv.cpp \
              io/StreamMessageAckCnv.cpp \
              io/StreamPtrCnv.cpp \
              io/StreamSegmentCnv.cpp \
              io/StreamStageInRequestCnv.cpp \
              io/StreamStageOutRequestCnv.cpp \
              io/StreamStageUpdcRequestCnv.cpp \
              io/StreamStageQryRequestCnv.cpp \
              io/StreamStageClrRequestCnv.cpp \
              io/StreamStageFilChgRequestCnv.cpp \
              io/StreamTapeCnv.cpp \
              io/StreamTapePoolCnv.cpp \
              io/StreamTapeRequestCnv.cpp \
              io/StreamStringResponseCnv.cpp \
              io/StreamEndResponseCnv.cpp \
              io/StreamFileResponseCnv.cpp \
              rh/Client.cpp \
              rh/ClientCInt.cpp \
              rh/File.cpp \
              rh/FileCInt.cpp \
              rh/FileRequest.cpp \
              rh/FileRequestCInt.cpp \
              rh/Request.cpp \
              rh/RequestCInt.cpp \
              rh/StageInRequest.cpp \
              rh/StageInRequestCInt.cpp \
              rh/StageOutRequest.cpp \
              rh/StageOutRequestCInt.cpp \
              rh/StageUpdcRequest.cpp \
              rh/StageUpdcRequestCInt.cpp \
              rh/StageQryRequest.cpp \
              rh/StageQryRequestCInt.cpp \
              rh/StageClrRequest.cpp \
              rh/StageClrRequestCInt.cpp \
              rh/StageFilChgRequest.cpp \
              rh/StageFilChgRequestCInt.cpp \
              rh/Response.cpp \
              rh/ResponseCInt.cpp \
              rh/StringResponse.cpp \
              rh/StringResponseCInt.cpp \
              rh/EndResponse.cpp \
              rh/EndResponseCInt.cpp \
              rh/FileResponse.cpp \
              rh/FileResponseCInt.cpp \
              stager/IStagerSvcCInt.cpp \
              stager/CastorFile.cpp \
              stager/CastorFileCInt.cpp \
              stager/Cuuid.cpp \
              stager/DiskFile.cpp \
              stager/DiskFileCInt.cpp \
              stager/DiskFileCopy.cpp \
              stager/DiskFileCopyCInt.cpp \
              stager/DiskFileSystem.cpp \
              stager/DiskFileSystemCInt.cpp \
              stager/DiskServer.cpp \
              stager/DiskServerCInt.cpp \
              stager/Segment.cpp \
              stager/SegmentCInt.cpp \
              stager/Tape.cpp \
              stager/TapeCInt.cpp \
              stager/TapePool.cpp \
              stager/TapePoolCInt.cpp \
              stager/TapeRequest.cpp \
              stager/TapeRequestCInt.cpp \
              stager/TpFileCopy.cpp \
              stager/TpFileCopyCInt.cpp \
              db/DbAddress.cpp \
              db/DbAddressCInt.cpp \
              exception/Exception.cpp \
              exception/InvalidArgument.cpp \
              exception/Internal.cpp \
              exception/NoEntry.cpp 

#if BuildSecurity
STGLIB_SRCS += io/AuthServerSocket.cpp io/AuthClientSocket.cpp
#endif


#if BuildDlfClient
STGLIB_SRCS += DlfMsgSvc.cpp
#endif

STGLIB_OBJS = $(STGLIB_SRCS:.cpp=.Osuf)

STAGEIN_SRCS = client/StageIn.cpp client/StageInMain.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp
STAGEOUT_SRCS = client/StageOut.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp
STAGEUPDC_SRCS = client/StageUpdc.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp
STAGEQRY_SRCS = client/StageQry.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp client/StageQryResponseHandler.cpp
STAGECLR_SRCS = client/StageClr.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp
MTTEST_SRCS = client/Mttest.cpp client/StageIn.cpp client/BaseCmdLineClient.cpp client/CmdLineResponseHandler.cpp
CLIENTS_SRCS = $(STAGEIN_SRCS) $(STAGEOUT_SRCS) $(STAGEUPDC_SRCS) $(STAGEQRY_SRCS) $(MTTEST_SRCS)
STAGEIN_OBJS = $(STAGEIN_SRCS:.cpp=.Osuf)
STAGEOUT_OBJS = $(STAGEOUT_SRCS:.cpp=.Osuf)
STAGEUPDC_OBJS = $(STAGEUPDC_SRCS:.cpp=.Osuf)
STAGEQRY_OBJS = $(STAGEQRY_SRCS:.cpp=.Osuf)
STAGECLR_OBJS = $(STAGECLR_SRCS:.cpp=.Osuf)
MTTEST_OBJS = $(MTTEST_SRCS:.cpp=.Osuf)
CLIENTS_OBJS = $(CLIENTS_SRCS:.cpp=.Osuf)

PROGS_S = stagein stageout stageupdc stageqry stageclr mttest
PROGS_C = $(patsubst %,ProgramTargetName(%),$(PROGS_S))

COMMONLIB = LibraryTargetName(castorClient)
GLOBLIB = DepSharedLibraryTargetName(shlib,shift)
LDFLAGS = $(DEBUG) $(MTLDFLAGS)
LD = g++

all: $(COMMONLIB) $(PROGS_C)

MakeDepSharedLibrary(shlib,shift)
NormalLibraryTarget(castorClient,$(STGLIB_OBJS))

NormalProgramTarget(stagein,  $(STAGEIN_OBJS),  $(GLOBLIB),$(LIBS))
NormalProgramTarget(stageout, $(STAGEOUT_OBJS), $(GLOBLIB),$(LIBS))
NormalProgramTarget(stageupdc,$(STAGEUPDC_OBJS),$(GLOBLIB),$(LIBS))
NormalProgramTarget(stageqry, $(STAGEQRY_OBJS) ,$(GLOBLIB),$(LIBS))
NormalProgramTarget(stageclr, $(STAGECLR_OBJS), $(GLOBLIB),$(LIBS))
NormalProgramTarget(mttest,   $(MTTEST_OBJS),   $(GLOBLIB),$(LIBS))

MakeSubdirs(all,$(SUBDIRS))
MakeCondSubdirs(clean,$(SUBDIRS),)
MakeCondSubdirs(clobber,$(SUBDIRS),)

#if defined(_WIN32)
Makefiles:
	@for %i in ( $(SUBDIRS) ) \
	do @(echo %i - & cd %i & \
		..\..\imake\imake -I..\..\config & \
		$(MAKE) $(MFLAGS) $@ & cd .. )

depend:
	@echo Not supported on this platform
#else
Makefiles:
	@. ../setosflags ;\
	for i in $(SUBDIRS) ;\
	do (if [ -d $$i ] ;\
	    then \
	      (echo " $$i:" ; cd $$i ;\
	      ../../imake/imake -I../../config -DOSMajorVersion="$$OSMAJNO" -DOSMinorVersion="$$OSMINNO" ;\
	      $(MAKE) $(MFLAGS) $@) ;\
	    else \
	      (echo "ERROR : No directory $$i" ;\
	      exit 1) ;\
	    fi )\
	done ;

depend:
	makedepend $(INCLUDES) $(STGLIB_SRCS) $(CLIENTS_SRCS) 2> /dev/null
	for i in $(DEPENDDIRS) ;\
	do (if [ -d $$i ] ;\
	    then \
	      (echo " $$i:" ; cd $$i ;\
	      $(MAKE) $(MFLAGS) $@) ;\
	    else \
	      (echo "ERROR : No directory $$i" ;\
	      exit 1) ;\
	    fi )\
	done ;

install: $(patsubst %,FileName($(BIN),%),$(PROGS_C))
	for i in $(SUBDIRS) ;\
	do (if [ -d $$i ] ;\
	    then \
	      (echo " $$i:" ; cd $$i ;\
	      $(MAKE) $(MFLAGS) $@) ;\
	    else \
	      (echo "ERROR : No directory $$i" ;\
	      exit 1) ;\
	    fi )\
	done ;
#endif

InstallProgram(stagein,$(BIN),root,bin,755)
InstallProgram(stageout,$(BIN),root,bin,755)
InstallProgram(stageupdc,$(BIN),root,bin,755)
InstallProgram(stageqry,$(BIN),root,bin,755)
InstallProgram(stageclr,$(BIN),root,bin,755)

exportman:

clean::
	@echo cleaning in CurDir
	-@RemoveFiles($(STGLIB_OBJS) $(CLIENTS_OBJS))

clobber::	clean
	@echo clobbering in CurDir
	-@RemoveFiles($(COMMONLIB) $(PROGS_C))

FORCE:

