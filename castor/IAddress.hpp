/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

#ifndef CASTOR_IADDRESS_HPP
#define CASTOR_IADDRESS_HPP

// Include Files
#include "castor/IObject.hpp"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;

  /**
   * class IAddress
   * Base class for all addresses.
   * An address allows to find a foreign representation of an object.
   */
  class IAddress : public virtual IObject {

  public:

    /**
     * Empty Destructor
     */
    virtual ~IAddress() throw() {};

    /**
     * gets the object type, that is the type of object whose representation is pointed
     */
    virtual unsigned int objType() const = 0;

    /**
     * sets the object type, that is the type of object whose representation is pointed
     * @param type The new type of this address
     */
    virtual void setObjType(unsigned int type) = 0;

    /**
     * gets the name of the conversion service able to deal with this address
     */
    virtual std::string cnvSvcName() const = 0;

    /**
     * gets the type of the conversion service able to deal with this address
     */
    virtual unsigned int cnvSvcType() const = 0;

    /**
     * Outputs this object in a human readable format
     * @param stream The stream where to print this object
     * @param indent The indentation to use
     * @param alreadyPrinted The set of objects already printed.
     * This is to avoid looping when printing circular dependencies
     */
    virtual void print(std::ostream& stream,
                       std::string indent,
                       castor::ObjectSet& alreadyPrinted) const = 0;

    /**
     * Outputs this object in a human readable format
     */
    virtual void print() const = 0;

  private:

  }; // end of class IAddress

}; // end of namespace castor

#endif // CASTOR_IADDRESS_HPP
