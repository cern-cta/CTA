.PS

##############################################################################
# File: tpread.pic
#
# This file is part of the Castor project.
# See http://castor.web.cern.ch/castor
#
# Copyright (C) 2003  CERN
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#   Nicola Bessone Nicola.Bessone@cern.ch
#   Steven Murray  Steven.Murray@cern.ch
###############################################################################

###############################################################################
# This diagram shows the sequence of messages sent between tpread, vdqm and
# rtcpd in order to recall one of more files from tape.
###############################################################################

copy "sequence.pic";

# Define the objects
object(C,"tpread");
object(V,"vdqm");
object(R,"rtcpd");
placeholder_object(RF);
placeholder_object(A);
placeholder_object(T);
placeholder_object(D1);
placeholder_object(D2);
placeholder_object(D3);

step();

# Message sequences
active(C);
message(C,V,"connect");
active(V);
message(C,V,"volume request");
message(V,C,"acknowledge");
message(V,C,"volReqID");
message(C,V,"acknowledge");
message(C,V,"disconnect");
inactive(V);

step();

active(V);
message(V,R,"connect");
active(R);
create_message(R,RF,"main cntl");
active(RF);
inactive(R);

message(V,RF,"RcpJob");
message(RF,V,"RcpJobReply");
message(RF,V,"disconnect");
inactive(V);

message(RF,C,"connect");
message(C,RF,"volume");
message(RF,C,"acknowledge");

message(C,RF,"file1");
message(RF,C,"acknowledge");

message(C,RF,"file2");
message(RF,C,"acknowledge");

message(C,RF,"RTCP_NOMORE_REQ");
message(RF,C,"acknowledge");

message(RF,C,"connect");
message(RF,C,"connect");
message(RF,C,"connect");

create_message(RF,A,"abort");
active(A);

create_message(RF,T,"tape IO");
active(T);

create_message(RF,D1,"disk IO 1");
active(D1);
create_message(RF,D2,"disk IO 2");
active(D2);
create_message(RF,D3,"disk IO 3");
active(D3);

message(T,C,"UNKNOWN file1");
message(T,C,"RTCP_POSITIONED file1");

message(T,C,"UNKNOWN file2");
message(T,C,"RTCP_POSITIONED file2");

message(D1,C,"RTCP_FINISHED file1");
message(C,D1,"acknowledge");
inactive(D1);

message(D2,C,"RTCP_FINISHED file2");
message(C,D2,"acknowledge");
inactive(D2);

message(T,C,"RTCP_ENDOF_REQ");
message(C,T,"acknowledge");
inactive(T);

inactive(D3);
inactive(A);
inactive(RF);
inactive(C);

complete(C);
complete(V);
complete(R);
complete(RF);
complete(A);
complete(T);
complete(D1);
complete(D2);
complete(D3);

.PE

