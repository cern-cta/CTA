/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/tape/tapegateway/VmgrAttributes.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile: VmgrAttributes.hpp,v $ $Revision: 1.3 $ $Release$ $Date: 2009/01/27 16:08:06 $ $Author: gtaur $
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_TAPE_TAPEGATEWAY_VMGRATTRIBUTES_HPP
#define CASTOR_TAPE_TAPEGATEWAY_VMGRATTRIBUTES_HPP

// Include Files
#include "osdep.h"
#include <string>

namespace castor {

  namespace tape {

    namespace tapegateway {

      /**
       * class VmgrAttributes
       */
      class VmgrAttributes {

      public:

        /**
         * Empty Constructor
         */
        VmgrAttributes() throw();

        /**
         * Empty Destructor
         */
        virtual ~VmgrAttributes() throw();

        /**
         * Get the value of m_vsn
         * @return the value of m_vsn
         */
        std::string vsn() const {
          return m_vsn;
        }

        /**
         * Set the value of m_vsn
         * @param new_var the new value of m_vsn
         */
        void setVsn(std::string new_var) {
          m_vsn = new_var;
        }

        /**
         * Get the value of m_label
         * @return the value of m_label
         */
        std::string label() const {
          return m_label;
        }

        /**
         * Set the value of m_label
         * @param new_var the new value of m_label
         */
        void setLabel(std::string new_var) {
          m_label = new_var;
        }

        /**
         * Get the value of m_dgn
         * @return the value of m_dgn
         */
        std::string dgn() const {
          return m_dgn;
        }

        /**
         * Set the value of m_dgn
         * @param new_var the new value of m_dgn
         */
        void setDgn(std::string new_var) {
          m_dgn = new_var;
        }

        /**
         * Get the value of m_density
         * @return the value of m_density
         */
        std::string density() const {
          return m_density;
        }

        /**
         * Set the value of m_density
         * @param new_var the new value of m_density
         */
        void setDensity(std::string new_var) {
          m_density = new_var;
        }

        /**
         * Get the value of m_model
         * @return the value of m_model
         */
        std::string model() const {
          return m_model;
        }

        /**
         * Set the value of m_model
         * @param new_var the new value of m_model
         */
        void setModel(std::string new_var) {
          m_model = new_var;
        }

        /**
         * Get the value of m_estimatedFreeSpace
         * @return the value of m_estimatedFreeSpace
         */
        u_signed64 estimatedFreeSpace() const {
          return m_estimatedFreeSpace;
        }

        /**
         * Set the value of m_estimatedFreeSpace
         * @param new_var the new value of m_estimatedFreeSpace
         */
        void setEstimatedFreeSpace(u_signed64 new_var) {
          m_estimatedFreeSpace = new_var;
        }

        /**
         * Get the value of m_startFseq
         * @return the value of m_startFseq
         */
        int startFseq() const {
          return m_startFseq;
        }

        /**
         * Set the value of m_startFseq
         * @param new_var the new value of m_startFseq
         */
        void setStartFseq(int new_var) {
          m_startFseq = new_var;
        }

      private:

        std::string m_vsn;

        std::string m_label;

        std::string m_dgn;

        std::string m_density;

        std::string m_model;

        u_signed64 m_estimatedFreeSpace;

        int m_startFseq;

      }; /* end of class VmgrAttributes */

    } /* end of namespace tapegateway */

  } /* end of namespace tape */

} /* end of namespace castor */

#endif // CASTOR_TAPE_TAPEGATEWAY_VMGRATTRIBUTES_HPP
