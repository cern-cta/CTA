/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/tape/tapegateway/DumpParameters.hpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

#ifndef CASTOR_TAPE_TAPEGATEWAY_DUMPPARAMETERS_HPP
#define CASTOR_TAPE_TAPEGATEWAY_DUMPPARAMETERS_HPP

// Include Files
#include "castor/tape/tapegateway/GatewayMessage.hpp"
#include "osdep.h"
#include <iostream>
#include <string>

namespace castor {

  // Forward declarations
  class ObjectSet;
  class IObject;

  namespace tape {

    namespace tapegateway {

      /**
       * class DumpParameters
       */
      class DumpParameters : public virtual GatewayMessage {

      public:

        /**
         * Empty Constructor
         */
        DumpParameters() throw();

        /**
         * Empty Destructor
         */
        virtual ~DumpParameters() throw();

        /**
         * Outputs this object in a human readable format
         * @param stream The stream where to print this object
         * @param indent The indentation to use
         * @param alreadyPrinted The set of objects already printed.
         * This is to avoid looping when printing circular dependencies
         */
        virtual void print(std::ostream& stream,
                           std::string indent,
                           castor::ObjectSet& alreadyPrinted) const;

        /**
         * Outputs this object in a human readable format
         */
        virtual void print() const;

        /**
         * Gets the type of this kind of objects
         */
        static int TYPE();

        /********************************************/
        /* Implementation of IObject abstract class */
        /********************************************/
        /**
         * Gets the type of the object
         */
        virtual int type() const;

        /**
         * virtual method to clone any object
         */
        virtual castor::IObject* clone();

        /*********************************/
        /* End of IObject abstract class */
        /*********************************/
        /**
         * Get the value of m_tapeMaxBytes
         * @return the value of m_tapeMaxBytes
         */
        int tapeMaxBytes() const {
          return m_tapeMaxBytes;
        }

        /**
         * Set the value of m_tapeMaxBytes
         * @param new_var the new value of m_tapeMaxBytes
         */
        void setTapeMaxBytes(int new_var) {
          m_tapeMaxBytes = new_var;
        }

        /**
         * Get the value of m_tapeBlockSize
         * @return the value of m_tapeBlockSize
         */
        int tapeBlockSize() const {
          return m_tapeBlockSize;
        }

        /**
         * Set the value of m_tapeBlockSize
         * @param new_var the new value of m_tapeBlockSize
         */
        void setTapeBlockSize(int new_var) {
          m_tapeBlockSize = new_var;
        }

        /**
         * Get the value of m_tapeConverter
         * @return the value of m_tapeConverter
         */
        int tapeConverter() const {
          return m_tapeConverter;
        }

        /**
         * Set the value of m_tapeConverter
         * @param new_var the new value of m_tapeConverter
         */
        void setTapeConverter(int new_var) {
          m_tapeConverter = new_var;
        }

        /**
         * Get the value of m_tapeErrAction
         * @return the value of m_tapeErrAction
         */
        int tapeErrAction() const {
          return m_tapeErrAction;
        }

        /**
         * Set the value of m_tapeErrAction
         * @param new_var the new value of m_tapeErrAction
         */
        void setTapeErrAction(int new_var) {
          m_tapeErrAction = new_var;
        }

        /**
         * Get the value of m_tapeStartFile
         * @return the value of m_tapeStartFile
         */
        int tapeStartFile() const {
          return m_tapeStartFile;
        }

        /**
         * Set the value of m_tapeStartFile
         * @param new_var the new value of m_tapeStartFile
         */
        void setTapeStartFile(int new_var) {
          m_tapeStartFile = new_var;
        }

        /**
         * Get the value of m_tapeMaxFile
         * @return the value of m_tapeMaxFile
         */
        int tapeMaxFile() const {
          return m_tapeMaxFile;
        }

        /**
         * Set the value of m_tapeMaxFile
         * @param new_var the new value of m_tapeMaxFile
         */
        void setTapeMaxFile(int new_var) {
          m_tapeMaxFile = new_var;
        }

        /**
         * Get the value of m_tapeFromBlock
         * @return the value of m_tapeFromBlock
         */
        int tapeFromBlock() const {
          return m_tapeFromBlock;
        }

        /**
         * Set the value of m_tapeFromBlock
         * @param new_var the new value of m_tapeFromBlock
         */
        void setTapeFromBlock(int new_var) {
          m_tapeFromBlock = new_var;
        }

        /**
         * Get the value of m_tapeToBlock
         * @return the value of m_tapeToBlock
         */
        int tapeToBlock() const {
          return m_tapeToBlock;
        }

        /**
         * Set the value of m_tapeToBlock
         * @param new_var the new value of m_tapeToBlock
         */
        void setTapeToBlock(int new_var) {
          m_tapeToBlock = new_var;
        }

        /**
         * Get the value of m_id
         * The id of this object
         * @return the value of m_id
         */
        u_signed64 id() const {
          return m_id;
        }

        /**
         * Set the value of m_id
         * The id of this object
         * @param new_var the new value of m_id
         */
        void setId(u_signed64 new_var) {
          m_id = new_var;
        }

      private:

        int m_tapeMaxBytes;

        int m_tapeBlockSize;

        int m_tapeConverter;

        int m_tapeErrAction;

        int m_tapeStartFile;

        int m_tapeMaxFile;

        int m_tapeFromBlock;

        int m_tapeToBlock;

        /// The id of this object
        u_signed64 m_id;

      }; /* end of class DumpParameters */

    } /* end of namespace tapegateway */

  } /* end of namespace tape */

} /* end of namespace castor */

#endif // CASTOR_TAPE_TAPEGATEWAY_DUMPPARAMETERS_HPP
