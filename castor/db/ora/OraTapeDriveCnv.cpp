/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/ora/OraTapeDriveCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "OraTapeDriveCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvFactory.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/db/ora/OraCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/stager/ClientIdentification.hpp"
#include "castor/stager/Tape.hpp"
#include "castor/vdqm/DeviceGroupName.hpp"
#include "castor/vdqm/ErrorHistory.hpp"
#include "castor/vdqm/TapeDrive.hpp"
#include "castor/vdqm/TapeDriveCompability.hpp"
#include "castor/vdqm/TapeDriveDedication.hpp"
#include "castor/vdqm/TapeDriveStatusCodes.hpp"
#include "castor/vdqm/TapeRequest.hpp"
#include "castor/vdqm/TapeServer.hpp"
#include <set>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::ora::OraTapeDriveCnv> s_factoryOraTapeDriveCnv;
const castor::ICnvFactory& OraTapeDriveCnvFactory = 
  s_factoryOraTapeDriveCnv;

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::ora::OraTapeDriveCnv::s_insertStatementString =
"INSERT INTO TapeDrive (jobID, modificationTime, resettime, usecount, errcount, transferredMB, totalMB, driveName, tapeAccessMode, id, tape, runningTapeReq, tapeDriveCompability, deviceGroupName, status, tapeServer) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,ids_seq.nextval,:10,:11,:12,:13,:14,:15) RETURNING id INTO :16";

/// SQL statement for request deletion
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteStatementString =
"DELETE FROM TapeDrive WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::ora::OraTapeDriveCnv::s_selectStatementString =
"SELECT jobID, modificationTime, resettime, usecount, errcount, transferredMB, totalMB, driveName, tapeAccessMode, id, tape, runningTapeReq, tapeDriveCompability, deviceGroupName, status, tapeServer FROM TapeDrive WHERE id = :1";

/// SQL statement for request update
const std::string castor::db::ora::OraTapeDriveCnv::s_updateStatementString =
"UPDATE TapeDrive SET jobID = :1, modificationTime = :2, resettime = :3, usecount = :4, errcount = :5, transferredMB = :6, totalMB = :7, driveName = :8, tapeAccessMode = :9, status = :10 WHERE id = :11";

/// SQL statement for type storage
const std::string castor::db::ora::OraTapeDriveCnv::s_storeTypeStatementString =
"INSERT INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL select statement for member tape
const std::string castor::db::ora::OraTapeDriveCnv::s_selectTapeStatementString =
"SELECT id from Tape WHERE  = :1 FOR UPDATE";

/// SQL delete statement for member tape
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteTapeStatementString =
"UPDATE Tape SET  = 0 WHERE id = :1";

/// SQL remote update statement for member tape
const std::string castor::db::ora::OraTapeDriveCnv::s_remoteUpdateTapeStatementString =
"UPDATE Tape SET  = :1 WHERE id = :2";

/// SQL existence statement for member tape
const std::string castor::db::ora::OraTapeDriveCnv::s_checkTapeExistStatementString =
"SELECT id from Tape WHERE id = :1";

/// SQL update statement for member tape
const std::string castor::db::ora::OraTapeDriveCnv::s_updateTapeStatementString =
"UPDATE TapeDrive SET tape = :1 WHERE id = :2";

/// SQL select statement for member runningTapeReq
const std::string castor::db::ora::OraTapeDriveCnv::s_selectTapeRequestStatementString =
"SELECT id from TapeRequest WHERE tapeDrive = :1 FOR UPDATE";

/// SQL delete statement for member runningTapeReq
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteTapeRequestStatementString =
"UPDATE TapeRequest SET tapeDrive = 0 WHERE id = :1";

/// SQL remote update statement for member runningTapeReq
const std::string castor::db::ora::OraTapeDriveCnv::s_remoteUpdateTapeRequestStatementString =
"UPDATE TapeRequest SET tapeDrive = :1 WHERE id = :2";

/// SQL existence statement for member runningTapeReq
const std::string castor::db::ora::OraTapeDriveCnv::s_checkTapeRequestExistStatementString =
"SELECT id from TapeRequest WHERE id = :1";

/// SQL update statement for member runningTapeReq
const std::string castor::db::ora::OraTapeDriveCnv::s_updateTapeRequestStatementString =
"UPDATE TapeDrive SET runningTapeReq = :1 WHERE id = :2";

/// SQL select statement for member errorHistory
const std::string castor::db::ora::OraTapeDriveCnv::s_selectErrorHistoryStatementString =
"SELECT id from ErrorHistory WHERE tapeDrive = :1 FOR UPDATE";

/// SQL delete statement for member errorHistory
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteErrorHistoryStatementString =
"UPDATE ErrorHistory SET tapeDrive = 0 WHERE id = :1";

/// SQL remote update statement for member errorHistory
const std::string castor::db::ora::OraTapeDriveCnv::s_remoteUpdateErrorHistoryStatementString =
"UPDATE ErrorHistory SET tapeDrive = :1 WHERE id = :2";

/// SQL select statement for member tapeDriveDedication
const std::string castor::db::ora::OraTapeDriveCnv::s_selectTapeDriveDedicationStatementString =
"SELECT id from TapeDriveDedication WHERE tapeDrive = :1 FOR UPDATE";

/// SQL delete statement for member tapeDriveDedication
const std::string castor::db::ora::OraTapeDriveCnv::s_deleteTapeDriveDedicationStatementString =
"UPDATE TapeDriveDedication SET tapeDrive = 0 WHERE id = :1";

/// SQL remote update statement for member tapeDriveDedication
const std::string castor::db::ora::OraTapeDriveCnv::s_remoteUpdateTapeDriveDedicationStatementString =
"UPDATE TapeDriveDedication SET tapeDrive = :1 WHERE id = :2";

/// SQL existence statement for member tapeDriveCompability
const std::string castor::db::ora::OraTapeDriveCnv::s_checkTapeDriveCompabilityExistStatementString =
"SELECT id from TapeDriveCompability WHERE id = :1";

/// SQL update statement for member tapeDriveCompability
const std::string castor::db::ora::OraTapeDriveCnv::s_updateTapeDriveCompabilityStatementString =
"UPDATE TapeDrive SET tapeDriveCompability = :1 WHERE id = :2";

/// SQL existence statement for member deviceGroupName
const std::string castor::db::ora::OraTapeDriveCnv::s_checkDeviceGroupNameExistStatementString =
"SELECT id from DeviceGroupName WHERE id = :1";

/// SQL update statement for member deviceGroupName
const std::string castor::db::ora::OraTapeDriveCnv::s_updateDeviceGroupNameStatementString =
"UPDATE TapeDrive SET deviceGroupName = :1 WHERE id = :2";

/// SQL existence statement for member tapeServer
const std::string castor::db::ora::OraTapeDriveCnv::s_checkTapeServerExistStatementString =
"SELECT id from TapeServer WHERE id = :1";

/// SQL update statement for member tapeServer
const std::string castor::db::ora::OraTapeDriveCnv::s_updateTapeServerStatementString =
"UPDATE TapeDrive SET tapeServer = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeDriveCnv::OraTapeDriveCnv(castor::ICnvSvc* cnvSvc) :
  OraBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_selectTapeStatement(0),
  m_deleteTapeStatement(0),
  m_remoteUpdateTapeStatement(0),
  m_checkTapeExistStatement(0),
  m_updateTapeStatement(0),
  m_selectTapeRequestStatement(0),
  m_deleteTapeRequestStatement(0),
  m_remoteUpdateTapeRequestStatement(0),
  m_checkTapeRequestExistStatement(0),
  m_updateTapeRequestStatement(0),
  m_selectErrorHistoryStatement(0),
  m_deleteErrorHistoryStatement(0),
  m_remoteUpdateErrorHistoryStatement(0),
  m_selectTapeDriveDedicationStatement(0),
  m_deleteTapeDriveDedicationStatement(0),
  m_remoteUpdateTapeDriveDedicationStatement(0),
  m_checkTapeDriveCompabilityExistStatement(0),
  m_updateTapeDriveCompabilityStatement(0),
  m_checkDeviceGroupNameExistStatement(0),
  m_updateDeviceGroupNameStatement(0),
  m_checkTapeServerExistStatement(0),
  m_updateTapeServerStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeDriveCnv::~OraTapeDriveCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    deleteStatement(m_insertStatement);
    deleteStatement(m_deleteStatement);
    deleteStatement(m_selectStatement);
    deleteStatement(m_updateStatement);
    deleteStatement(m_storeTypeStatement);
    deleteStatement(m_deleteTypeStatement);
    deleteStatement(m_deleteTapeStatement);
    deleteStatement(m_selectTapeStatement);
    deleteStatement(m_remoteUpdateTapeStatement);
    deleteStatement(m_checkTapeExistStatement);
    deleteStatement(m_updateTapeStatement);
    deleteStatement(m_deleteTapeRequestStatement);
    deleteStatement(m_selectTapeRequestStatement);
    deleteStatement(m_remoteUpdateTapeRequestStatement);
    deleteStatement(m_checkTapeRequestExistStatement);
    deleteStatement(m_updateTapeRequestStatement);
    deleteStatement(m_deleteErrorHistoryStatement);
    deleteStatement(m_selectErrorHistoryStatement);
    deleteStatement(m_remoteUpdateErrorHistoryStatement);
    deleteStatement(m_deleteTapeDriveDedicationStatement);
    deleteStatement(m_selectTapeDriveDedicationStatement);
    deleteStatement(m_remoteUpdateTapeDriveDedicationStatement);
    deleteStatement(m_checkTapeDriveCompabilityExistStatement);
    deleteStatement(m_updateTapeDriveCompabilityStatement);
    deleteStatement(m_checkDeviceGroupNameExistStatement);
    deleteStatement(m_updateDeviceGroupNameStatement);
    deleteStatement(m_checkTapeServerExistStatement);
    deleteStatement(m_updateTapeServerStatement);
  } catch (oracle::occi::SQLException e) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_selectTapeStatement = 0;
  m_deleteTapeStatement = 0;
  m_remoteUpdateTapeStatement = 0;
  m_checkTapeExistStatement = 0;
  m_updateTapeStatement = 0;
  m_selectTapeRequestStatement = 0;
  m_deleteTapeRequestStatement = 0;
  m_remoteUpdateTapeRequestStatement = 0;
  m_checkTapeRequestExistStatement = 0;
  m_updateTapeRequestStatement = 0;
  m_selectErrorHistoryStatement = 0;
  m_deleteErrorHistoryStatement = 0;
  m_remoteUpdateErrorHistoryStatement = 0;
  m_selectTapeDriveDedicationStatement = 0;
  m_deleteTapeDriveDedicationStatement = 0;
  m_remoteUpdateTapeDriveDedicationStatement = 0;
  m_checkTapeDriveCompabilityExistStatement = 0;
  m_updateTapeDriveCompabilityStatement = 0;
  m_checkDeviceGroupNameExistStatement = 0;
  m_updateDeviceGroupNameStatement = 0;
  m_checkTapeServerExistStatement = 0;
  m_updateTapeServerStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeDriveCnv::ObjType() {
  return castor::vdqm::TapeDrive::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeDriveCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRep(castor::IAddress* address,
                                               castor::IObject* object,
                                               unsigned int type,
                                               bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeDrive* obj = 
    dynamic_cast<castor::vdqm::TapeDrive*>(object);
  try {
    switch (type) {
    case castor::OBJ_Tape :
      fillRepTape(obj);
      break;
    case castor::OBJ_TapeRequest :
      fillRepTapeRequest(obj);
      break;
    case castor::OBJ_ErrorHistory :
      fillRepErrorHistory(obj);
      break;
    case castor::OBJ_TapeDriveDedication :
      fillRepTapeDriveDedication(obj);
      break;
    case castor::OBJ_TapeDriveCompability :
      fillRepTapeDriveCompability(obj);
      break;
    case castor::OBJ_DeviceGroupName :
      fillRepDeviceGroupName(obj);
      break;
    case castor::OBJ_TapeServer :
      fillRepTapeServer(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    castor::exception::Internal ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.what() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepTape(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  // Check selectTape statement
  if (0 == m_selectTapeStatement) {
    m_selectTapeStatement = createStatement(s_selectTapeStatementString);
  }
  // retrieve the object from the database
  m_selectTapeStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectTapeStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    u_signed64 tapeId = (u_signed64)rset->getDouble(1);
    if (0 != tapeId &&
        (0 == obj->tape() ||
         obj->tape()->id() != tapeId)) {
      if (0 == m_deleteTapeStatement) {
        m_deleteTapeStatement = createStatement(s_deleteTapeStatementString);
      }
      m_deleteTapeStatement->setDouble(1, tapeId);
      m_deleteTapeStatement->executeUpdate();
    }
  }
  // Close resultset
  m_selectTapeStatement->closeResultSet(rset);
  if (0 != obj->tape()) {
    // Check checkTapeExist statement
    if (0 == m_checkTapeExistStatement) {
      m_checkTapeExistStatement = createStatement(s_checkTapeExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeExistStatement->setDouble(1, obj->tape()->id());
    oracle::occi::ResultSet *rset = m_checkTapeExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->tape(), false, OBJ_TapeDrive);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeStatement) {
        m_remoteUpdateTapeStatement = createStatement(s_remoteUpdateTapeStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeStatement->setDouble(1, obj->id());
      m_remoteUpdateTapeStatement->setDouble(2, obj->tape()->id());
      m_remoteUpdateTapeStatement->executeUpdate();
    }
    // Close resultset
    m_checkTapeExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeStatement) {
    m_updateTapeStatement = createStatement(s_updateTapeStatementString);
  }
  // Update local object
  m_updateTapeStatement->setDouble(1, 0 == obj->tape() ? 0 : obj->tape()->id());
  m_updateTapeStatement->setDouble(2, obj->id());
  m_updateTapeStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeRequest
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepTapeRequest(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  // Check selectTapeRequest statement
  if (0 == m_selectTapeRequestStatement) {
    m_selectTapeRequestStatement = createStatement(s_selectTapeRequestStatementString);
  }
  // retrieve the object from the database
  m_selectTapeRequestStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectTapeRequestStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    u_signed64 runningTapeReqId = (u_signed64)rset->getDouble(1);
    if (0 != runningTapeReqId &&
        (0 == obj->runningTapeReq() ||
         obj->runningTapeReq()->id() != runningTapeReqId)) {
      if (0 == m_deleteTapeRequestStatement) {
        m_deleteTapeRequestStatement = createStatement(s_deleteTapeRequestStatementString);
      }
      m_deleteTapeRequestStatement->setDouble(1, runningTapeReqId);
      m_deleteTapeRequestStatement->executeUpdate();
    }
  }
  // Close resultset
  m_selectTapeRequestStatement->closeResultSet(rset);
  if (0 != obj->runningTapeReq()) {
    // Check checkTapeRequestExist statement
    if (0 == m_checkTapeRequestExistStatement) {
      m_checkTapeRequestExistStatement = createStatement(s_checkTapeRequestExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeRequestExistStatement->setDouble(1, obj->runningTapeReq()->id());
    oracle::occi::ResultSet *rset = m_checkTapeRequestExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->runningTapeReq(), false, OBJ_TapeDrive);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeRequestStatement) {
        m_remoteUpdateTapeRequestStatement = createStatement(s_remoteUpdateTapeRequestStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeRequestStatement->setDouble(1, obj->id());
      m_remoteUpdateTapeRequestStatement->setDouble(2, obj->runningTapeReq()->id());
      m_remoteUpdateTapeRequestStatement->executeUpdate();
    }
    // Close resultset
    m_checkTapeRequestExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeRequestStatement) {
    m_updateTapeRequestStatement = createStatement(s_updateTapeRequestStatementString);
  }
  // Update local object
  m_updateTapeRequestStatement->setDouble(1, 0 == obj->runningTapeReq() ? 0 : obj->runningTapeReq()->id());
  m_updateTapeRequestStatement->setDouble(2, obj->id());
  m_updateTapeRequestStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepErrorHistory
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepErrorHistory(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  // check select statement
  if (0 == m_selectErrorHistoryStatement) {
    m_selectErrorHistoryStatement = createStatement(s_selectErrorHistoryStatementString);
  }
  // Get current database data
  std::set<int> errorHistoryList;
  m_selectErrorHistoryStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectErrorHistoryStatement->executeQuery();
  while (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    errorHistoryList.insert(rset->getInt(1));
  }
  m_selectErrorHistoryStatement->closeResultSet(rset);
  // update errorHistory and create new ones
  for (std::vector<castor::vdqm::ErrorHistory*>::iterator it = obj->errorHistory().begin();
       it != obj->errorHistory().end();
       it++) {
    if (0 == (*it)->id()) {
      cnvSvc()->createRep(0, *it, false, OBJ_TapeDrive);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateErrorHistoryStatement) {
        m_remoteUpdateErrorHistoryStatement = createStatement(s_remoteUpdateErrorHistoryStatementString);
      }
      // Update remote object
      m_remoteUpdateErrorHistoryStatement->setDouble(1, obj->id());
      m_remoteUpdateErrorHistoryStatement->setDouble(2, (*it)->id());
      m_remoteUpdateErrorHistoryStatement->executeUpdate();
      std::set<int>::iterator item;
      if ((item = errorHistoryList.find((*it)->id())) != errorHistoryList.end()) {
        errorHistoryList.erase(item);
      }
    }
  }
  // Delete old links
  for (std::set<int>::iterator it = errorHistoryList.begin();
       it != errorHistoryList.end();
       it++) {
    if (0 == m_deleteErrorHistoryStatement) {
      m_deleteErrorHistoryStatement = createStatement(s_deleteErrorHistoryStatementString);
    }
    m_deleteErrorHistoryStatement->setDouble(1, *it);
    m_deleteErrorHistoryStatement->executeUpdate();
  }
}

//------------------------------------------------------------------------------
// fillRepTapeDriveDedication
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepTapeDriveDedication(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  // check select statement
  if (0 == m_selectTapeDriveDedicationStatement) {
    m_selectTapeDriveDedicationStatement = createStatement(s_selectTapeDriveDedicationStatementString);
  }
  // Get current database data
  std::set<int> tapeDriveDedicationList;
  m_selectTapeDriveDedicationStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectTapeDriveDedicationStatement->executeQuery();
  while (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    tapeDriveDedicationList.insert(rset->getInt(1));
  }
  m_selectTapeDriveDedicationStatement->closeResultSet(rset);
  // update tapeDriveDedication and create new ones
  for (std::vector<castor::vdqm::TapeDriveDedication*>::iterator it = obj->tapeDriveDedication().begin();
       it != obj->tapeDriveDedication().end();
       it++) {
    if (0 == (*it)->id()) {
      cnvSvc()->createRep(0, *it, false, OBJ_TapeDrive);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeDriveDedicationStatement) {
        m_remoteUpdateTapeDriveDedicationStatement = createStatement(s_remoteUpdateTapeDriveDedicationStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeDriveDedicationStatement->setDouble(1, obj->id());
      m_remoteUpdateTapeDriveDedicationStatement->setDouble(2, (*it)->id());
      m_remoteUpdateTapeDriveDedicationStatement->executeUpdate();
      std::set<int>::iterator item;
      if ((item = tapeDriveDedicationList.find((*it)->id())) != tapeDriveDedicationList.end()) {
        tapeDriveDedicationList.erase(item);
      }
    }
  }
  // Delete old links
  for (std::set<int>::iterator it = tapeDriveDedicationList.begin();
       it != tapeDriveDedicationList.end();
       it++) {
    if (0 == m_deleteTapeDriveDedicationStatement) {
      m_deleteTapeDriveDedicationStatement = createStatement(s_deleteTapeDriveDedicationStatementString);
    }
    m_deleteTapeDriveDedicationStatement->setDouble(1, *it);
    m_deleteTapeDriveDedicationStatement->executeUpdate();
  }
}

//------------------------------------------------------------------------------
// fillRepTapeDriveCompability
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepTapeDriveCompability(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->tapeDriveCompability()) {
    // Check checkTapeDriveCompabilityExist statement
    if (0 == m_checkTapeDriveCompabilityExistStatement) {
      m_checkTapeDriveCompabilityExistStatement = createStatement(s_checkTapeDriveCompabilityExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeDriveCompabilityExistStatement->setDouble(1, obj->tapeDriveCompability()->id());
    oracle::occi::ResultSet *rset = m_checkTapeDriveCompabilityExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->tapeDriveCompability(), false);
    }
    // Close resultset
    m_checkTapeDriveCompabilityExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeDriveCompabilityStatement) {
    m_updateTapeDriveCompabilityStatement = createStatement(s_updateTapeDriveCompabilityStatementString);
  }
  // Update local object
  m_updateTapeDriveCompabilityStatement->setDouble(1, 0 == obj->tapeDriveCompability() ? 0 : obj->tapeDriveCompability()->id());
  m_updateTapeDriveCompabilityStatement->setDouble(2, obj->id());
  m_updateTapeDriveCompabilityStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepDeviceGroupName(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->deviceGroupName()) {
    // Check checkDeviceGroupNameExist statement
    if (0 == m_checkDeviceGroupNameExistStatement) {
      m_checkDeviceGroupNameExistStatement = createStatement(s_checkDeviceGroupNameExistStatementString);
    }
    // retrieve the object from the database
    m_checkDeviceGroupNameExistStatement->setDouble(1, obj->deviceGroupName()->id());
    oracle::occi::ResultSet *rset = m_checkDeviceGroupNameExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->deviceGroupName(), false);
    }
    // Close resultset
    m_checkDeviceGroupNameExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateDeviceGroupNameStatement) {
    m_updateDeviceGroupNameStatement = createStatement(s_updateDeviceGroupNameStatementString);
  }
  // Update local object
  m_updateDeviceGroupNameStatement->setDouble(1, 0 == obj->deviceGroupName() ? 0 : obj->deviceGroupName()->id());
  m_updateDeviceGroupNameStatement->setDouble(2, obj->id());
  m_updateDeviceGroupNameStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillRepTapeServer(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->tapeServer()) {
    // Check checkTapeServerExist statement
    if (0 == m_checkTapeServerExistStatement) {
      m_checkTapeServerExistStatement = createStatement(s_checkTapeServerExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeServerExistStatement->setDouble(1, obj->tapeServer()->id());
    oracle::occi::ResultSet *rset = m_checkTapeServerExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->tapeServer(), false);
    }
    // Close resultset
    m_checkTapeServerExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeServerStatement) {
    m_updateTapeServerStatement = createStatement(s_updateTapeServerStatementString);
  }
  // Update local object
  m_updateTapeServerStatement->setDouble(1, 0 == obj->tapeServer() ? 0 : obj->tapeServer()->id());
  m_updateTapeServerStatement->setDouble(2, obj->id());
  m_updateTapeServerStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObj(castor::IAddress* address,
                                               castor::IObject* object,
                                               unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeDrive* obj = 
    dynamic_cast<castor::vdqm::TapeDrive*>(object);
  switch (type) {
  case castor::OBJ_Tape :
    fillObjTape(obj);
    break;
  case castor::OBJ_TapeRequest :
    fillObjTapeRequest(obj);
    break;
  case castor::OBJ_ErrorHistory :
    fillObjErrorHistory(obj);
    break;
  case castor::OBJ_TapeDriveDedication :
    fillObjTapeDriveDedication(obj);
    break;
  case castor::OBJ_TapeDriveCompability :
    fillObjTapeDriveCompability(obj);
    break;
  case castor::OBJ_DeviceGroupName :
    fillObjDeviceGroupName(obj);
    break;
  case castor::OBJ_TapeServer :
    fillObjTapeServer(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillObjTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjTape(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeId = (u_signed64)rset->getDouble(11);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tape() &&
      (0 == tapeId ||
       obj->tape()->id() != tapeId)) {
    obj->setTape(0);
  }
  // Update object or create new one
  if (0 != tapeId) {
    if (0 == obj->tape()) {
      obj->setTape
        (dynamic_cast<castor::stager::Tape*>
         (cnvSvc()->getObjFromId(tapeId)));
    } else {
      cnvSvc()->updateObj(obj->tape());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeRequest
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjTapeRequest(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 runningTapeReqId = (u_signed64)rset->getDouble(12);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->runningTapeReq() &&
      (0 == runningTapeReqId ||
       obj->runningTapeReq()->id() != runningTapeReqId)) {
    obj->runningTapeReq()->setTapeDrive(0);
    obj->setRunningTapeReq(0);
  }
  // Update object or create new one
  if (0 != runningTapeReqId) {
    if (0 == obj->runningTapeReq()) {
      obj->setRunningTapeReq
        (dynamic_cast<castor::vdqm::TapeRequest*>
         (cnvSvc()->getObjFromId(runningTapeReqId)));
    } else {
      cnvSvc()->updateObj(obj->runningTapeReq());
    }
    obj->runningTapeReq()->setTapeDrive(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjErrorHistory
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjErrorHistory(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectErrorHistoryStatement) {
    m_selectErrorHistoryStatement = createStatement(s_selectErrorHistoryStatementString);
  }
  // retrieve the object from the database
  std::set<int> errorHistoryList;
  m_selectErrorHistoryStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectErrorHistoryStatement->executeQuery();
  while (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    errorHistoryList.insert(rset->getInt(1));
  }
  // Close ResultSet
  m_selectErrorHistoryStatement->closeResultSet(rset);
  // Update objects and mark old ones for deletion
  std::vector<castor::vdqm::ErrorHistory*> toBeDeleted;
  for (std::vector<castor::vdqm::ErrorHistory*>::iterator it = obj->errorHistory().begin();
       it != obj->errorHistory().end();
       it++) {
    std::set<int>::iterator item;
    if ((item = errorHistoryList.find((*it)->id())) == errorHistoryList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      errorHistoryList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::vdqm::ErrorHistory*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeErrorHistory(*it);
    (*it)->setTapeDrive(0);
  }
  // Create new objects
  for (std::set<int>::iterator it = errorHistoryList.begin();
       it != errorHistoryList.end();
       it++) {
    IObject* item = cnvSvc()->getObjFromId(*it);
    castor::vdqm::ErrorHistory* remoteObj = 
      dynamic_cast<castor::vdqm::ErrorHistory*>(item);
    obj->addErrorHistory(remoteObj);
    remoteObj->setTapeDrive(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjTapeDriveDedication
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjTapeDriveDedication(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectTapeDriveDedicationStatement) {
    m_selectTapeDriveDedicationStatement = createStatement(s_selectTapeDriveDedicationStatementString);
  }
  // retrieve the object from the database
  std::set<int> tapeDriveDedicationList;
  m_selectTapeDriveDedicationStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectTapeDriveDedicationStatement->executeQuery();
  while (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    tapeDriveDedicationList.insert(rset->getInt(1));
  }
  // Close ResultSet
  m_selectTapeDriveDedicationStatement->closeResultSet(rset);
  // Update objects and mark old ones for deletion
  std::vector<castor::vdqm::TapeDriveDedication*> toBeDeleted;
  for (std::vector<castor::vdqm::TapeDriveDedication*>::iterator it = obj->tapeDriveDedication().begin();
       it != obj->tapeDriveDedication().end();
       it++) {
    std::set<int>::iterator item;
    if ((item = tapeDriveDedicationList.find((*it)->id())) == tapeDriveDedicationList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      tapeDriveDedicationList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::vdqm::TapeDriveDedication*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeTapeDriveDedication(*it);
    (*it)->setTapeDrive(0);
  }
  // Create new objects
  for (std::set<int>::iterator it = tapeDriveDedicationList.begin();
       it != tapeDriveDedicationList.end();
       it++) {
    IObject* item = cnvSvc()->getObjFromId(*it);
    castor::vdqm::TapeDriveDedication* remoteObj = 
      dynamic_cast<castor::vdqm::TapeDriveDedication*>(item);
    obj->addTapeDriveDedication(remoteObj);
    remoteObj->setTapeDrive(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjTapeDriveCompability
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjTapeDriveCompability(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeDriveCompabilityId = (u_signed64)rset->getDouble(13);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tapeDriveCompability() &&
      (0 == tapeDriveCompabilityId ||
       obj->tapeDriveCompability()->id() != tapeDriveCompabilityId)) {
    obj->setTapeDriveCompability(0);
  }
  // Update object or create new one
  if (0 != tapeDriveCompabilityId) {
    if (0 == obj->tapeDriveCompability()) {
      obj->setTapeDriveCompability
        (dynamic_cast<castor::vdqm::TapeDriveCompability*>
         (cnvSvc()->getObjFromId(tapeDriveCompabilityId)));
    } else {
      cnvSvc()->updateObj(obj->tapeDriveCompability());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjDeviceGroupName(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 deviceGroupNameId = (u_signed64)rset->getDouble(14);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->deviceGroupName() &&
      (0 == deviceGroupNameId ||
       obj->deviceGroupName()->id() != deviceGroupNameId)) {
    obj->setDeviceGroupName(0);
  }
  // Update object or create new one
  if (0 != deviceGroupNameId) {
    if (0 == obj->deviceGroupName()) {
      obj->setDeviceGroupName
        (dynamic_cast<castor::vdqm::DeviceGroupName*>
         (cnvSvc()->getObjFromId(deviceGroupNameId)));
    } else {
      cnvSvc()->updateObj(obj->deviceGroupName());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::fillObjTapeServer(castor::vdqm::TapeDrive* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeServerId = (u_signed64)rset->getDouble(16);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tapeServer() &&
      (0 == tapeServerId ||
       obj->tapeServer()->id() != tapeServerId)) {
    obj->tapeServer()->removeTapeDrives(obj);
    obj->setTapeServer(0);
  }
  // Update object or create new one
  if (0 != tapeServerId) {
    if (0 == obj->tapeServer()) {
      obj->setTapeServer
        (dynamic_cast<castor::vdqm::TapeServer*>
         (cnvSvc()->getObjFromId(tapeServerId)));
    } else {
      cnvSvc()->updateObj(obj->tapeServer());
    }
    obj->tapeServer()->addTapeDrives(obj);
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::createRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool autocommit,
                                                 unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeDrive* obj = 
    dynamic_cast<castor::vdqm::TapeDrive*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(16, oracle::occi::OCCIDOUBLE);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setInt(1, obj->jobID());
    m_insertStatement->setInt(2, obj->modificationTime());
    m_insertStatement->setInt(3, obj->resettime());
    m_insertStatement->setInt(4, obj->usecount());
    m_insertStatement->setInt(5, obj->errcount());
    m_insertStatement->setInt(6, obj->transferredMB());
    m_insertStatement->setDouble(7, obj->totalMB());
    m_insertStatement->setString(8, obj->driveName());
    m_insertStatement->setInt(9, obj->tapeAccessMode());
    m_insertStatement->setDouble(10, (type == OBJ_Tape && obj->tape() != 0) ? obj->tape()->id() : 0);
    m_insertStatement->setDouble(11, (type == OBJ_TapeRequest && obj->runningTapeReq() != 0) ? obj->runningTapeReq()->id() : 0);
    m_insertStatement->setDouble(12, (type == OBJ_TapeDriveCompability && obj->tapeDriveCompability() != 0) ? obj->tapeDriveCompability()->id() : 0);
    m_insertStatement->setDouble(13, (type == OBJ_DeviceGroupName && obj->deviceGroupName() != 0) ? obj->deviceGroupName()->id() : 0);
    m_insertStatement->setInt(14, (int)obj->status());
    m_insertStatement->setDouble(15, (type == OBJ_TapeServer && obj->tapeServer() != 0) ? obj->tapeServer()->id() : 0);
    m_insertStatement->executeUpdate();
    obj->setId((u_signed64)m_insertStatement->getDouble(16));
    m_storeTypeStatement->setDouble(1, obj->id());
    m_storeTypeStatement->setInt(2, obj->type());
    m_storeTypeStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_insertStatementString << std::endl
                    << "and parameters' values were :" << std::endl
                    << "  jobID : " << obj->jobID() << std::endl
                    << "  modificationTime : " << obj->modificationTime() << std::endl
                    << "  resettime : " << obj->resettime() << std::endl
                    << "  usecount : " << obj->usecount() << std::endl
                    << "  errcount : " << obj->errcount() << std::endl
                    << "  transferredMB : " << obj->transferredMB() << std::endl
                    << "  totalMB : " << obj->totalMB() << std::endl
                    << "  driveName : " << obj->driveName() << std::endl
                    << "  tapeAccessMode : " << obj->tapeAccessMode() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  tape : " << obj->tape() << std::endl
                    << "  runningTapeReq : " << obj->runningTapeReq() << std::endl
                    << "  tapeDriveCompability : " << obj->tapeDriveCompability() << std::endl
                    << "  deviceGroupName : " << obj->deviceGroupName() << std::endl
                    << "  status : " << obj->status() << std::endl
                    << "  tapeServer : " << obj->tapeServer() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::updateRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeDrive* obj = 
    dynamic_cast<castor::vdqm::TapeDrive*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setInt(1, obj->jobID());
    m_updateStatement->setInt(2, obj->modificationTime());
    m_updateStatement->setInt(3, obj->resettime());
    m_updateStatement->setInt(4, obj->usecount());
    m_updateStatement->setInt(5, obj->errcount());
    m_updateStatement->setInt(6, obj->transferredMB());
    m_updateStatement->setDouble(7, obj->totalMB());
    m_updateStatement->setString(8, obj->driveName());
    m_updateStatement->setInt(9, obj->tapeAccessMode());
    m_updateStatement->setInt(10, (int)obj->status());
    m_updateStatement->setDouble(11, obj->id());
    m_updateStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::deleteRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeDrive* obj = 
    dynamic_cast<castor::vdqm::TapeDrive*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setDouble(1, obj->id());
    m_deleteTypeStatement->executeUpdate();
    m_deleteStatement->setDouble(1, obj->id());
    m_deleteStatement->executeUpdate();
    if (obj->() != 0) {
      cnvSvc()->deleteRep(0, obj->(), false);
    }
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_deleteStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::ora::OraTapeDriveCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setDouble(1, ad->target());
    oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::vdqm::TapeDrive* object = new castor::vdqm::TapeDrive();
    // Now retrieve and set members
    object->setJobID(rset->getInt(1));
    object->setModificationTime(rset->getInt(2));
    object->setResettime(rset->getInt(3));
    object->setUsecount(rset->getInt(4));
    object->setErrcount(rset->getInt(5));
    object->setTransferredMB(rset->getInt(6));
    object->setTotalMB((u_signed64)rset->getDouble(7));
    object->setDriveName(rset->getString(8));
    object->setTapeAccessMode(rset->getInt(9));
    object->setId((u_signed64)rset->getDouble(10));
    object->setStatus((enum castor::vdqm::TapeDriveStatusCodes)rset->getInt(15));
    m_selectStatement->closeResultSet(rset);
    return object;
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_selectStatementString << std::endl
                    << "and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeDriveCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setDouble(1, obj->id());
    oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::vdqm::TapeDrive* object = 
      dynamic_cast<castor::vdqm::TapeDrive*>(obj);
    object->setJobID(rset->getInt(1));
    object->setModificationTime(rset->getInt(2));
    object->setResettime(rset->getInt(3));
    object->setUsecount(rset->getInt(4));
    object->setErrcount(rset->getInt(5));
    object->setTransferredMB(rset->getInt(6));
    object->setTotalMB((u_signed64)rset->getDouble(7));
    object->setDriveName(rset->getString(8));
    object->setTapeAccessMode(rset->getInt(9));
    object->setId((u_signed64)rset->getDouble(10));
    object->setStatus((enum castor::vdqm::TapeDriveStatusCodes)rset->getInt(15));
    m_selectStatement->closeResultSet(rset);
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

