/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/ora/OraTapeRequestCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "OraTapeRequestCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvFactory.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/db/ora/OraCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/stager/ClientIdentification.hpp"
#include "castor/stager/Tape.hpp"
#include "castor/vdqm/ExtendedDeviceGroup.hpp"
#include "castor/vdqm/TapeRequest.hpp"
#include "castor/vdqm/TapeServer.hpp"

//------------------------------------------------------------------------------
// Instantiation of a static factory class
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::ora::OraTapeRequestCnv> s_factoryOraTapeRequestCnv;
const castor::ICnvFactory& OraTapeRequestCnvFactory = 
  s_factoryOraTapeRequestCnv;

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::ora::OraTapeRequestCnv::s_insertStatementString =
"INSERT INTO TapeRequest (priority, creationTime, id, tape, client, reqExtDevGrp, requestedSrv) VALUES (:1,:2,ids_seq.nextval,:3,:4,:5,:6) RETURNING id INTO :7";

/// SQL statement for request deletion
const std::string castor::db::ora::OraTapeRequestCnv::s_deleteStatementString =
"DELETE FROM TapeRequest WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::ora::OraTapeRequestCnv::s_selectStatementString =
"SELECT priority, creationTime, id, tape, client, reqExtDevGrp, requestedSrv FROM TapeRequest WHERE id = :1";

/// SQL statement for request update
const std::string castor::db::ora::OraTapeRequestCnv::s_updateStatementString =
"UPDATE TapeRequest SET priority = :1 WHERE id = :2";

/// SQL statement for type storage
const std::string castor::db::ora::OraTapeRequestCnv::s_storeTypeStatementString =
"INSERT INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::ora::OraTapeRequestCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member tape
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeExistStatementString =
"SELECT id from Tape WHERE id = :1";

/// SQL update statement for member tape
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeStatementString =
"UPDATE TapeRequest SET tape = :1 WHERE id = :2";

/// SQL existence statement for member client
const std::string castor::db::ora::OraTapeRequestCnv::s_checkClientIdentificationExistStatementString =
"SELECT id from ClientIdentification WHERE id = :1";

/// SQL update statement for member client
const std::string castor::db::ora::OraTapeRequestCnv::s_updateClientIdentificationStatementString =
"UPDATE TapeRequest SET client = :1 WHERE id = :2";

/// SQL existence statement for member reqExtDevGrp
const std::string castor::db::ora::OraTapeRequestCnv::s_checkExtendedDeviceGroupExistStatementString =
"SELECT id from ExtendedDeviceGroup WHERE id = :1";

/// SQL update statement for member reqExtDevGrp
const std::string castor::db::ora::OraTapeRequestCnv::s_updateExtendedDeviceGroupStatementString =
"UPDATE TapeRequest SET reqExtDevGrp = :1 WHERE id = :2";

/// SQL existence statement for member requestedSrv
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeServerExistStatementString =
"SELECT id from TapeServer WHERE id = :1";

/// SQL update statement for member requestedSrv
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeServerStatementString =
"UPDATE TapeRequest SET requestedSrv = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeRequestCnv::OraTapeRequestCnv(castor::ICnvSvc* cnvSvc) :
  OraBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkTapeExistStatement(0),
  m_updateTapeStatement(0),
  m_checkClientIdentificationExistStatement(0),
  m_updateClientIdentificationStatement(0),
  m_checkExtendedDeviceGroupExistStatement(0),
  m_updateExtendedDeviceGroupStatement(0),
  m_checkTapeServerExistStatement(0),
  m_updateTapeServerStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeRequestCnv::~OraTapeRequestCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    deleteStatement(m_insertStatement);
    deleteStatement(m_deleteStatement);
    deleteStatement(m_selectStatement);
    deleteStatement(m_updateStatement);
    deleteStatement(m_storeTypeStatement);
    deleteStatement(m_deleteTypeStatement);
    deleteStatement(m_checkTapeExistStatement);
    deleteStatement(m_updateTapeStatement);
    deleteStatement(m_checkClientIdentificationExistStatement);
    deleteStatement(m_updateClientIdentificationStatement);
    deleteStatement(m_checkExtendedDeviceGroupExistStatement);
    deleteStatement(m_updateExtendedDeviceGroupStatement);
    deleteStatement(m_checkTapeServerExistStatement);
    deleteStatement(m_updateTapeServerStatement);
  } catch (oracle::occi::SQLException e) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkTapeExistStatement = 0;
  m_updateTapeStatement = 0;
  m_checkClientIdentificationExistStatement = 0;
  m_updateClientIdentificationStatement = 0;
  m_checkExtendedDeviceGroupExistStatement = 0;
  m_updateExtendedDeviceGroupStatement = 0;
  m_checkTapeServerExistStatement = 0;
  m_updateTapeServerStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeRequestCnv::ObjType() {
  return castor::vdqm::TapeRequest::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeRequestCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 unsigned int type,
                                                 bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  try {
    switch (type) {
    case castor::OBJ_Tape :
      fillRepTape(obj);
      break;
    case castor::OBJ_ClientIdentification :
      fillRepClientIdentification(obj);
      break;
    case castor::OBJ_ExtendedDeviceGroup :
      fillRepExtendedDeviceGroup(obj);
      break;
    case castor::OBJ_TapeServer :
      fillRepTapeServer(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    castor::exception::Internal ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.what() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->tape()) {
    // Check checkTapeExist statement
    if (0 == m_checkTapeExistStatement) {
      m_checkTapeExistStatement = createStatement(s_checkTapeExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeExistStatement->setDouble(1, obj->tape()->id());
    oracle::occi::ResultSet *rset = m_checkTapeExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->tape(), false);
    }
    // Close resultset
    m_checkTapeExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeStatement) {
    m_updateTapeStatement = createStatement(s_updateTapeStatementString);
  }
  // Update local object
  m_updateTapeStatement->setDouble(1, 0 == obj->tape() ? 0 : obj->tape()->id());
  m_updateTapeStatement->setDouble(2, obj->id());
  m_updateTapeStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepClientIdentification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->client()) {
    // Check checkClientIdentificationExist statement
    if (0 == m_checkClientIdentificationExistStatement) {
      m_checkClientIdentificationExistStatement = createStatement(s_checkClientIdentificationExistStatementString);
    }
    // retrieve the object from the database
    m_checkClientIdentificationExistStatement->setDouble(1, obj->client()->id());
    oracle::occi::ResultSet *rset = m_checkClientIdentificationExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->client(), false);
    }
    // Close resultset
    m_checkClientIdentificationExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateClientIdentificationStatement) {
    m_updateClientIdentificationStatement = createStatement(s_updateClientIdentificationStatementString);
  }
  // Update local object
  m_updateClientIdentificationStatement->setDouble(1, 0 == obj->client() ? 0 : obj->client()->id());
  m_updateClientIdentificationStatement->setDouble(2, obj->id());
  m_updateClientIdentificationStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepExtendedDeviceGroup
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepExtendedDeviceGroup(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->reqExtDevGrp()) {
    // Check checkExtendedDeviceGroupExist statement
    if (0 == m_checkExtendedDeviceGroupExistStatement) {
      m_checkExtendedDeviceGroupExistStatement = createStatement(s_checkExtendedDeviceGroupExistStatementString);
    }
    // retrieve the object from the database
    m_checkExtendedDeviceGroupExistStatement->setDouble(1, obj->reqExtDevGrp()->id());
    oracle::occi::ResultSet *rset = m_checkExtendedDeviceGroupExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->reqExtDevGrp(), false);
    }
    // Close resultset
    m_checkExtendedDeviceGroupExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateExtendedDeviceGroupStatement) {
    m_updateExtendedDeviceGroupStatement = createStatement(s_updateExtendedDeviceGroupStatementString);
  }
  // Update local object
  m_updateExtendedDeviceGroupStatement->setDouble(1, 0 == obj->reqExtDevGrp() ? 0 : obj->reqExtDevGrp()->id());
  m_updateExtendedDeviceGroupStatement->setDouble(2, obj->id());
  m_updateExtendedDeviceGroupStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->requestedSrv()) {
    // Check checkTapeServerExist statement
    if (0 == m_checkTapeServerExistStatement) {
      m_checkTapeServerExistStatement = createStatement(s_checkTapeServerExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeServerExistStatement->setDouble(1, obj->requestedSrv()->id());
    oracle::occi::ResultSet *rset = m_checkTapeServerExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("OraCnvSvc");
      ad.setCnvSvcType(castor::SVC_ORACNV);
      cnvSvc()->createRep(&ad, obj->requestedSrv(), false);
    }
    // Close resultset
    m_checkTapeServerExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeServerStatement) {
    m_updateTapeServerStatement = createStatement(s_updateTapeServerStatementString);
  }
  // Update local object
  m_updateTapeServerStatement->setDouble(1, 0 == obj->requestedSrv() ? 0 : obj->requestedSrv()->id());
  m_updateTapeServerStatement->setDouble(2, obj->id());
  m_updateTapeServerStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObj(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  switch (type) {
  case castor::OBJ_Tape :
    fillObjTape(obj);
    break;
  case castor::OBJ_ClientIdentification :
    fillObjClientIdentification(obj);
    break;
  case castor::OBJ_ExtendedDeviceGroup :
    fillObjExtendedDeviceGroup(obj);
    break;
  case castor::OBJ_TapeServer :
    fillObjTapeServer(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillObjTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeId = (u_signed64)rset->getDouble(4);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tape() &&
      (0 == tapeId ||
       obj->tape()->id() != tapeId)) {
    obj->setTape(0);
  }
  // Update object or create new one
  if (0 != tapeId) {
    if (0 == obj->tape()) {
      obj->setTape
        (dynamic_cast<castor::stager::Tape*>
         (cnvSvc()->getObjFromId(tapeId)));
    } else {
      cnvSvc()->updateObj(obj->tape());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjClientIdentification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 clientId = (u_signed64)rset->getDouble(5);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->client() &&
      (0 == clientId ||
       obj->client()->id() != clientId)) {
    obj->setClient(0);
  }
  // Update object or create new one
  if (0 != clientId) {
    if (0 == obj->client()) {
      obj->setClient
        (dynamic_cast<castor::stager::ClientIdentification*>
         (cnvSvc()->getObjFromId(clientId)));
    } else {
      cnvSvc()->updateObj(obj->client());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjExtendedDeviceGroup
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjExtendedDeviceGroup(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 reqExtDevGrpId = (u_signed64)rset->getDouble(6);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->reqExtDevGrp() &&
      (0 == reqExtDevGrpId ||
       obj->reqExtDevGrp()->id() != reqExtDevGrpId)) {
    obj->setReqExtDevGrp(0);
  }
  // Update object or create new one
  if (0 != reqExtDevGrpId) {
    if (0 == obj->reqExtDevGrp()) {
      obj->setReqExtDevGrp
        (dynamic_cast<castor::vdqm::ExtendedDeviceGroup*>
         (cnvSvc()->getObjFromId(reqExtDevGrpId)));
    } else {
      cnvSvc()->updateObj(obj->reqExtDevGrp());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 requestedSrvId = (u_signed64)rset->getDouble(7);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->requestedSrv() &&
      (0 == requestedSrvId ||
       obj->requestedSrv()->id() != requestedSrvId)) {
    obj->setRequestedSrv(0);
  }
  // Update object or create new one
  if (0 != requestedSrvId) {
    if (0 == obj->requestedSrv()) {
      obj->setRequestedSrv
        (dynamic_cast<castor::vdqm::TapeServer*>
         (cnvSvc()->getObjFromId(requestedSrvId)));
    } else {
      cnvSvc()->updateObj(obj->requestedSrv());
    }
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::createRep(castor::IAddress* address,
                                                   castor::IObject* object,
                                                   bool autocommit,
                                                   unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(7, oracle::occi::OCCIDOUBLE);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setInt(1, obj->priority());
    m_insertStatement->setInt(2, time(0));
    m_insertStatement->setDouble(3, (type == OBJ_Tape && obj->tape() != 0) ? obj->tape()->id() : 0);
    m_insertStatement->setDouble(4, (type == OBJ_ClientIdentification && obj->client() != 0) ? obj->client()->id() : 0);
    m_insertStatement->setDouble(5, (type == OBJ_ExtendedDeviceGroup && obj->reqExtDevGrp() != 0) ? obj->reqExtDevGrp()->id() : 0);
    m_insertStatement->setDouble(6, (type == OBJ_TapeServer && obj->requestedSrv() != 0) ? obj->requestedSrv()->id() : 0);
    m_insertStatement->executeUpdate();
    obj->setId((u_signed64)m_insertStatement->getDouble(7));
    m_storeTypeStatement->setDouble(1, obj->id());
    m_storeTypeStatement->setInt(2, obj->type());
    m_storeTypeStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_insertStatementString << std::endl
                    << "and parameters' values were :" << std::endl
                    << "  priority : " << obj->priority() << std::endl
                    << "  creationTime : " << obj->creationTime() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  tape : " << obj->tape() << std::endl
                    << "  client : " << obj->client() << std::endl
                    << "  reqExtDevGrp : " << obj->reqExtDevGrp() << std::endl
                    << "  requestedSrv : " << obj->requestedSrv() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::updateRep(castor::IAddress* address,
                                                   castor::IObject* object,
                                                   bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setInt(1, obj->priority());
    m_updateStatement->setDouble(2, obj->id());
    m_updateStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::deleteRep(castor::IAddress* address,
                                                   castor::IObject* object,
                                                   bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setDouble(1, obj->id());
    m_deleteTypeStatement->executeUpdate();
    m_deleteStatement->setDouble(1, obj->id());
    m_deleteStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->getConnection()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_deleteStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::ora::OraTapeRequestCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setDouble(1, ad->target());
    oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::vdqm::TapeRequest* object = new castor::vdqm::TapeRequest();
    // Now retrieve and set members
    object->setPriority(rset->getInt(1));
    object->setCreationTime(rset->getInt(2));
    object->setId((u_signed64)rset->getDouble(3));
    m_selectStatement->closeResultSet(rset);
    return object;
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_selectStatementString << std::endl
                    << "and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setDouble(1, obj->id());
    oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::vdqm::TapeRequest* object = 
      dynamic_cast<castor::vdqm::TapeRequest*>(obj);
    object->setPriority(rset->getInt(1));
    object->setCreationTime(rset->getInt(2));
    object->setId((u_signed64)rset->getDouble(3));
    m_selectStatement->closeResultSet(rset);
  } catch (oracle::occi::SQLException e) {
    try {
      // Always try to rollback
      cnvSvc()->getConnection()->rollback();
      if (3114 == e.getErrorCode() || 28 == e.getErrorCode()) {
        // We've obviously lost the ORACLE connection here
        cnvSvc()->dropConnection();
      }
    } catch (oracle::occi::SQLException e) {
      // rollback failed, let's drop the connection for security
      cnvSvc()->dropConnection();
    }
    castor::exception::InvalidArgument ex; // XXX Fix it, depending on ORACLE error
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.what() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

