/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

// Include Files
#include "OraTapeRequestCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/db/ora/OraCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/stager/ClientIdentification.hpp"
#include "castor/stager/Tape.hpp"
#include "castor/vdqm/DeviceGroupName.hpp"
#include "castor/vdqm/TapeAccessSpecification.hpp"
#include "castor/vdqm/TapeDrive.hpp"
#include "castor/vdqm/TapeRequest.hpp"
#include "castor/vdqm/TapeServer.hpp"

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::ora::OraTapeRequestCnv>* s_factoryOraTapeRequestCnv =
  new castor::CnvFactory<castor::db::ora::OraTapeRequestCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::ora::OraTapeRequestCnv::s_insertStatementString =
"INSERT INTO TapeRequest (priority, modificationTime, creationTime, id, tape, tapeAccessSpecification, requestedSrv, tapeDrive, deviceGroupName, client) VALUES (:1,:2,:3,ids_seq.nextval,:4,:5,:6,:7,:8,:9) RETURNING id INTO :10";

/// SQL statement for request deletion
const std::string castor::db::ora::OraTapeRequestCnv::s_deleteStatementString =
"DELETE FROM TapeRequest WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::ora::OraTapeRequestCnv::s_selectStatementString =
"SELECT priority, modificationTime, creationTime, id, tape, tapeAccessSpecification, requestedSrv, tapeDrive, deviceGroupName, client FROM TapeRequest WHERE id = :1";

/// SQL statement for request update
const std::string castor::db::ora::OraTapeRequestCnv::s_updateStatementString =
"UPDATE TapeRequest SET priority = :1, modificationTime = :2 WHERE id = :3";

/// SQL statement for type storage
const std::string castor::db::ora::OraTapeRequestCnv::s_storeTypeStatementString =
"INSERT INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::ora::OraTapeRequestCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member tape
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeExistStatementString =
"SELECT id from Tape WHERE id = :1";

/// SQL update statement for member tape
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeStatementString =
"UPDATE TapeRequest SET tape = :1 WHERE id = :2";

/// SQL existence statement for member tapeAccessSpecification
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeAccessSpecificationExistStatementString =
"SELECT id from TapeAccessSpecification WHERE id = :1";

/// SQL update statement for member tapeAccessSpecification
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeAccessSpecificationStatementString =
"UPDATE TapeRequest SET tapeAccessSpecification = :1 WHERE id = :2";

/// SQL existence statement for member requestedSrv
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeServerExistStatementString =
"SELECT id from TapeServer WHERE id = :1";

/// SQL update statement for member requestedSrv
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeServerStatementString =
"UPDATE TapeRequest SET requestedSrv = :1 WHERE id = :2";

/// SQL select statement for member tapeDrive
const std::string castor::db::ora::OraTapeRequestCnv::s_selectTapeDriveStatementString =
"SELECT id from TapeDrive WHERE runningTapeReq = :1 FOR UPDATE";

/// SQL delete statement for member tapeDrive
const std::string castor::db::ora::OraTapeRequestCnv::s_deleteTapeDriveStatementString =
"UPDATE TapeDrive SET runningTapeReq = 0 WHERE id = :1";

/// SQL remote update statement for member tapeDrive
const std::string castor::db::ora::OraTapeRequestCnv::s_remoteUpdateTapeDriveStatementString =
"UPDATE TapeDrive SET runningTapeReq = :1 WHERE id = :2";

/// SQL existence statement for member tapeDrive
const std::string castor::db::ora::OraTapeRequestCnv::s_checkTapeDriveExistStatementString =
"SELECT id from TapeDrive WHERE id = :1";

/// SQL update statement for member tapeDrive
const std::string castor::db::ora::OraTapeRequestCnv::s_updateTapeDriveStatementString =
"UPDATE TapeRequest SET tapeDrive = :1 WHERE id = :2";

/// SQL existence statement for member deviceGroupName
const std::string castor::db::ora::OraTapeRequestCnv::s_checkDeviceGroupNameExistStatementString =
"SELECT id from DeviceGroupName WHERE id = :1";

/// SQL update statement for member deviceGroupName
const std::string castor::db::ora::OraTapeRequestCnv::s_updateDeviceGroupNameStatementString =
"UPDATE TapeRequest SET deviceGroupName = :1 WHERE id = :2";

/// SQL existence statement for member client
const std::string castor::db::ora::OraTapeRequestCnv::s_checkClientIdentificationExistStatementString =
"SELECT id from ClientIdentification WHERE id = :1";

/// SQL update statement for member client
const std::string castor::db::ora::OraTapeRequestCnv::s_updateClientIdentificationStatementString =
"UPDATE TapeRequest SET client = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeRequestCnv::OraTapeRequestCnv(castor::ICnvSvc* cnvSvc) :
  OraBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkTapeExistStatement(0),
  m_updateTapeStatement(0),
  m_checkTapeAccessSpecificationExistStatement(0),
  m_updateTapeAccessSpecificationStatement(0),
  m_checkTapeServerExistStatement(0),
  m_updateTapeServerStatement(0),
  m_selectTapeDriveStatement(0),
  m_deleteTapeDriveStatement(0),
  m_remoteUpdateTapeDriveStatement(0),
  m_checkTapeDriveExistStatement(0),
  m_updateTapeDriveStatement(0),
  m_checkDeviceGroupNameExistStatement(0),
  m_updateDeviceGroupNameStatement(0),
  m_checkClientIdentificationExistStatement(0),
  m_updateClientIdentificationStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::ora::OraTapeRequestCnv::~OraTapeRequestCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    deleteStatement(m_insertStatement);
    deleteStatement(m_deleteStatement);
    deleteStatement(m_selectStatement);
    deleteStatement(m_updateStatement);
    deleteStatement(m_storeTypeStatement);
    deleteStatement(m_deleteTypeStatement);
    deleteStatement(m_checkTapeExistStatement);
    deleteStatement(m_updateTapeStatement);
    deleteStatement(m_checkTapeAccessSpecificationExistStatement);
    deleteStatement(m_updateTapeAccessSpecificationStatement);
    deleteStatement(m_checkTapeServerExistStatement);
    deleteStatement(m_updateTapeServerStatement);
    deleteStatement(m_deleteTapeDriveStatement);
    deleteStatement(m_selectTapeDriveStatement);
    deleteStatement(m_remoteUpdateTapeDriveStatement);
    deleteStatement(m_checkTapeDriveExistStatement);
    deleteStatement(m_updateTapeDriveStatement);
    deleteStatement(m_checkDeviceGroupNameExistStatement);
    deleteStatement(m_updateDeviceGroupNameStatement);
    deleteStatement(m_checkClientIdentificationExistStatement);
    deleteStatement(m_updateClientIdentificationStatement);
  } catch (oracle::occi::SQLException e) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkTapeExistStatement = 0;
  m_updateTapeStatement = 0;
  m_checkTapeAccessSpecificationExistStatement = 0;
  m_updateTapeAccessSpecificationStatement = 0;
  m_checkTapeServerExistStatement = 0;
  m_updateTapeServerStatement = 0;
  m_selectTapeDriveStatement = 0;
  m_deleteTapeDriveStatement = 0;
  m_remoteUpdateTapeDriveStatement = 0;
  m_checkTapeDriveExistStatement = 0;
  m_updateTapeDriveStatement = 0;
  m_checkDeviceGroupNameExistStatement = 0;
  m_updateDeviceGroupNameStatement = 0;
  m_checkClientIdentificationExistStatement = 0;
  m_updateClientIdentificationStatement = 0;
  }

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeRequestCnv::ObjType() {
  return castor::vdqm::TapeRequest::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::ora::OraTapeRequestCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 unsigned int type,
                                                 bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  try {
    switch (type) {
    case castor::OBJ_Tape :
      fillRepTape(obj);
      break;
    case castor::OBJ_TapeAccessSpecification :
      fillRepTapeAccessSpecification(obj);
      break;
    case castor::OBJ_TapeServer :
      fillRepTapeServer(obj);
      break;
    case castor::OBJ_TapeDrive :
      fillRepTapeDrive(obj);
      break;
    case castor::OBJ_DeviceGroupName :
      fillRepDeviceGroupName(obj);
      break;
    case castor::OBJ_ClientIdentification :
      fillRepClientIdentification(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (oracle::occi::SQLException e) {
    castor::db::ora::OraBaseObj::handleException(e);
    castor::exception::Internal ex; 
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.what() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->tape()) {
    // Check checkTapeExist statement
    if (0 == m_checkTapeExistStatement) {
      m_checkTapeExistStatement = createStatement(s_checkTapeExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeExistStatement->setDouble(1, obj->tape()->id());
    oracle::occi::ResultSet *rset = m_checkTapeExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tape(), false);
    }
    // Close resultset
    m_checkTapeExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeStatement) {
    m_updateTapeStatement = createStatement(s_updateTapeStatementString);
  }
  // Update local object
  m_updateTapeStatement->setDouble(1, 0 == obj->tape() ? 0 : obj->tape()->id());
  m_updateTapeStatement->setDouble(2, obj->id());
  m_updateTapeStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeAccessSpecification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTapeAccessSpecification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->tapeAccessSpecification()) {
    // Check checkTapeAccessSpecificationExist statement
    if (0 == m_checkTapeAccessSpecificationExistStatement) {
      m_checkTapeAccessSpecificationExistStatement = createStatement(s_checkTapeAccessSpecificationExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeAccessSpecificationExistStatement->setDouble(1, obj->tapeAccessSpecification()->id());
    oracle::occi::ResultSet *rset = m_checkTapeAccessSpecificationExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tapeAccessSpecification(), false);
    }
    // Close resultset
    m_checkTapeAccessSpecificationExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeAccessSpecificationStatement) {
    m_updateTapeAccessSpecificationStatement = createStatement(s_updateTapeAccessSpecificationStatementString);
  }
  // Update local object
  m_updateTapeAccessSpecificationStatement->setDouble(1, 0 == obj->tapeAccessSpecification() ? 0 : obj->tapeAccessSpecification()->id());
  m_updateTapeAccessSpecificationStatement->setDouble(2, obj->id());
  m_updateTapeAccessSpecificationStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->requestedSrv()) {
    // Check checkTapeServerExist statement
    if (0 == m_checkTapeServerExistStatement) {
      m_checkTapeServerExistStatement = createStatement(s_checkTapeServerExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeServerExistStatement->setDouble(1, obj->requestedSrv()->id());
    oracle::occi::ResultSet *rset = m_checkTapeServerExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->requestedSrv(), false);
    }
    // Close resultset
    m_checkTapeServerExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeServerStatement) {
    m_updateTapeServerStatement = createStatement(s_updateTapeServerStatementString);
  }
  // Update local object
  m_updateTapeServerStatement->setDouble(1, 0 == obj->requestedSrv() ? 0 : obj->requestedSrv()->id());
  m_updateTapeServerStatement->setDouble(2, obj->id());
  m_updateTapeServerStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepTapeDrive
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepTapeDrive(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  // Check selectTapeDrive statement
  if (0 == m_selectTapeDriveStatement) {
    m_selectTapeDriveStatement = createStatement(s_selectTapeDriveStatementString);
  }
  // retrieve the object from the database
  m_selectTapeDriveStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectTapeDriveStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH != rset->next()) {
    u_signed64 tapeDriveId = (u_signed64)rset->getDouble(1);
    if (0 != tapeDriveId &&
        (0 == obj->tapeDrive() ||
         obj->tapeDrive()->id() != tapeDriveId)) {
      if (0 == m_deleteTapeDriveStatement) {
        m_deleteTapeDriveStatement = createStatement(s_deleteTapeDriveStatementString);
      }
      m_deleteTapeDriveStatement->setDouble(1, tapeDriveId);
      m_deleteTapeDriveStatement->executeUpdate();
    }
  }
  // Close resultset
  m_selectTapeDriveStatement->closeResultSet(rset);
  if (0 != obj->tapeDrive()) {
    // Check checkTapeDriveExist statement
    if (0 == m_checkTapeDriveExistStatement) {
      m_checkTapeDriveExistStatement = createStatement(s_checkTapeDriveExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeDriveExistStatement->setDouble(1, obj->tapeDrive()->id());
    oracle::occi::ResultSet *rset = m_checkTapeDriveExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tapeDrive(), false, OBJ_TapeRequest);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeDriveStatement) {
        m_remoteUpdateTapeDriveStatement = createStatement(s_remoteUpdateTapeDriveStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeDriveStatement->setDouble(1, obj->id());
      m_remoteUpdateTapeDriveStatement->setDouble(2, obj->tapeDrive()->id());
      m_remoteUpdateTapeDriveStatement->executeUpdate();
    }
    // Close resultset
    m_checkTapeDriveExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateTapeDriveStatement) {
    m_updateTapeDriveStatement = createStatement(s_updateTapeDriveStatementString);
  }
  // Update local object
  m_updateTapeDriveStatement->setDouble(1, 0 == obj->tapeDrive() ? 0 : obj->tapeDrive()->id());
  m_updateTapeDriveStatement->setDouble(2, obj->id());
  m_updateTapeDriveStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepDeviceGroupName(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->deviceGroupName()) {
    // Check checkDeviceGroupNameExist statement
    if (0 == m_checkDeviceGroupNameExistStatement) {
      m_checkDeviceGroupNameExistStatement = createStatement(s_checkDeviceGroupNameExistStatementString);
    }
    // retrieve the object from the database
    m_checkDeviceGroupNameExistStatement->setDouble(1, obj->deviceGroupName()->id());
    oracle::occi::ResultSet *rset = m_checkDeviceGroupNameExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->deviceGroupName(), false);
    }
    // Close resultset
    m_checkDeviceGroupNameExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateDeviceGroupNameStatement) {
    m_updateDeviceGroupNameStatement = createStatement(s_updateDeviceGroupNameStatementString);
  }
  // Update local object
  m_updateDeviceGroupNameStatement->setDouble(1, 0 == obj->deviceGroupName() ? 0 : obj->deviceGroupName()->id());
  m_updateDeviceGroupNameStatement->setDouble(2, obj->id());
  m_updateDeviceGroupNameStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillRepClientIdentification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillRepClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception, oracle::occi::SQLException) {
  if (0 != obj->client()) {
    // Check checkClientIdentificationExist statement
    if (0 == m_checkClientIdentificationExistStatement) {
      m_checkClientIdentificationExistStatement = createStatement(s_checkClientIdentificationExistStatementString);
    }
    // retrieve the object from the database
    m_checkClientIdentificationExistStatement->setDouble(1, obj->client()->id());
    oracle::occi::ResultSet *rset = m_checkClientIdentificationExistStatement->executeQuery();
    if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->client(), false);
    }
    // Close resultset
    m_checkClientIdentificationExistStatement->closeResultSet(rset);
  }
  // Check update statement
  if (0 == m_updateClientIdentificationStatement) {
    m_updateClientIdentificationStatement = createStatement(s_updateClientIdentificationStatementString);
  }
  // Update local object
  m_updateClientIdentificationStatement->setDouble(1, 0 == obj->client() ? 0 : obj->client()->id());
  m_updateClientIdentificationStatement->setDouble(2, obj->id());
  m_updateClientIdentificationStatement->executeUpdate();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObj(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 unsigned int type,
                                                 bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  switch (type) {
  case castor::OBJ_Tape :
    fillObjTape(obj);
    break;
  case castor::OBJ_TapeAccessSpecification :
    fillObjTapeAccessSpecification(obj);
    break;
  case castor::OBJ_TapeServer :
    fillObjTapeServer(obj);
    break;
  case castor::OBJ_TapeDrive :
    fillObjTapeDrive(obj);
    break;
  case castor::OBJ_DeviceGroupName :
    fillObjDeviceGroupName(obj);
    break;
  case castor::OBJ_ClientIdentification :
    fillObjClientIdentification(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (autocommit) {
    cnvSvc()->commit();
  }
}
//------------------------------------------------------------------------------
// fillObjTape
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeId = (u_signed64)rset->getDouble(5);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tape() &&
      (0 == tapeId ||
       obj->tape()->id() != tapeId)) {
    obj->setTape(0);
  }
  // Update object or create new one
  if (0 != tapeId) {
    if (0 == obj->tape()) {
      obj->setTape
        (dynamic_cast<castor::stager::Tape*>
         (cnvSvc()->getObjFromId(tapeId)));
    } else {
      cnvSvc()->updateObj(obj->tape());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeAccessSpecification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTapeAccessSpecification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeAccessSpecificationId = (u_signed64)rset->getDouble(6);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tapeAccessSpecification() &&
      (0 == tapeAccessSpecificationId ||
       obj->tapeAccessSpecification()->id() != tapeAccessSpecificationId)) {
    obj->setTapeAccessSpecification(0);
  }
  // Update object or create new one
  if (0 != tapeAccessSpecificationId) {
    if (0 == obj->tapeAccessSpecification()) {
      obj->setTapeAccessSpecification
        (dynamic_cast<castor::vdqm::TapeAccessSpecification*>
         (cnvSvc()->getObjFromId(tapeAccessSpecificationId)));
    } else {
      cnvSvc()->updateObj(obj->tapeAccessSpecification());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeServer
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 requestedSrvId = (u_signed64)rset->getDouble(7);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->requestedSrv() &&
      (0 == requestedSrvId ||
       obj->requestedSrv()->id() != requestedSrvId)) {
    obj->setRequestedSrv(0);
  }
  // Update object or create new one
  if (0 != requestedSrvId) {
    if (0 == obj->requestedSrv()) {
      obj->setRequestedSrv
        (dynamic_cast<castor::vdqm::TapeServer*>
         (cnvSvc()->getObjFromId(requestedSrvId)));
    } else {
      cnvSvc()->updateObj(obj->requestedSrv());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeDrive
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjTapeDrive(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeDriveId = (u_signed64)rset->getDouble(8);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->tapeDrive() &&
      (0 == tapeDriveId ||
       obj->tapeDrive()->id() != tapeDriveId)) {
    obj->tapeDrive()->setRunningTapeReq(0);
    obj->setTapeDrive(0);
  }
  // Update object or create new one
  if (0 != tapeDriveId) {
    if (0 == obj->tapeDrive()) {
      obj->setTapeDrive
        (dynamic_cast<castor::vdqm::TapeDrive*>
         (cnvSvc()->getObjFromId(tapeDriveId)));
    } else {
      cnvSvc()->updateObj(obj->tapeDrive());
    }
    obj->tapeDrive()->setRunningTapeReq(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjDeviceGroupName(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 deviceGroupNameId = (u_signed64)rset->getDouble(9);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->deviceGroupName() &&
      (0 == deviceGroupNameId ||
       obj->deviceGroupName()->id() != deviceGroupNameId)) {
    obj->setDeviceGroupName(0);
  }
  // Update object or create new one
  if (0 != deviceGroupNameId) {
    if (0 == obj->deviceGroupName()) {
      obj->setDeviceGroupName
        (dynamic_cast<castor::vdqm::DeviceGroupName*>
         (cnvSvc()->getObjFromId(deviceGroupNameId)));
    } else {
      cnvSvc()->updateObj(obj->deviceGroupName());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjClientIdentification
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::fillObjClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setDouble(1, obj->id());
  oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
  if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 clientId = (u_signed64)rset->getDouble(10);
  // Close ResultSet
  m_selectStatement->closeResultSet(rset);
  // Check whether something should be deleted
  if (0 != obj->client() &&
      (0 == clientId ||
       obj->client()->id() != clientId)) {
    obj->setClient(0);
  }
  // Update object or create new one
  if (0 != clientId) {
    if (0 == obj->client()) {
      obj->setClient
        (dynamic_cast<castor::stager::ClientIdentification*>
         (cnvSvc()->getObjFromId(clientId)));
    } else {
      cnvSvc()->updateObj(obj->client());
    }
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::ora::OraTapeRequestCnv::createRep(castor::IAddress* address,
                                                   castor::IObject* object,
                                                   bool autocommit,
                                                   unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(10, oracle::occi::OCCIDOUBLE);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setInt(1, obj->priority());
    m_insertStatement->setDouble(2, obj->modificationTime());
    m_insertStatement->setInt(3, time(0));
    m_insertStatement->setDouble(4, (type == OBJ_Tape && obj->tape() != 0) ? obj->tape()->id() : 0);
    m_insertStatement->setDouble(5, (type == OBJ_TapeAccessSpecification && obj->tapeAccessSpecification() != 0) ? obj->tapeAccessSpecification()->id() : 0);
    m_insertStatement->setDouble(6, (type == OBJ_TapeServer && obj->requestedSrv() != 0) ? obj->requestedSrv()->id() : 0);
    m_insertStatement->setDouble(7, (type == OBJ_TapeDrive && obj->tapeDrive() != 0) ? obj->tapeDrive()->id() : 0);
    m_insertStatement->setDouble(8, (type == OBJ_DeviceGroupName && obj->deviceGroupName() != 0) ? obj->deviceGroupName()->id() : 0);
    m_insertStatement->setDouble(9, (type == OBJ_ClientIdentification && obj->client() != 0) ? obj->client()->id() : 0);
    m_insertStatement->executeUpdate();
    obj->setId((u_signed64)m_insertStatement->getDouble(10));
    m_storeTypeStatement->setDouble(1, obj->id());
    m_storeTypeStatement->setInt(2, obj->type());
    m_storeTypeStatement->executeUpdate();
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (oracle::occi::SQLException e) {
      castor::db::ora::OraBaseObj::handleException(e);
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "Error in insert request :"
                      << std::endl << e.what() << std::endl
                      << "Statement was :" << std::endl
                      << s_insertStatementString << std::endl
                      << "and parameters' values were :" << std::endl
                      << "  priority : " << obj->priority() << std::endl
                      << "  modificationTime : " << obj->modificationTime() << std::endl
                      << "  creationTime : " << obj->creationTime() << std::endl
                      << "  id : " << obj->id() << std::endl
                      << "  tape : " << obj->tape() << std::endl
                      << "  tapeAccessSpecification : " << obj->tapeAccessSpecification() << std::endl
                      << "  requestedSrv : " << obj->requestedSrv() << std::endl
                      << "  tapeDrive : " << obj->tapeDrive() << std::endl
                      << "  deviceGroupName : " << obj->deviceGroupName() << std::endl
                      << "  client : " << obj->client() << std::endl;
      throw ex;
    }
}

  //----------------------------------------------------------------------------
  // updateRep
  //----------------------------------------------------------------------------
  void castor::db::ora::OraTapeRequestCnv::updateRep(castor::IAddress* address,
                                                     castor::IObject* object,
                                                     bool autocommit)
    throw (castor::exception::Exception) {
    castor::vdqm::TapeRequest* obj = 
      dynamic_cast<castor::vdqm::TapeRequest*>(object);
    // check whether something needs to be done
    if (0 == obj) return;
    try {
      // Check whether the statements are ok
      if (0 == m_updateStatement) {
        m_updateStatement = createStatement(s_updateStatementString);
      }
      // Update the current object
      m_updateStatement->setInt(1, obj->priority());
      m_updateStatement->setDouble(2, obj->modificationTime());
      m_updateStatement->setDouble(3, obj->id());
      m_updateStatement->executeUpdate();
      if (autocommit) {
        cnvSvc()->commit();
      }
    } catch (oracle::occi::SQLException e) {
        castor::db::ora::OraBaseObj::handleException(e);
        castor::exception::InvalidArgument ex;
        ex.getMessage() << "Error in update request :"
                        << std::endl << e.what() << std::endl
                        << "Statement was :" << std::endl
                        << s_updateStatementString << std::endl
                        << "and id was " << obj->id() << std::endl;;
        throw ex;
      }
}

    //--------------------------------------------------------------------------
    // deleteRep
    //--------------------------------------------------------------------------
    void castor::db::ora::OraTapeRequestCnv::deleteRep(castor::IAddress* address,
                                                       castor::IObject* object,
                                                       bool autocommit)
      throw (castor::exception::Exception) {
      castor::vdqm::TapeRequest* obj = 
        dynamic_cast<castor::vdqm::TapeRequest*>(object);
      // check whether something needs to be done
      if (0 == obj) return;
      try {
        // Check whether the statements are ok
        if (0 == m_deleteStatement) {
          m_deleteStatement = createStatement(s_deleteStatementString);
        }
        if (0 == m_deleteTypeStatement) {
          m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
        }
        // Now Delete the object
        m_deleteTypeStatement->setDouble(1, obj->id());
        m_deleteTypeStatement->executeUpdate();
        m_deleteStatement->setDouble(1, obj->id());
        m_deleteStatement->executeUpdate();
        if (obj->client() != 0) {
          cnvSvc()->deleteRep(0, obj->client(), false);
        }
        if (autocommit) {
          cnvSvc()->commit();
        }
      } catch (oracle::occi::SQLException e) {
          castor::db::ora::OraBaseObj::handleException(e);
          castor::exception::InvalidArgument ex;
          ex.getMessage() << "Error in delete request :"
                          << std::endl << e.what() << std::endl
                          << "Statement was :" << std::endl
                          << s_deleteStatementString << std::endl
                          << "and id was " << obj->id() << std::endl;;
          throw ex;
        }
}

      //------------------------------------------------------------------------
      // createObj
      //------------------------------------------------------------------------
      castor::IObject* castor::db::ora::OraTapeRequestCnv::createObj(castor::IAddress* address)
        throw (castor::exception::Exception) {
        castor::BaseAddress* ad = 
          dynamic_cast<castor::BaseAddress*>(address);
        try {
          // Check whether the statement is ok
          if (0 == m_selectStatement) {
            m_selectStatement = createStatement(s_selectStatementString);
          }
          // retrieve the object from the database
          m_selectStatement->setDouble(1, ad->target());
          oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
          if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
            castor::exception::NoEntry ex;
            ex.getMessage() << "No object found for id :" << ad->target();
            throw ex;
          }
          // create the new Object
          castor::vdqm::TapeRequest* object = new castor::vdqm::TapeRequest();
          // Now retrieve and set members
          object->setPriority(rset->getInt(1));
          object->setModificationTime((u_signed64)rset->getDouble(2));
          object->setCreationTime((u_signed64)rset->getDouble(3));
          object->setId((u_signed64)rset->getDouble(4));
          m_selectStatement->closeResultSet(rset);
          return object;
        } catch (oracle::occi::SQLException e) {
            castor::db::ora::OraBaseObj::handleException(e);
            castor::exception::InvalidArgument ex;
            ex.getMessage() << "Error in select request :"
                            << std::endl << e.what() << std::endl
                            << "Statement was :" << std::endl
                            << s_selectStatementString << std::endl
                            << "and id was " << ad->target() << std::endl;;
            throw ex;
          }
        }

        //----------------------------------------------------------------------
        // updateObj
        //----------------------------------------------------------------------
        void castor::db::ora::OraTapeRequestCnv::updateObj(castor::IObject* obj)
          throw (castor::exception::Exception) {
          try {
            // Check whether the statement is ok
            if (0 == m_selectStatement) {
              m_selectStatement = createStatement(s_selectStatementString);
            }
            // retrieve the object from the database
            m_selectStatement->setDouble(1, obj->id());
            oracle::occi::ResultSet *rset = m_selectStatement->executeQuery();
            if (oracle::occi::ResultSet::END_OF_FETCH == rset->next()) {
              castor::exception::NoEntry ex;
              ex.getMessage() << "No object found for id :" << obj->id();
              throw ex;
            }
            // Now retrieve and set members
            castor::vdqm::TapeRequest* object = 
              dynamic_cast<castor::vdqm::TapeRequest*>(obj);
            object->setPriority(rset->getInt(1));
            object->setModificationTime((u_signed64)rset->getDouble(2));
            object->setCreationTime((u_signed64)rset->getDouble(3));
            object->setId((u_signed64)rset->getDouble(4));
            m_selectStatement->closeResultSet(rset);
          } catch (oracle::occi::SQLException e) {
              castor::db::ora::OraBaseObj::handleException(e);
              castor::exception::InvalidArgument ex;
              ex.getMessage() << "Error in update request :"
                              << std::endl << e.what() << std::endl
                              << "Statement was :" << std::endl
                              << s_updateStatementString << std::endl
                              << "and id was " << obj->id() << std::endl;;
              throw ex;
            }
}

