/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbTapeRequestCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbTapeRequestCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/stager/ClientIdentification.hpp"
#include "castor/stager/Tape.hpp"
#include "castor/vdqm/DeviceGroupName.hpp"
#include "castor/vdqm/TapeAccessSpecification.hpp"
#include "castor/vdqm/TapeDrive.hpp"
#include "castor/vdqm/TapeRequest.hpp"
#include "castor/vdqm/TapeServer.hpp"

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbTapeRequestCnv>* s_factoryDbTapeRequestCnv =
  new castor::CnvFactory<castor::db::cnv::DbTapeRequestCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbTapeRequestCnv::s_insertStatementString =
"INSERT INTO TapeRequest (priority, modificationTime, creationTime, id, tape, tapeAccessSpecification, requestedSrv, tapeDrive, deviceGroupName, client) VALUES (:1,:2,:3,ids_seq.nextval,:4,:5,:6,:7,:8,:9) RETURNING id INTO :10";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbTapeRequestCnv::s_deleteStatementString =
"DELETE FROM TapeRequest WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbTapeRequestCnv::s_selectStatementString =
"SELECT priority, modificationTime, creationTime, id, tape, tapeAccessSpecification, requestedSrv, tapeDrive, deviceGroupName, client FROM TapeRequest WHERE id = :1";

/// SQL statement for request update
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateStatementString =
"UPDATE TapeRequest SET priority = :1, modificationTime = :2 WHERE id = :3";

/// SQL statement for type storage
const std::string castor::db::cnv::DbTapeRequestCnv::s_storeTypeStatementString =
"INSERT INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::cnv::DbTapeRequestCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member tape
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkTapeExistStatementString =
"SELECT id FROM Tape WHERE id = :1";

/// SQL update statement for member tape
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateTapeStatementString =
"UPDATE TapeRequest SET tape = :1 WHERE id = :2";

/// SQL existence statement for member tapeAccessSpecification
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkTapeAccessSpecificationExistStatementString =
"SELECT id FROM TapeAccessSpecification WHERE id = :1";

/// SQL update statement for member tapeAccessSpecification
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateTapeAccessSpecificationStatementString =
"UPDATE TapeRequest SET tapeAccessSpecification = :1 WHERE id = :2";

/// SQL existence statement for member requestedSrv
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkTapeServerExistStatementString =
"SELECT id FROM TapeServer WHERE id = :1";

/// SQL update statement for member requestedSrv
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateTapeServerStatementString =
"UPDATE TapeRequest SET requestedSrv = :1 WHERE id = :2";

/// SQL select statement for member tapeDrive
const std::string castor::db::cnv::DbTapeRequestCnv::s_selectTapeDriveStatementString =
"SELECT id FROM TapeDrive WHERE runningTapeReq = :1 FOR UPDATE";

/// SQL delete statement for member tapeDrive
const std::string castor::db::cnv::DbTapeRequestCnv::s_deleteTapeDriveStatementString =
"UPDATE TapeDrive SET runningTapeReq = 0 WHERE id = :1";

/// SQL remote update statement for member tapeDrive
const std::string castor::db::cnv::DbTapeRequestCnv::s_remoteUpdateTapeDriveStatementString =
"UPDATE TapeDrive SET runningTapeReq = :1 WHERE id = :2";

/// SQL existence statement for member tapeDrive
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkTapeDriveExistStatementString =
"SELECT id FROM TapeDrive WHERE id = :1";

/// SQL update statement for member tapeDrive
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateTapeDriveStatementString =
"UPDATE TapeRequest SET tapeDrive = :1 WHERE id = :2";

/// SQL existence statement for member deviceGroupName
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkDeviceGroupNameExistStatementString =
"SELECT id FROM DeviceGroupName WHERE id = :1";

/// SQL update statement for member deviceGroupName
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateDeviceGroupNameStatementString =
"UPDATE TapeRequest SET deviceGroupName = :1 WHERE id = :2";

/// SQL existence statement for member client
const std::string castor::db::cnv::DbTapeRequestCnv::s_checkClientIdentificationExistStatementString =
"SELECT id FROM ClientIdentification WHERE id = :1";

/// SQL update statement for member client
const std::string castor::db::cnv::DbTapeRequestCnv::s_updateClientIdentificationStatementString =
"UPDATE TapeRequest SET client = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbTapeRequestCnv::DbTapeRequestCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkTapeExistStatement(0),
  m_updateTapeStatement(0),
  m_checkTapeAccessSpecificationExistStatement(0),
  m_updateTapeAccessSpecificationStatement(0),
  m_checkTapeServerExistStatement(0),
  m_updateTapeServerStatement(0),
  m_selectTapeDriveStatement(0),
  m_deleteTapeDriveStatement(0),
  m_remoteUpdateTapeDriveStatement(0),
  m_checkTapeDriveExistStatement(0),
  m_updateTapeDriveStatement(0),
  m_checkDeviceGroupNameExistStatement(0),
  m_updateDeviceGroupNameStatement(0),
  m_checkClientIdentificationExistStatement(0),
  m_updateClientIdentificationStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbTapeRequestCnv::~DbTapeRequestCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    delete m_insertStatement;
    delete m_deleteStatement;
    delete m_selectStatement;
    delete m_updateStatement;
    delete m_storeTypeStatement;
    delete m_deleteTypeStatement;
    delete m_checkTapeExistStatement;
    delete m_updateTapeStatement;
    delete m_checkTapeAccessSpecificationExistStatement;
    delete m_updateTapeAccessSpecificationStatement;
    delete m_checkTapeServerExistStatement;
    delete m_updateTapeServerStatement;
    delete m_deleteTapeDriveStatement;
    delete m_selectTapeDriveStatement;
    delete m_remoteUpdateTapeDriveStatement;
    delete m_checkTapeDriveExistStatement;
    delete m_updateTapeDriveStatement;
    delete m_checkDeviceGroupNameExistStatement;
    delete m_updateDeviceGroupNameStatement;
    delete m_checkClientIdentificationExistStatement;
    delete m_updateClientIdentificationStatement;
  } catch (castor::exception::SQLError ignored) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkTapeExistStatement = 0;
  m_updateTapeStatement = 0;
  m_checkTapeAccessSpecificationExistStatement = 0;
  m_updateTapeAccessSpecificationStatement = 0;
  m_checkTapeServerExistStatement = 0;
  m_updateTapeServerStatement = 0;
  m_selectTapeDriveStatement = 0;
  m_deleteTapeDriveStatement = 0;
  m_remoteUpdateTapeDriveStatement = 0;
  m_checkTapeDriveExistStatement = 0;
  m_updateTapeDriveStatement = 0;
  m_checkDeviceGroupNameExistStatement = 0;
  m_updateDeviceGroupNameStatement = 0;
  m_checkClientIdentificationExistStatement = 0;
  m_updateClientIdentificationStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbTapeRequestCnv::ObjType() {
  return castor::vdqm::TapeRequest::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbTapeRequestCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRep(castor::IAddress* address,
                                                castor::IObject* object,
                                                unsigned int type,
                                                bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  try {
    switch (type) {
    case castor::OBJ_Tape :
      fillRepTape(obj);
      break;
    case castor::OBJ_TapeAccessSpecification :
      fillRepTapeAccessSpecification(obj);
      break;
    case castor::OBJ_TapeServer :
      fillRepTapeServer(obj);
      break;
    case castor::OBJ_TapeDrive :
      fillRepTapeDrive(obj);
      break;
    case castor::OBJ_DeviceGroupName :
      fillRepDeviceGroupName(obj);
      break;
    case castor::OBJ_ClientIdentification :
      fillRepClientIdentification(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepTape
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->tape()) {
    // Check checkTapeExist statement
    if (0 == m_checkTapeExistStatement) {
      m_checkTapeExistStatement = createStatement(s_checkTapeExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeExistStatement->setInt64(1, obj->tape()->id());
    castor::db::IDbResultSet *rset = m_checkTapeExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tape(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeStatement) {
    m_updateTapeStatement = createStatement(s_updateTapeStatementString);
  }
  // Update local object
  m_updateTapeStatement->setInt64(1, 0 == obj->tape() ? 0 : obj->tape()->id());
  m_updateTapeStatement->setInt64(2, obj->id());
  m_updateTapeStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepTapeAccessSpecification
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepTapeAccessSpecification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->tapeAccessSpecification()) {
    // Check checkTapeAccessSpecificationExist statement
    if (0 == m_checkTapeAccessSpecificationExistStatement) {
      m_checkTapeAccessSpecificationExistStatement = createStatement(s_checkTapeAccessSpecificationExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeAccessSpecificationExistStatement->setInt64(1, obj->tapeAccessSpecification()->id());
    castor::db::IDbResultSet *rset = m_checkTapeAccessSpecificationExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tapeAccessSpecification(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeAccessSpecificationStatement) {
    m_updateTapeAccessSpecificationStatement = createStatement(s_updateTapeAccessSpecificationStatementString);
  }
  // Update local object
  m_updateTapeAccessSpecificationStatement->setInt64(1, 0 == obj->tapeAccessSpecification() ? 0 : obj->tapeAccessSpecification()->id());
  m_updateTapeAccessSpecificationStatement->setInt64(2, obj->id());
  m_updateTapeAccessSpecificationStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepTapeServer
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->requestedSrv()) {
    // Check checkTapeServerExist statement
    if (0 == m_checkTapeServerExistStatement) {
      m_checkTapeServerExistStatement = createStatement(s_checkTapeServerExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeServerExistStatement->setInt64(1, obj->requestedSrv()->id());
    castor::db::IDbResultSet *rset = m_checkTapeServerExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->requestedSrv(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeServerStatement) {
    m_updateTapeServerStatement = createStatement(s_updateTapeServerStatementString);
  }
  // Update local object
  m_updateTapeServerStatement->setInt64(1, 0 == obj->requestedSrv() ? 0 : obj->requestedSrv()->id());
  m_updateTapeServerStatement->setInt64(2, obj->id());
  m_updateTapeServerStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepTapeDrive
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepTapeDrive(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check selectTapeDrive statement
  if (0 == m_selectTapeDriveStatement) {
    m_selectTapeDriveStatement = createStatement(s_selectTapeDriveStatementString);
  }
  // retrieve the object from the database
  m_selectTapeDriveStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectTapeDriveStatement->executeQuery();
  if (rset->next()) {
    u_signed64 tapeDriveId = rset->getInt64(1);
    if (0 != tapeDriveId &&
        (0 == obj->tapeDrive() ||
         obj->tapeDrive()->id() != tapeDriveId)) {
      if (0 == m_deleteTapeDriveStatement) {
        m_deleteTapeDriveStatement = createStatement(s_deleteTapeDriveStatementString);
      }
      m_deleteTapeDriveStatement->setInt64(1, tapeDriveId);
      m_deleteTapeDriveStatement->execute();
    }
  }
  // Close resultset
  delete rset;
  if (0 != obj->tapeDrive()) {
    // Check checkTapeDriveExist statement
    if (0 == m_checkTapeDriveExistStatement) {
      m_checkTapeDriveExistStatement = createStatement(s_checkTapeDriveExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeDriveExistStatement->setInt64(1, obj->tapeDrive()->id());
    castor::db::IDbResultSet *rset = m_checkTapeDriveExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tapeDrive(), false, OBJ_TapeRequest);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeDriveStatement) {
        m_remoteUpdateTapeDriveStatement = createStatement(s_remoteUpdateTapeDriveStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeDriveStatement->setInt64(1, obj->id());
      m_remoteUpdateTapeDriveStatement->setInt64(2, obj->tapeDrive()->id());
      m_remoteUpdateTapeDriveStatement->execute();
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeDriveStatement) {
    m_updateTapeDriveStatement = createStatement(s_updateTapeDriveStatementString);
  }
  // Update local object
  m_updateTapeDriveStatement->setInt64(1, 0 == obj->tapeDrive() ? 0 : obj->tapeDrive()->id());
  m_updateTapeDriveStatement->setInt64(2, obj->id());
  m_updateTapeDriveStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepDeviceGroupName(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->deviceGroupName()) {
    // Check checkDeviceGroupNameExist statement
    if (0 == m_checkDeviceGroupNameExistStatement) {
      m_checkDeviceGroupNameExistStatement = createStatement(s_checkDeviceGroupNameExistStatementString);
    }
    // retrieve the object from the database
    m_checkDeviceGroupNameExistStatement->setInt64(1, obj->deviceGroupName()->id());
    castor::db::IDbResultSet *rset = m_checkDeviceGroupNameExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->deviceGroupName(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateDeviceGroupNameStatement) {
    m_updateDeviceGroupNameStatement = createStatement(s_updateDeviceGroupNameStatementString);
  }
  // Update local object
  m_updateDeviceGroupNameStatement->setInt64(1, 0 == obj->deviceGroupName() ? 0 : obj->deviceGroupName()->id());
  m_updateDeviceGroupNameStatement->setInt64(2, obj->id());
  m_updateDeviceGroupNameStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepClientIdentification
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillRepClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->client()) {
    // Check checkClientIdentificationExist statement
    if (0 == m_checkClientIdentificationExistStatement) {
      m_checkClientIdentificationExistStatement = createStatement(s_checkClientIdentificationExistStatementString);
    }
    // retrieve the object from the database
    m_checkClientIdentificationExistStatement->setInt64(1, obj->client()->id());
    castor::db::IDbResultSet *rset = m_checkClientIdentificationExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->client(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateClientIdentificationStatement) {
    m_updateClientIdentificationStatement = createStatement(s_updateClientIdentificationStatementString);
  }
  // Update local object
  m_updateClientIdentificationStatement->setInt64(1, 0 == obj->client() ? 0 : obj->client()->id());
  m_updateClientIdentificationStatement->setInt64(2, obj->id());
  m_updateClientIdentificationStatement->execute();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObj(castor::IAddress* address,
                                                castor::IObject* object,
                                                unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  switch (type) {
  case castor::OBJ_Tape :
    fillObjTape(obj);
    break;
  case castor::OBJ_TapeAccessSpecification :
    fillObjTapeAccessSpecification(obj);
    break;
  case castor::OBJ_TapeServer :
    fillObjTapeServer(obj);
    break;
  case castor::OBJ_TapeDrive :
    fillObjTapeDrive(obj);
    break;
  case castor::OBJ_DeviceGroupName :
    fillObjDeviceGroupName(obj);
    break;
  case castor::OBJ_ClientIdentification :
    fillObjClientIdentification(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillObjTape
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjTape(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeId = rset->getInt64(5);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->tape() &&
      (0 == tapeId ||
       obj->tape()->id() != tapeId)) {
    obj->setTape(0);
  }
  // Update object or create new one
  if (0 != tapeId) {
    if (0 == obj->tape()) {
      obj->setTape
        (dynamic_cast<castor::stager::Tape*>
         (cnvSvc()->getObjFromId(tapeId)));
    } else {
      cnvSvc()->updateObj(obj->tape());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeAccessSpecification
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjTapeAccessSpecification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeAccessSpecificationId = rset->getInt64(6);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->tapeAccessSpecification() &&
      (0 == tapeAccessSpecificationId ||
       obj->tapeAccessSpecification()->id() != tapeAccessSpecificationId)) {
    obj->setTapeAccessSpecification(0);
  }
  // Update object or create new one
  if (0 != tapeAccessSpecificationId) {
    if (0 == obj->tapeAccessSpecification()) {
      obj->setTapeAccessSpecification
        (dynamic_cast<castor::vdqm::TapeAccessSpecification*>
         (cnvSvc()->getObjFromId(tapeAccessSpecificationId)));
    } else {
      cnvSvc()->updateObj(obj->tapeAccessSpecification());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeServer
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjTapeServer(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 requestedSrvId = rset->getInt64(7);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->requestedSrv() &&
      (0 == requestedSrvId ||
       obj->requestedSrv()->id() != requestedSrvId)) {
    obj->setRequestedSrv(0);
  }
  // Update object or create new one
  if (0 != requestedSrvId) {
    if (0 == obj->requestedSrv()) {
      obj->setRequestedSrv
        (dynamic_cast<castor::vdqm::TapeServer*>
         (cnvSvc()->getObjFromId(requestedSrvId)));
    } else {
      cnvSvc()->updateObj(obj->requestedSrv());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeDrive
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjTapeDrive(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapeDriveId = rset->getInt64(8);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->tapeDrive() &&
      (0 == tapeDriveId ||
       obj->tapeDrive()->id() != tapeDriveId)) {
    obj->tapeDrive()->setRunningTapeReq(0);
    obj->setTapeDrive(0);
  }
  // Update object or create new one
  if (0 != tapeDriveId) {
    if (0 == obj->tapeDrive()) {
      obj->setTapeDrive
        (dynamic_cast<castor::vdqm::TapeDrive*>
         (cnvSvc()->getObjFromId(tapeDriveId)));
    } else {
      cnvSvc()->updateObj(obj->tapeDrive());
    }
    obj->tapeDrive()->setRunningTapeReq(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjDeviceGroupName
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjDeviceGroupName(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 deviceGroupNameId = rset->getInt64(9);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->deviceGroupName() &&
      (0 == deviceGroupNameId ||
       obj->deviceGroupName()->id() != deviceGroupNameId)) {
    obj->setDeviceGroupName(0);
  }
  // Update object or create new one
  if (0 != deviceGroupNameId) {
    if (0 == obj->deviceGroupName()) {
      obj->setDeviceGroupName
        (dynamic_cast<castor::vdqm::DeviceGroupName*>
         (cnvSvc()->getObjFromId(deviceGroupNameId)));
    } else {
      cnvSvc()->updateObj(obj->deviceGroupName());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjClientIdentification
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::fillObjClientIdentification(castor::vdqm::TapeRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 clientId = rset->getInt64(10);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->client() &&
      (0 == clientId ||
       obj->client()->id() != clientId)) {
    obj->setClient(0);
  }
  // Update object or create new one
  if (0 != clientId) {
    if (0 == obj->client()) {
      obj->setClient
        (dynamic_cast<castor::stager::ClientIdentification*>
         (cnvSvc()->getObjFromId(clientId)));
    } else {
      cnvSvc()->updateObj(obj->client());
    }
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::createRep(castor::IAddress* address,
                                                  castor::IObject* object,
                                                  bool autocommit,
                                                  unsigned int type)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(10, castor::db::DBTYPE_INT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setInt(1, obj->priority());
    m_insertStatement->setInt64(2, obj->modificationTime());
    m_insertStatement->setInt(3, time(0));
    m_insertStatement->setInt64(4, (type == OBJ_Tape && obj->tape() != 0) ? obj->tape()->id() : 0);
    m_insertStatement->setInt64(5, (type == OBJ_TapeAccessSpecification && obj->tapeAccessSpecification() != 0) ? obj->tapeAccessSpecification()->id() : 0);
    m_insertStatement->setInt64(6, (type == OBJ_TapeServer && obj->requestedSrv() != 0) ? obj->requestedSrv()->id() : 0);
    m_insertStatement->setInt64(7, (type == OBJ_TapeDrive && obj->tapeDrive() != 0) ? obj->tapeDrive()->id() : 0);
    m_insertStatement->setInt64(8, (type == OBJ_DeviceGroupName && obj->deviceGroupName() != 0) ? obj->deviceGroupName()->id() : 0);
    m_insertStatement->setInt64(9, (type == OBJ_ClientIdentification && obj->client() != 0) ? obj->client()->id() : 0);
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getInt64(10));
    m_storeTypeStatement->setInt64(1, obj->id());
    m_storeTypeStatement->setInt64(2, obj->type());
    m_storeTypeStatement->execute();
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { cnvSvc()->rollback(); }
    catch(castor::exception::SQLError ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was :" << std::endl
                    << s_insertStatementString << std::endl
                    << "and parameters' values were :" << std::endl
                    << "  priority : " << obj->priority() << std::endl
                    << "  modificationTime : " << obj->modificationTime() << std::endl
                    << "  creationTime : " << obj->creationTime() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  tape : " << obj->tape() << std::endl
                    << "  tapeAccessSpecification : " << obj->tapeAccessSpecification() << std::endl
                    << "  requestedSrv : " << obj->requestedSrv() << std::endl
                    << "  tapeDrive : " << obj->tapeDrive() << std::endl
                    << "  deviceGroupName : " << obj->deviceGroupName() << std::endl
                    << "  client : " << obj->client() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::updateRep(castor::IAddress* address,
                                                  castor::IObject* object,
                                                  bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setInt(1, obj->priority());
    m_updateStatement->setInt64(2, obj->modificationTime());
    m_updateStatement->setInt64(3, obj->id());
    m_updateStatement->execute();
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { cnvSvc()->rollback(); }
    catch(castor::exception::SQLError ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::deleteRep(castor::IAddress* address,
                                                  castor::IObject* object,
                                                  bool autocommit)
  throw (castor::exception::Exception) {
  castor::vdqm::TapeRequest* obj = 
    dynamic_cast<castor::vdqm::TapeRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setInt64(1, obj->id());
    m_deleteTypeStatement->execute();
    m_deleteStatement->setInt64(1, obj->id());
    m_deleteStatement->execute();
    if (obj->client() != 0) {
      cnvSvc()->deleteRep(0, obj->client(), false);
    }
    if (autocommit) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { cnvSvc()->rollback(); }
    catch(castor::exception::SQLError ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was :" << std::endl
                    << s_deleteStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbTapeRequestCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::vdqm::TapeRequest* object = new castor::vdqm::TapeRequest();
    // Now retrieve and set members
    object->setPriority(rset->getInt(1));
    object->setModificationTime(rset->getInt64(2));
    object->setCreationTime(rset->getInt64(3));
    object->setId(rset->getInt64(4));
    delete rset;
    return object;
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { cnvSvc()->rollback(); }
    catch(castor::exception::SQLError ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was :" << std::endl
                    << s_selectStatementString << std::endl
                    << "and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeRequestCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::vdqm::TapeRequest* object = 
      dynamic_cast<castor::vdqm::TapeRequest*>(obj);
    object->setPriority(rset->getInt(1));
    object->setModificationTime(rset->getInt64(2));
    object->setCreationTime(rset->getInt64(3));
    object->setId(rset->getInt64(4));
    delete rset;
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { cnvSvc()->rollback(); }
    catch(castor::exception::SQLError ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was :" << std::endl
                    << s_updateStatementString << std::endl
                    << "and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

