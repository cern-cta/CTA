/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbSvcClassCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbSvcClassCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/VectorAddress.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/exception/OutOfMemory.hpp"
#include "castor/stager/DiskPool.hpp"
#include "castor/stager/FileClass.hpp"
#include "castor/stager/SvcClass.hpp"
#include <algorithm>
#include <set>
#include <stdlib.h>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbSvcClassCnv>* s_factoryDbSvcClassCnv =
  new castor::CnvFactory<castor::db::cnv::DbSvcClassCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbSvcClassCnv::s_insertStatementString =
"INSERT INTO SvcClass (name, defaultFileSize, maxReplicaNb, recallerPolicy, gcPolicy, disk1Behavior, replicateOnClose, failJobsWhenNoSpace, lastEditor, lastEditionTime, id, forcedFileClass) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,ids_seq.nextval,:11) RETURNING id INTO :12";

/// SQL statement for request bulk insertion
const std::string castor::db::cnv::DbSvcClassCnv::s_bulkInsertStatementString =
"INSERT /* bulk */ INTO SvcClass (name, defaultFileSize, maxReplicaNb, recallerPolicy, gcPolicy, disk1Behavior, replicateOnClose, failJobsWhenNoSpace, lastEditor, lastEditionTime, id, forcedFileClass) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,ids_seq.nextval,:11) RETURNING id INTO :12";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbSvcClassCnv::s_deleteStatementString =
"DELETE FROM SvcClass WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbSvcClassCnv::s_selectStatementString =
"SELECT name, defaultFileSize, maxReplicaNb, recallerPolicy, gcPolicy, disk1Behavior, replicateOnClose, failJobsWhenNoSpace, lastEditor, lastEditionTime, id, forcedFileClass FROM SvcClass WHERE id = :1";

/// SQL statement for bulk request selection
const std::string castor::db::cnv::DbSvcClassCnv::s_bulkSelectStatementString =
"DECLARE \
   TYPE RecordType IS RECORD (name VARCHAR2(2048), defaultFileSize INTEGER, maxReplicaNb NUMBER, recallerPolicy VARCHAR2(2048), gcPolicy VARCHAR2(2048), disk1Behavior NUMBER, replicateOnClose NUMBER, failJobsWhenNoSpace NUMBER, lastEditor VARCHAR2(2048), lastEditionTime INTEGER, id INTEGER, forcedFileClass INTEGER); \
   TYPE CurType IS REF CURSOR RETURN RecordType; \
   PROCEDURE bulkSelect(ids IN castor.\"cnumList\", \
                        objs OUT CurType) AS \
   BEGIN \
     FORALL i IN ids.FIRST..ids.LAST \
       INSERT INTO bulkSelectHelper VALUES(ids(i)); \
     OPEN objs FOR SELECT name, defaultFileSize, maxReplicaNb, recallerPolicy, gcPolicy, disk1Behavior, replicateOnClose, failJobsWhenNoSpace, lastEditor, lastEditionTime, id, forcedFileClass \
                     FROM SvcClass t, bulkSelectHelper h \
                    WHERE t.id = h.objId; \
     DELETE FROM bulkSelectHelper; \
   END; \
 BEGIN \
   bulkSelect(:1, :2); \
 END;";

/// SQL statement for request update
const std::string castor::db::cnv::DbSvcClassCnv::s_updateStatementString =
"UPDATE SvcClass SET name = :1, defaultFileSize = :2, maxReplicaNb = :3, recallerPolicy = :4, gcPolicy = :5, disk1Behavior = :6, replicateOnClose = :7, failJobsWhenNoSpace = :8, lastEditor = :9, lastEditionTime = :10 WHERE id = :11";

/// SQL insert statement for member diskPools
const std::string castor::db::cnv::DbSvcClassCnv::s_insertDiskPoolStatementString =
"INSERT INTO DiskPool2SvcClass (Child, Parent) VALUES (:1, :2)";

/// SQL delete statement for member diskPools
const std::string castor::db::cnv::DbSvcClassCnv::s_deleteDiskPoolStatementString =
"DELETE FROM DiskPool2SvcClass WHERE Child = :1 AND Parent = :2";

/// SQL select statement for member diskPools
// The FOR UPDATE is needed in order to avoid deletion
// of a segment after listing and before update/remove
const std::string castor::db::cnv::DbSvcClassCnv::s_selectDiskPoolStatementString =
"SELECT Parent FROM DiskPool2SvcClass WHERE Child = :1 FOR UPDATE";

/// SQL existence statement for member forcedFileClass
const std::string castor::db::cnv::DbSvcClassCnv::s_checkFileClassExistStatementString =
"SELECT id FROM FileClass WHERE id = :1";

/// SQL update statement for member forcedFileClass
const std::string castor::db::cnv::DbSvcClassCnv::s_updateFileClassStatementString =
"UPDATE SvcClass SET forcedFileClass = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbSvcClassCnv::DbSvcClassCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_bulkInsertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_bulkSelectStatement(0),
  m_updateStatement(0),
  m_insertDiskPoolStatement(0),
  m_deleteDiskPoolStatement(0),
  m_selectDiskPoolStatement(0),
  m_checkFileClassExistStatement(0),
  m_updateFileClassStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbSvcClassCnv::~DbSvcClassCnv() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    if(m_insertStatement) delete m_insertStatement;
    if(m_bulkInsertStatement) delete m_bulkInsertStatement;
    if(m_deleteStatement) delete m_deleteStatement;
    if(m_selectStatement) delete m_selectStatement;
    if(m_bulkSelectStatement) delete m_bulkSelectStatement;
    if(m_updateStatement) delete m_updateStatement;
    if(m_insertDiskPoolStatement) delete m_insertDiskPoolStatement;
    if(m_deleteDiskPoolStatement) delete m_deleteDiskPoolStatement;
    if(m_selectDiskPoolStatement) delete m_selectDiskPoolStatement;
    if(m_checkFileClassExistStatement) delete m_checkFileClassExistStatement;
    if(m_updateFileClassStatement) delete m_updateFileClassStatement;
  } catch (castor::exception::Exception& ignored) {};
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
unsigned int castor::db::cnv::DbSvcClassCnv::ObjType() {
  return castor::stager::SvcClass::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
unsigned int castor::db::cnv::DbSvcClassCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillRep(castor::IAddress*,
                                             castor::IObject* object,
                                             unsigned int type,
                                             bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::SvcClass* obj = 
    dynamic_cast<castor::stager::SvcClass*>(object);
  try {
    switch (type) {
    case castor::OBJ_DiskPool :
      fillRepDiskPool(obj);
      break;
    case castor::OBJ_FileClass :
      fillRepFileClass(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError& e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepDiskPool
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillRepDiskPool(castor::stager::SvcClass* obj)
  throw (castor::exception::Exception) {
  // check select statement
  if (0 == m_selectDiskPoolStatement) {
    m_selectDiskPoolStatement = createStatement(s_selectDiskPoolStatementString);
  }
  // Get current database data
  std::set<u_signed64> diskPoolsList;
  m_selectDiskPoolStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskPoolStatement->executeQuery();
  while (rset->next()) {
    diskPoolsList.insert(rset->getUInt64(1));
  }
  delete rset;
  // update diskPools and create new ones
  for (std::vector<castor::stager::DiskPool*>::iterator it = obj->diskPools().begin();
       it != obj->diskPools().end();
       it++) {
    if (0 == (*it)->id()) {
      cnvSvc()->createRep(0, *it, false);
    }
    std::set<u_signed64>::iterator item;
    if ((item = diskPoolsList.find((*it)->id())) != diskPoolsList.end()) {
      diskPoolsList.erase(item);
    } else {
      if (0 == m_insertDiskPoolStatement) {
        m_insertDiskPoolStatement = createStatement(s_insertDiskPoolStatementString);
      }
      m_insertDiskPoolStatement->setUInt64(1, obj->id());
      m_insertDiskPoolStatement->setUInt64(2, (*it)->id());
      m_insertDiskPoolStatement->execute();
    }
  }
  // Delete old links
  for (std::set<u_signed64>::iterator it = diskPoolsList.begin();
       it != diskPoolsList.end();
       it++) {
    if (0 == m_deleteDiskPoolStatement) {
      m_deleteDiskPoolStatement = createStatement(s_deleteDiskPoolStatementString);
    }
    m_deleteDiskPoolStatement->setUInt64(1, obj->id());
    m_deleteDiskPoolStatement->setUInt64(2, *it);
    m_deleteDiskPoolStatement->execute();
  }
}

//------------------------------------------------------------------------------
// fillRepFileClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillRepFileClass(castor::stager::SvcClass* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->forcedFileClass()) {
    // Check checkFileClassExist statement
    if (0 == m_checkFileClassExistStatement) {
      m_checkFileClassExistStatement = createStatement(s_checkFileClassExistStatementString);
    }
    // retrieve the object from the database
    m_checkFileClassExistStatement->setUInt64(1, obj->forcedFileClass()->id());
    castor::db::IDbResultSet *rset = m_checkFileClassExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->forcedFileClass(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateFileClassStatement) {
    m_updateFileClassStatement = createStatement(s_updateFileClassStatementString);
  }
  // Update local object
  m_updateFileClassStatement->setUInt64(1, 0 == obj->forcedFileClass() ? 0 : obj->forcedFileClass()->id());
  m_updateFileClassStatement->setUInt64(2, obj->id());
  m_updateFileClassStatement->execute();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillObj(castor::IAddress*,
                                             castor::IObject* object,
                                             unsigned int type,
                                             bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::SvcClass* obj = 
    dynamic_cast<castor::stager::SvcClass*>(object);
  switch (type) {
  case castor::OBJ_DiskPool :
    fillObjDiskPool(obj);
    break;
  case castor::OBJ_FileClass :
    fillObjFileClass(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (endTransaction) {
    cnvSvc()->commit();
  }
}

//------------------------------------------------------------------------------
// fillObjDiskPool
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillObjDiskPool(castor::stager::SvcClass* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectDiskPoolStatement) {
    m_selectDiskPoolStatement = createStatement(s_selectDiskPoolStatementString);
  }
  // retrieve the object from the database
  std::vector<u_signed64> diskPoolsList;
  m_selectDiskPoolStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskPoolStatement->executeQuery();
  while (rset->next()) {
    diskPoolsList.push_back(rset->getUInt64(1));
  }
  // Close ResultSet
  delete rset;
  // Update objects and mark old ones for deletion
  std::vector<castor::stager::DiskPool*> toBeDeleted;
  for (std::vector<castor::stager::DiskPool*>::iterator it = obj->diskPools().begin();
       it != obj->diskPools().end();
       it++) {
    std::vector<u_signed64>::iterator item =
      std::find(diskPoolsList.begin(), diskPoolsList.end(), (*it)->id());
    if (item == diskPoolsList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      diskPoolsList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::stager::DiskPool*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeDiskPools(*it);
    (*it)->removeSvcClasses(obj);
  }
  // Create new objects
  std::vector<castor::IObject*> newDiskPools =
    cnvSvc()->getObjsFromIds(diskPoolsList, OBJ_DiskPool);
  for (std::vector<castor::IObject*>::iterator it = newDiskPools.begin();
       it != newDiskPools.end();
       it++) {
    castor::stager::DiskPool* remoteObj = 
      dynamic_cast<castor::stager::DiskPool*>(*it);
    obj->addDiskPools(remoteObj);
    remoteObj->addSvcClasses(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjFileClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::fillObjFileClass(castor::stager::SvcClass* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 forcedFileClassId = rset->getInt64(12);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->forcedFileClass() &&
      (0 == forcedFileClassId ||
       obj->forcedFileClass()->id() != forcedFileClassId)) {
    obj->setForcedFileClass(0);
  }
  // Update object or create new one
  if (0 != forcedFileClassId) {
    if (0 == obj->forcedFileClass()) {
      obj->setForcedFileClass
        (dynamic_cast<castor::stager::FileClass*>
         (cnvSvc()->getObjFromId(forcedFileClassId, OBJ_FileClass)));
    } else {
      cnvSvc()->updateObj(obj->forcedFileClass());
    }
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::createRep(castor::IAddress*,
                                               castor::IObject* object,
                                               bool endTransaction,
                                               unsigned int type)
  throw (castor::exception::Exception) {
  castor::stager::SvcClass* obj = 
    dynamic_cast<castor::stager::SvcClass*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(12, castor::db::DBTYPE_UINT64);
    }
    // Now Save the current object
    m_insertStatement->setString(1, obj->name());
    m_insertStatement->setUInt64(2, obj->defaultFileSize());
    m_insertStatement->setInt(3, obj->maxReplicaNb());
    m_insertStatement->setString(4, obj->recallerPolicy());
    m_insertStatement->setString(5, obj->gcPolicy());
    m_insertStatement->setInt(6, obj->disk1Behavior());
    m_insertStatement->setInt(7, obj->replicateOnClose());
    m_insertStatement->setInt(8, obj->failJobsWhenNoSpace());
    m_insertStatement->setString(9, obj->lastEditor());
    m_insertStatement->setUInt64(10, obj->lastEditionTime());
    m_insertStatement->setUInt64(11, (type == OBJ_FileClass && obj->forcedFileClass() != 0) ? obj->forcedFileClass()->id() : 0);
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getUInt64(12));
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError& e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception& ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_insertStatementString << std::endl
                    << " and parameters' values were :" << std::endl
                    << "  name : " << obj->name() << std::endl
                    << "  defaultFileSize : " << obj->defaultFileSize() << std::endl
                    << "  maxReplicaNb : " << obj->maxReplicaNb() << std::endl
                    << "  recallerPolicy : " << obj->recallerPolicy() << std::endl
                    << "  gcPolicy : " << obj->gcPolicy() << std::endl
                    << "  disk1Behavior : " << obj->disk1Behavior() << std::endl
                    << "  replicateOnClose : " << obj->replicateOnClose() << std::endl
                    << "  failJobsWhenNoSpace : " << obj->failJobsWhenNoSpace() << std::endl
                    << "  lastEditor : " << obj->lastEditor() << std::endl
                    << "  lastEditionTime : " << obj->lastEditionTime() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  forcedFileClass : " << (obj->forcedFileClass() ? obj->forcedFileClass()->id() : 0) << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::bulkCreateRep(castor::IAddress*,
                                                   std::vector<castor::IObject*> &objects,
                                                   bool endTransaction,
                                                   unsigned int type)
  throw (castor::exception::Exception) {
  // check whether something needs to be done
  int nb = objects.size();
  if (0 == nb) return;
  // Casts all objects
  std::vector<castor::stager::SvcClass*> objs;
  for (int i = 0; i < nb; i++) {
    objs.push_back(dynamic_cast<castor::stager::SvcClass*>(objects[i]));
  }
  std::vector<void *> allocMem;
  try {
    // Check whether the statements are ok
    if (0 == m_bulkInsertStatement) {
      m_bulkInsertStatement = createStatement(s_bulkInsertStatementString);
      m_bulkInsertStatement->registerOutParam(12, castor::db::DBTYPE_UINT64);
    }
    // build the buffers for name
    unsigned int nameMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->name().length()+1 > nameMaxLen)
        nameMaxLen = objs[i]->name().length()+1;
    }
    char* nameBuffer = (char*) calloc(nb, nameMaxLen);
    if (nameBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nameBuffer);
    unsigned short* nameBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nameBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nameBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(nameBuffer+(i*nameMaxLen), objs[i]->name().c_str(), nameMaxLen);
      nameBufLens[i] = objs[i]->name().length()+1; // + 1 for the trailing \0
    }
    m_bulkInsertStatement->setDataBuffer
      (1, nameBuffer, castor::db::DBTYPE_STRING, nameMaxLen, nameBufLens);
    // build the buffers for defaultFileSize
    double* defaultFileSizeBuffer = (double*) malloc(nb * sizeof(double));
    if (defaultFileSizeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(defaultFileSizeBuffer);
    unsigned short* defaultFileSizeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (defaultFileSizeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(defaultFileSizeBufLens);
    for (int i = 0; i < nb; i++) {
      defaultFileSizeBuffer[i] = objs[i]->defaultFileSize();
      defaultFileSizeBufLens[i] = sizeof(double);
    }
    m_bulkInsertStatement->setDataBuffer
      (2, defaultFileSizeBuffer, castor::db::DBTYPE_UINT64, sizeof(defaultFileSizeBuffer[0]), defaultFileSizeBufLens);
    // build the buffers for maxReplicaNb
    int* maxReplicaNbBuffer = (int*) malloc(nb * sizeof(int));
    if (maxReplicaNbBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(maxReplicaNbBuffer);
    unsigned short* maxReplicaNbBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (maxReplicaNbBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(maxReplicaNbBufLens);
    for (int i = 0; i < nb; i++) {
      maxReplicaNbBuffer[i] = objs[i]->maxReplicaNb();
      maxReplicaNbBufLens[i] = sizeof(int);
    }
    m_bulkInsertStatement->setDataBuffer
      (3, maxReplicaNbBuffer, castor::db::DBTYPE_INT, sizeof(maxReplicaNbBuffer[0]), maxReplicaNbBufLens);
    // build the buffers for recallerPolicy
    unsigned int recallerPolicyMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->recallerPolicy().length()+1 > recallerPolicyMaxLen)
        recallerPolicyMaxLen = objs[i]->recallerPolicy().length()+1;
    }
    char* recallerPolicyBuffer = (char*) calloc(nb, recallerPolicyMaxLen);
    if (recallerPolicyBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(recallerPolicyBuffer);
    unsigned short* recallerPolicyBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (recallerPolicyBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(recallerPolicyBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(recallerPolicyBuffer+(i*recallerPolicyMaxLen), objs[i]->recallerPolicy().c_str(), recallerPolicyMaxLen);
      recallerPolicyBufLens[i] = objs[i]->recallerPolicy().length()+1; // + 1 for the trailing \0
    }
    m_bulkInsertStatement->setDataBuffer
      (4, recallerPolicyBuffer, castor::db::DBTYPE_STRING, recallerPolicyMaxLen, recallerPolicyBufLens);
    // build the buffers for gcPolicy
    unsigned int gcPolicyMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->gcPolicy().length()+1 > gcPolicyMaxLen)
        gcPolicyMaxLen = objs[i]->gcPolicy().length()+1;
    }
    char* gcPolicyBuffer = (char*) calloc(nb, gcPolicyMaxLen);
    if (gcPolicyBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(gcPolicyBuffer);
    unsigned short* gcPolicyBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (gcPolicyBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(gcPolicyBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(gcPolicyBuffer+(i*gcPolicyMaxLen), objs[i]->gcPolicy().c_str(), gcPolicyMaxLen);
      gcPolicyBufLens[i] = objs[i]->gcPolicy().length()+1; // + 1 for the trailing \0
    }
    m_bulkInsertStatement->setDataBuffer
      (5, gcPolicyBuffer, castor::db::DBTYPE_STRING, gcPolicyMaxLen, gcPolicyBufLens);
    // build the buffers for disk1Behavior
    bool* disk1BehaviorBuffer = (bool*) malloc(nb * sizeof(bool));
    if (disk1BehaviorBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(disk1BehaviorBuffer);
    unsigned short* disk1BehaviorBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (disk1BehaviorBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(disk1BehaviorBufLens);
    for (int i = 0; i < nb; i++) {
      disk1BehaviorBuffer[i] = objs[i]->disk1Behavior();
      disk1BehaviorBufLens[i] = sizeof(bool);
    }
    m_bulkInsertStatement->setDataBuffer
      (6, disk1BehaviorBuffer, castor::db::DBTYPE_INT, sizeof(disk1BehaviorBuffer[0]), disk1BehaviorBufLens);
    // build the buffers for replicateOnClose
    bool* replicateOnCloseBuffer = (bool*) malloc(nb * sizeof(bool));
    if (replicateOnCloseBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(replicateOnCloseBuffer);
    unsigned short* replicateOnCloseBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (replicateOnCloseBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(replicateOnCloseBufLens);
    for (int i = 0; i < nb; i++) {
      replicateOnCloseBuffer[i] = objs[i]->replicateOnClose();
      replicateOnCloseBufLens[i] = sizeof(bool);
    }
    m_bulkInsertStatement->setDataBuffer
      (7, replicateOnCloseBuffer, castor::db::DBTYPE_INT, sizeof(replicateOnCloseBuffer[0]), replicateOnCloseBufLens);
    // build the buffers for failJobsWhenNoSpace
    bool* failJobsWhenNoSpaceBuffer = (bool*) malloc(nb * sizeof(bool));
    if (failJobsWhenNoSpaceBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(failJobsWhenNoSpaceBuffer);
    unsigned short* failJobsWhenNoSpaceBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (failJobsWhenNoSpaceBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(failJobsWhenNoSpaceBufLens);
    for (int i = 0; i < nb; i++) {
      failJobsWhenNoSpaceBuffer[i] = objs[i]->failJobsWhenNoSpace();
      failJobsWhenNoSpaceBufLens[i] = sizeof(bool);
    }
    m_bulkInsertStatement->setDataBuffer
      (8, failJobsWhenNoSpaceBuffer, castor::db::DBTYPE_INT, sizeof(failJobsWhenNoSpaceBuffer[0]), failJobsWhenNoSpaceBufLens);
    // build the buffers for lastEditor
    unsigned int lastEditorMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->lastEditor().length()+1 > lastEditorMaxLen)
        lastEditorMaxLen = objs[i]->lastEditor().length()+1;
    }
    char* lastEditorBuffer = (char*) calloc(nb, lastEditorMaxLen);
    if (lastEditorBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastEditorBuffer);
    unsigned short* lastEditorBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (lastEditorBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastEditorBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(lastEditorBuffer+(i*lastEditorMaxLen), objs[i]->lastEditor().c_str(), lastEditorMaxLen);
      lastEditorBufLens[i] = objs[i]->lastEditor().length()+1; // + 1 for the trailing \0
    }
    m_bulkInsertStatement->setDataBuffer
      (9, lastEditorBuffer, castor::db::DBTYPE_STRING, lastEditorMaxLen, lastEditorBufLens);
    // build the buffers for lastEditionTime
    double* lastEditionTimeBuffer = (double*) malloc(nb * sizeof(double));
    if (lastEditionTimeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastEditionTimeBuffer);
    unsigned short* lastEditionTimeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (lastEditionTimeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastEditionTimeBufLens);
    for (int i = 0; i < nb; i++) {
      lastEditionTimeBuffer[i] = objs[i]->lastEditionTime();
      lastEditionTimeBufLens[i] = sizeof(double);
    }
    m_bulkInsertStatement->setDataBuffer
      (10, lastEditionTimeBuffer, castor::db::DBTYPE_UINT64, sizeof(lastEditionTimeBuffer[0]), lastEditionTimeBufLens);
    // build the buffers for forcedFileClass
    double* forcedFileClassBuffer = (double*) malloc(nb * sizeof(double));
    if (forcedFileClassBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(forcedFileClassBuffer);
    unsigned short* forcedFileClassBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (forcedFileClassBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(forcedFileClassBufLens);
    for (int i = 0; i < nb; i++) {
      forcedFileClassBuffer[i] = (type == OBJ_FileClass && objs[i]->forcedFileClass() != 0) ? objs[i]->forcedFileClass()->id() : 0;
      forcedFileClassBufLens[i] = sizeof(double);
    }
    m_bulkInsertStatement->setDataBuffer
      (11, forcedFileClassBuffer, castor::db::DBTYPE_UINT64, sizeof(forcedFileClassBuffer[0]), forcedFileClassBufLens);
    // build the buffers for returned ids
    double* idBuffer = (double*) calloc(nb, sizeof(double));
    if (idBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBuffer);
    unsigned short* idBufLens = (unsigned short*) calloc(nb, sizeof(unsigned short));
    if (idBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBufLens);
    m_bulkInsertStatement->setDataBuffer
      (12, idBuffer, castor::db::DBTYPE_UINT64, sizeof(double), idBufLens);
    m_bulkInsertStatement->execute(nb);
    for (int i = 0; i < nb; i++) {
      objects[i]->setId((u_signed64)idBuffer[i]);
    }
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError& e) {
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception& ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkInsert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::updateRep(castor::IAddress*,
                                               castor::IObject* object,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::SvcClass* obj = 
    dynamic_cast<castor::stager::SvcClass*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setString(1, obj->name());
    m_updateStatement->setUInt64(2, obj->defaultFileSize());
    m_updateStatement->setInt(3, obj->maxReplicaNb());
    m_updateStatement->setString(4, obj->recallerPolicy());
    m_updateStatement->setString(5, obj->gcPolicy());
    m_updateStatement->setInt(6, obj->disk1Behavior());
    m_updateStatement->setInt(7, obj->replicateOnClose());
    m_updateStatement->setInt(8, obj->failJobsWhenNoSpace());
    m_updateStatement->setString(9, obj->lastEditor());
    m_updateStatement->setUInt64(10, obj->lastEditionTime());
    m_updateStatement->setUInt64(11, obj->id());
    m_updateStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError& e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception& ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::deleteRep(castor::IAddress*,
                                               castor::IObject* object,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::SvcClass* obj = 
    dynamic_cast<castor::stager::SvcClass*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    // Now Delete the object
    m_deleteStatement->setUInt64(1, obj->id());
    m_deleteStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError& e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception& ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_deleteStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbSvcClassCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::stager::SvcClass* object = new castor::stager::SvcClass();
    // Now retrieve and set members
    object->setName(rset->getString(1));
    object->setDefaultFileSize(rset->getUInt64(2));
    object->setMaxReplicaNb(rset->getInt(3));
    object->setRecallerPolicy(rset->getString(4));
    object->setGcPolicy(rset->getString(5));
    object->setDisk1Behavior(rset->getInt(6));
    object->setReplicateOnClose(rset->getInt(7));
    object->setFailJobsWhenNoSpace(rset->getInt(8));
    object->setLastEditor(rset->getString(9));
    object->setLastEditionTime(rset->getUInt64(10));
    object->setId(rset->getUInt64(11));
    delete rset;
    return object;
  } catch (castor::exception::SQLError& e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_selectStatementString << std::endl
                    << " and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateObj
//------------------------------------------------------------------------------
std::vector<castor::IObject*>
castor::db::cnv::DbSvcClassCnv::bulkCreateObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  // Prepare result
  std::vector<castor::IObject*> res;
  // check whether something needs to be done
  castor::VectorAddress* ad = 
    dynamic_cast<castor::VectorAddress*>(address);
  int nb = ad->target().size();
  if (0 == nb) return res;
  try {
    // Check whether the statement is ok
    if (0 == m_bulkSelectStatement) {
      m_bulkSelectStatement = createStatement(s_bulkSelectStatementString);
      m_bulkSelectStatement->registerOutParam(2, castor::db::DBTYPE_CURSOR);
    }
    // set the buffer for input ids
    m_bulkSelectStatement->setDataBufferUInt64Array(1, ad->target());
    // Execute statement
    m_bulkSelectStatement->execute();
    // get the result, that is a cursor on the selected rows
    castor::db::IDbResultSet *rset =
      m_bulkSelectStatement->getCursor(2);
    // loop and create the new objects
    bool status = rset->next();
    while (status) {
      // create the new Object
      castor::stager::SvcClass* object = new castor::stager::SvcClass();
      // Now retrieve and set members
      object->setName(rset->getString(1));
      object->setDefaultFileSize(rset->getUInt64(2));
      object->setMaxReplicaNb(rset->getInt(3));
      object->setRecallerPolicy(rset->getString(4));
      object->setGcPolicy(rset->getString(5));
      object->setDisk1Behavior(rset->getInt(6));
      object->setReplicateOnClose(rset->getInt(7));
      object->setFailJobsWhenNoSpace(rset->getInt(8));
      object->setLastEditor(rset->getString(9));
      object->setLastEditionTime(rset->getUInt64(10));
      object->setId(rset->getUInt64(11));
      // store object in results and loop;
      res.push_back(object);
      status = rset->next();
    }
    delete rset;
    return res;
  } catch (castor::exception::SQLError& e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkSelect request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbSvcClassCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::stager::SvcClass* object = 
      dynamic_cast<castor::stager::SvcClass*>(obj);
    object->setName(rset->getString(1));
    object->setDefaultFileSize(rset->getUInt64(2));
    object->setMaxReplicaNb(rset->getInt(3));
    object->setRecallerPolicy(rset->getString(4));
    object->setGcPolicy(rset->getString(5));
    object->setDisk1Behavior(rset->getInt(6));
    object->setReplicateOnClose(rset->getInt(7));
    object->setFailJobsWhenNoSpace(rset->getInt(8));
    object->setLastEditor(rset->getString(9));
    object->setLastEditionTime(rset->getUInt64(10));
    object->setId(rset->getUInt64(11));
    delete rset;
  } catch (castor::exception::SQLError& e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

