/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbFileSystemCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbFileSystemCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/VectorAddress.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/exception/OutOfMemory.hpp"
#include "castor/monitoring/AdminStatusCodes.hpp"
#include "castor/stager/DiskCopy.hpp"
#include "castor/stager/DiskPool.hpp"
#include "castor/stager/DiskServer.hpp"
#include "castor/stager/FileSystem.hpp"
#include "castor/stager/FileSystemStatusCodes.hpp"
#include <algorithm>
#include <set>
#include <stdlib.h>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbFileSystemCnv>* s_factoryDbFileSystemCnv =
  new castor::CnvFactory<castor::db::cnv::DbFileSystemCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbFileSystemCnv::s_insertStatementString =
"INSERT INTO FileSystem (free, mountPoint, minFreeSpace, minAllowedFreeSpace, maxFreeSpace, totalSize, readRate, writeRate, nbReadStreams, nbWriteStreams, nbReadWriteStreams, nbMigratorStreams, nbRecallerStreams, id, diskPool, diskserver, status, adminStatus) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,ids_seq.nextval,:14,:15,:16,:17) RETURNING id INTO :18";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbFileSystemCnv::s_deleteStatementString =
"DELETE FROM FileSystem WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbFileSystemCnv::s_selectStatementString =
"SELECT free, mountPoint, minFreeSpace, minAllowedFreeSpace, maxFreeSpace, totalSize, readRate, writeRate, nbReadStreams, nbWriteStreams, nbReadWriteStreams, nbMigratorStreams, nbRecallerStreams, id, diskPool, diskserver, status, adminStatus FROM FileSystem WHERE id = :1";

/// SQL statement for bulk request selection
const std::string castor::db::cnv::DbFileSystemCnv::s_bulkSelectStatementString =
"DECLARE \
   TYPE CurType IS REF CURSOR RETURN FileSystem%ROWTYPE; \
   PROCEDURE bulkSelect(ids IN castor.\"cnumList\", \
                        objs OUT CurType) AS \
   BEGIN \
     FORALL i IN ids.FIRST..ids.LAST \
       INSERT INTO bulkSelectHelper VALUES(ids(i)); \
     OPEN objs FOR SELECT free, mountPoint, minFreeSpace, minAllowedFreeSpace, maxFreeSpace, totalSize, readRate, writeRate, nbReadStreams, nbWriteStreams, nbReadWriteStreams, nbMigratorStreams, nbRecallerStreams, id, diskPool, diskserver, status, adminStatus \
                     FROM FileSystem t, bulkSelectHelper h \
                    WHERE t.id = h.objId; \
     DELETE FROM bulkSelectHelper; \
   END; \
 BEGIN \
   bulkSelect(:1, :2); \
 END;";

/// SQL statement for request update
const std::string castor::db::cnv::DbFileSystemCnv::s_updateStatementString =
"UPDATE FileSystem SET free = :1, mountPoint = :2, minFreeSpace = :3, minAllowedFreeSpace = :4, maxFreeSpace = :5, totalSize = :6, readRate = :7, writeRate = :8, nbReadStreams = :9, nbWriteStreams = :10, nbReadWriteStreams = :11, nbMigratorStreams = :12, nbRecallerStreams = :13, status = :14, adminStatus = :15 WHERE id = :16";

/// SQL statement for type storage
const std::string castor::db::cnv::DbFileSystemCnv::s_storeTypeStatementString =
"INSERT /* FileSystem class */ INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::cnv::DbFileSystemCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member diskPool
const std::string castor::db::cnv::DbFileSystemCnv::s_checkDiskPoolExistStatementString =
"SELECT id FROM DiskPool WHERE id = :1";

/// SQL update statement for member diskPool
const std::string castor::db::cnv::DbFileSystemCnv::s_updateDiskPoolStatementString =
"UPDATE FileSystem SET diskPool = :1 WHERE id = :2";

/// SQL select statement for member copies
const std::string castor::db::cnv::DbFileSystemCnv::s_selectDiskCopyStatementString =
"SELECT id FROM DiskCopy WHERE fileSystem = :1 FOR UPDATE";

/// SQL delete statement for member copies
const std::string castor::db::cnv::DbFileSystemCnv::s_deleteDiskCopyStatementString =
"UPDATE DiskCopy SET fileSystem = 0 WHERE id = :1";

/// SQL remote update statement for member copies
const std::string castor::db::cnv::DbFileSystemCnv::s_remoteUpdateDiskCopyStatementString =
"UPDATE DiskCopy SET fileSystem = :1 WHERE id = :2";

/// SQL existence statement for member diskserver
const std::string castor::db::cnv::DbFileSystemCnv::s_checkDiskServerExistStatementString =
"SELECT id FROM DiskServer WHERE id = :1";

/// SQL update statement for member diskserver
const std::string castor::db::cnv::DbFileSystemCnv::s_updateDiskServerStatementString =
"UPDATE FileSystem SET diskserver = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbFileSystemCnv::DbFileSystemCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_bulkSelectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkDiskPoolExistStatement(0),
  m_updateDiskPoolStatement(0),
  m_selectDiskCopyStatement(0),
  m_deleteDiskCopyStatement(0),
  m_remoteUpdateDiskCopyStatement(0),
  m_checkDiskServerExistStatement(0),
  m_updateDiskServerStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbFileSystemCnv::~DbFileSystemCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    if(m_insertStatement) delete m_insertStatement;
    if(m_deleteStatement) delete m_deleteStatement;
    if(m_selectStatement) delete m_selectStatement;
    if(m_bulkSelectStatement) delete m_bulkSelectStatement;
    if(m_updateStatement) delete m_updateStatement;
    if(m_storeTypeStatement) delete m_storeTypeStatement;
    if(m_deleteTypeStatement) delete m_deleteTypeStatement;
    if(m_checkDiskPoolExistStatement) delete m_checkDiskPoolExistStatement;
    if(m_updateDiskPoolStatement) delete m_updateDiskPoolStatement;
    if(m_deleteDiskCopyStatement) delete m_deleteDiskCopyStatement;
    if(m_selectDiskCopyStatement) delete m_selectDiskCopyStatement;
    if(m_remoteUpdateDiskCopyStatement) delete m_remoteUpdateDiskCopyStatement;
    if(m_checkDiskServerExistStatement) delete m_checkDiskServerExistStatement;
    if(m_updateDiskServerStatement) delete m_updateDiskServerStatement;
  } catch (castor::exception::Exception ignored) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_bulkSelectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkDiskPoolExistStatement = 0;
  m_updateDiskPoolStatement = 0;
  m_selectDiskCopyStatement = 0;
  m_deleteDiskCopyStatement = 0;
  m_remoteUpdateDiskCopyStatement = 0;
  m_checkDiskServerExistStatement = 0;
  m_updateDiskServerStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbFileSystemCnv::ObjType() {
  return castor::stager::FileSystem::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbFileSystemCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillRep(castor::IAddress* address,
                                               castor::IObject* object,
                                               unsigned int type,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::FileSystem* obj = 
    dynamic_cast<castor::stager::FileSystem*>(object);
  try {
    switch (type) {
    case castor::OBJ_DiskPool :
      fillRepDiskPool(obj);
      break;
    case castor::OBJ_DiskCopy :
      fillRepDiskCopy(obj);
      break;
    case castor::OBJ_DiskServer :
      fillRepDiskServer(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepDiskPool
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillRepDiskPool(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->diskPool()) {
    // Check checkDiskPoolExist statement
    if (0 == m_checkDiskPoolExistStatement) {
      m_checkDiskPoolExistStatement = createStatement(s_checkDiskPoolExistStatementString);
    }
    // retrieve the object from the database
    m_checkDiskPoolExistStatement->setUInt64(1, obj->diskPool()->id());
    castor::db::IDbResultSet *rset = m_checkDiskPoolExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->diskPool(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateDiskPoolStatement) {
    m_updateDiskPoolStatement = createStatement(s_updateDiskPoolStatementString);
  }
  // Update local object
  m_updateDiskPoolStatement->setUInt64(1, 0 == obj->diskPool() ? 0 : obj->diskPool()->id());
  m_updateDiskPoolStatement->setUInt64(2, obj->id());
  m_updateDiskPoolStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillRepDiskCopy(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  // check select statement
  if (0 == m_selectDiskCopyStatement) {
    m_selectDiskCopyStatement = createStatement(s_selectDiskCopyStatementString);
  }
  // Get current database data
  std::set<u_signed64> copiesList;
  m_selectDiskCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskCopyStatement->executeQuery();
  while (rset->next()) {
    copiesList.insert(rset->getUInt64(1));
  }
  delete rset;
  // update copies and create new ones
  std::vector<castor::IObject*> toBeCreated;
  for (std::vector<castor::stager::DiskCopy*>::iterator it = obj->copies().begin();
       it != obj->copies().end();
       it++) {
    if (0 == (*it)->id()) {
      toBeCreated.push_back(*it);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateDiskCopyStatement) {
        m_remoteUpdateDiskCopyStatement = createStatement(s_remoteUpdateDiskCopyStatementString);
      }
      // Update remote object
      m_remoteUpdateDiskCopyStatement->setUInt64(1, obj->id());
      m_remoteUpdateDiskCopyStatement->setUInt64(2, (*it)->id());
      m_remoteUpdateDiskCopyStatement->execute();
      std::set<u_signed64>::iterator item;
      if ((item = copiesList.find((*it)->id())) != copiesList.end()) {
        copiesList.erase(item);
      }
    }
  }
  // create new objects
  cnvSvc()->bulkCreateRep(0, toBeCreated, false, OBJ_FileSystem);
  // Delete old links
  for (std::set<u_signed64>::iterator it = copiesList.begin();
       it != copiesList.end();
       it++) {
    if (0 == m_deleteDiskCopyStatement) {
      m_deleteDiskCopyStatement = createStatement(s_deleteDiskCopyStatementString);
    }
    m_deleteDiskCopyStatement->setUInt64(1, *it);
    m_deleteDiskCopyStatement->execute();
  }
}

//------------------------------------------------------------------------------
// fillRepDiskServer
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillRepDiskServer(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->diskserver()) {
    // Check checkDiskServerExist statement
    if (0 == m_checkDiskServerExistStatement) {
      m_checkDiskServerExistStatement = createStatement(s_checkDiskServerExistStatementString);
    }
    // retrieve the object from the database
    m_checkDiskServerExistStatement->setUInt64(1, obj->diskserver()->id());
    castor::db::IDbResultSet *rset = m_checkDiskServerExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->diskserver(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateDiskServerStatement) {
    m_updateDiskServerStatement = createStatement(s_updateDiskServerStatementString);
  }
  // Update local object
  m_updateDiskServerStatement->setUInt64(1, 0 == obj->diskserver() ? 0 : obj->diskserver()->id());
  m_updateDiskServerStatement->setUInt64(2, obj->id());
  m_updateDiskServerStatement->execute();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillObj(castor::IAddress* address,
                                               castor::IObject* object,
                                               unsigned int type,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::FileSystem* obj = 
    dynamic_cast<castor::stager::FileSystem*>(object);
  switch (type) {
  case castor::OBJ_DiskPool :
    fillObjDiskPool(obj);
    break;
  case castor::OBJ_DiskCopy :
    fillObjDiskCopy(obj);
    break;
  case castor::OBJ_DiskServer :
    fillObjDiskServer(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (endTransaction) {
    cnvSvc()->commit();
  }
}

//------------------------------------------------------------------------------
// fillObjDiskPool
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillObjDiskPool(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 diskPoolId = rset->getInt64(15);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->diskPool() &&
      (0 == diskPoolId ||
       obj->diskPool()->id() != diskPoolId)) {
    obj->diskPool()->removeFileSystems(obj);
    obj->setDiskPool(0);
  }
  // Update object or create new one
  if (0 != diskPoolId) {
    if (0 == obj->diskPool()) {
      obj->setDiskPool
        (dynamic_cast<castor::stager::DiskPool*>
         (cnvSvc()->getObjFromId(diskPoolId)));
    } else {
      cnvSvc()->updateObj(obj->diskPool());
    }
    obj->diskPool()->addFileSystems(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillObjDiskCopy(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectDiskCopyStatement) {
    m_selectDiskCopyStatement = createStatement(s_selectDiskCopyStatementString);
  }
  // retrieve the object from the database
  std::vector<u_signed64> copiesList;
  m_selectDiskCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskCopyStatement->executeQuery();
  while (rset->next()) {
    copiesList.push_back(rset->getUInt64(1));
  }
  // Close ResultSet
  delete rset;
  // Update objects and mark old ones for deletion
  std::vector<castor::stager::DiskCopy*> toBeDeleted;
  for (std::vector<castor::stager::DiskCopy*>::iterator it = obj->copies().begin();
       it != obj->copies().end();
       it++) {
    std::vector<u_signed64>::iterator item =
      std::find(copiesList.begin(), copiesList.end(), (*it)->id());
    if (item == copiesList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      copiesList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::stager::DiskCopy*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeCopies(*it);
    (*it)->setFileSystem(0);
  }
  // Create new objects
  std::vector<castor::IObject*> newCopies =
    cnvSvc()->getObjsFromIds(copiesList, OBJ_DiskCopy);
  for (std::vector<castor::IObject*>::iterator it = newCopies.begin();
       it != newCopies.end();
       it++) {
    castor::stager::DiskCopy* remoteObj = 
      dynamic_cast<castor::stager::DiskCopy*>(*it);
    obj->addCopies(remoteObj);
    remoteObj->setFileSystem(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjDiskServer
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::fillObjDiskServer(castor::stager::FileSystem* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 diskserverId = rset->getInt64(16);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->diskserver() &&
      (0 == diskserverId ||
       obj->diskserver()->id() != diskserverId)) {
    obj->diskserver()->removeFileSystems(obj);
    obj->setDiskserver(0);
  }
  // Update object or create new one
  if (0 != diskserverId) {
    if (0 == obj->diskserver()) {
      obj->setDiskserver
        (dynamic_cast<castor::stager::DiskServer*>
         (cnvSvc()->getObjFromId(diskserverId)));
    } else {
      cnvSvc()->updateObj(obj->diskserver());
    }
    obj->diskserver()->addFileSystems(obj);
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::createRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool endTransaction,
                                                 unsigned int type)
  throw (castor::exception::Exception) {
  castor::stager::FileSystem* obj = 
    dynamic_cast<castor::stager::FileSystem*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(18, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setUInt64(1, obj->free());
    m_insertStatement->setString(2, obj->mountPoint());
    m_insertStatement->setFloat(3, obj->minFreeSpace());
    m_insertStatement->setFloat(4, obj->minAllowedFreeSpace());
    m_insertStatement->setFloat(5, obj->maxFreeSpace());
    m_insertStatement->setUInt64(6, obj->totalSize());
    m_insertStatement->setUInt64(7, obj->readRate());
    m_insertStatement->setUInt64(8, obj->writeRate());
    m_insertStatement->setInt(9, obj->nbReadStreams());
    m_insertStatement->setInt(10, obj->nbWriteStreams());
    m_insertStatement->setInt(11, obj->nbReadWriteStreams());
    m_insertStatement->setInt(12, obj->nbMigratorStreams());
    m_insertStatement->setInt(13, obj->nbRecallerStreams());
    m_insertStatement->setUInt64(14, (type == OBJ_DiskPool && obj->diskPool() != 0) ? obj->diskPool()->id() : 0);
    m_insertStatement->setUInt64(15, (type == OBJ_DiskServer && obj->diskserver() != 0) ? obj->diskserver()->id() : 0);
    m_insertStatement->setInt(16, (int)obj->status());
    m_insertStatement->setInt(17, (int)obj->adminStatus());
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getUInt64(18));
    m_storeTypeStatement->setUInt64(1, obj->id());
    m_storeTypeStatement->setUInt64(2, obj->type());
    m_storeTypeStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_insertStatementString << std::endl
                    << " and parameters' values were :" << std::endl
                    << "  free : " << obj->free() << std::endl
                    << "  mountPoint : " << obj->mountPoint() << std::endl
                    << "  minFreeSpace : " << obj->minFreeSpace() << std::endl
                    << "  minAllowedFreeSpace : " << obj->minAllowedFreeSpace() << std::endl
                    << "  maxFreeSpace : " << obj->maxFreeSpace() << std::endl
                    << "  totalSize : " << obj->totalSize() << std::endl
                    << "  readRate : " << obj->readRate() << std::endl
                    << "  writeRate : " << obj->writeRate() << std::endl
                    << "  nbReadStreams : " << obj->nbReadStreams() << std::endl
                    << "  nbWriteStreams : " << obj->nbWriteStreams() << std::endl
                    << "  nbReadWriteStreams : " << obj->nbReadWriteStreams() << std::endl
                    << "  nbMigratorStreams : " << obj->nbMigratorStreams() << std::endl
                    << "  nbRecallerStreams : " << obj->nbRecallerStreams() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  diskPool : " << obj->diskPool() << std::endl
                    << "  diskserver : " << obj->diskserver() << std::endl
                    << "  status : " << obj->status() << std::endl
                    << "  adminStatus : " << obj->adminStatus() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::bulkCreateRep(castor::IAddress* address,
                                                     std::vector<castor::IObject*> &objects,
                                                     bool endTransaction,
                                                     unsigned int type)
  throw (castor::exception::Exception) {
  // check whether something needs to be done
  int nb = objects.size();
  if (0 == nb) return;
  // Casts all objects
  std::vector<castor::stager::FileSystem*> objs;
  for (int i = 0; i < nb; i++) {
    objs.push_back(dynamic_cast<castor::stager::FileSystem*>(objects[i]));
  }
  std::vector<void *> allocMem;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(18, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // build the buffers for free
    double* freeBuffer = (double*) malloc(nb * sizeof(double));
    if (freeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(freeBuffer);
    unsigned short* freeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (freeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(freeBufLens);
    for (int i = 0; i < nb; i++) {
      freeBuffer[i] = objs[i]->free();
      freeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (1, freeBuffer, castor::db::DBTYPE_UINT64, sizeof(freeBuffer[0]), freeBufLens);
    // build the buffers for mountPoint
    unsigned int mountPointMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->mountPoint().length()+1 > mountPointMaxLen)
        mountPointMaxLen = objs[i]->mountPoint().length()+1;
    }
    char* mountPointBuffer = (char*) calloc(nb, mountPointMaxLen);
    if (mountPointBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(mountPointBuffer);
    unsigned short* mountPointBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (mountPointBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(mountPointBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(mountPointBuffer+(i*mountPointMaxLen), objs[i]->mountPoint().c_str(), mountPointMaxLen);
      mountPointBufLens[i] = objs[i]->mountPoint().length()+1; // + 1 for the trailing \0
    }
    m_insertStatement->setDataBuffer
      (2, mountPointBuffer, castor::db::DBTYPE_STRING, mountPointMaxLen, mountPointBufLens);
    // build the buffers for minFreeSpace
    float* minFreeSpaceBuffer = (float*) malloc(nb * sizeof(float));
    if (minFreeSpaceBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(minFreeSpaceBuffer);
    unsigned short* minFreeSpaceBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (minFreeSpaceBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(minFreeSpaceBufLens);
    for (int i = 0; i < nb; i++) {
      minFreeSpaceBuffer[i] = objs[i]->minFreeSpace();
      minFreeSpaceBufLens[i] = sizeof(float);
    }
    m_insertStatement->setDataBuffer
      (3, minFreeSpaceBuffer, castor::db::DBTYPE_FLOAT, sizeof(minFreeSpaceBuffer[0]), minFreeSpaceBufLens);
    // build the buffers for minAllowedFreeSpace
    float* minAllowedFreeSpaceBuffer = (float*) malloc(nb * sizeof(float));
    if (minAllowedFreeSpaceBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(minAllowedFreeSpaceBuffer);
    unsigned short* minAllowedFreeSpaceBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (minAllowedFreeSpaceBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(minAllowedFreeSpaceBufLens);
    for (int i = 0; i < nb; i++) {
      minAllowedFreeSpaceBuffer[i] = objs[i]->minAllowedFreeSpace();
      minAllowedFreeSpaceBufLens[i] = sizeof(float);
    }
    m_insertStatement->setDataBuffer
      (4, minAllowedFreeSpaceBuffer, castor::db::DBTYPE_FLOAT, sizeof(minAllowedFreeSpaceBuffer[0]), minAllowedFreeSpaceBufLens);
    // build the buffers for maxFreeSpace
    float* maxFreeSpaceBuffer = (float*) malloc(nb * sizeof(float));
    if (maxFreeSpaceBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(maxFreeSpaceBuffer);
    unsigned short* maxFreeSpaceBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (maxFreeSpaceBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(maxFreeSpaceBufLens);
    for (int i = 0; i < nb; i++) {
      maxFreeSpaceBuffer[i] = objs[i]->maxFreeSpace();
      maxFreeSpaceBufLens[i] = sizeof(float);
    }
    m_insertStatement->setDataBuffer
      (5, maxFreeSpaceBuffer, castor::db::DBTYPE_FLOAT, sizeof(maxFreeSpaceBuffer[0]), maxFreeSpaceBufLens);
    // build the buffers for totalSize
    double* totalSizeBuffer = (double*) malloc(nb * sizeof(double));
    if (totalSizeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(totalSizeBuffer);
    unsigned short* totalSizeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (totalSizeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(totalSizeBufLens);
    for (int i = 0; i < nb; i++) {
      totalSizeBuffer[i] = objs[i]->totalSize();
      totalSizeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (6, totalSizeBuffer, castor::db::DBTYPE_UINT64, sizeof(totalSizeBuffer[0]), totalSizeBufLens);
    // build the buffers for readRate
    double* readRateBuffer = (double*) malloc(nb * sizeof(double));
    if (readRateBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(readRateBuffer);
    unsigned short* readRateBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (readRateBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(readRateBufLens);
    for (int i = 0; i < nb; i++) {
      readRateBuffer[i] = objs[i]->readRate();
      readRateBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (7, readRateBuffer, castor::db::DBTYPE_UINT64, sizeof(readRateBuffer[0]), readRateBufLens);
    // build the buffers for writeRate
    double* writeRateBuffer = (double*) malloc(nb * sizeof(double));
    if (writeRateBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(writeRateBuffer);
    unsigned short* writeRateBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (writeRateBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(writeRateBufLens);
    for (int i = 0; i < nb; i++) {
      writeRateBuffer[i] = objs[i]->writeRate();
      writeRateBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (8, writeRateBuffer, castor::db::DBTYPE_UINT64, sizeof(writeRateBuffer[0]), writeRateBufLens);
    // build the buffers for nbReadStreams
    int* nbReadStreamsBuffer = (int*) malloc(nb * sizeof(int));
    if (nbReadStreamsBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbReadStreamsBuffer);
    unsigned short* nbReadStreamsBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nbReadStreamsBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbReadStreamsBufLens);
    for (int i = 0; i < nb; i++) {
      nbReadStreamsBuffer[i] = objs[i]->nbReadStreams();
      nbReadStreamsBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (9, nbReadStreamsBuffer, castor::db::DBTYPE_INT, sizeof(nbReadStreamsBuffer[0]), nbReadStreamsBufLens);
    // build the buffers for nbWriteStreams
    int* nbWriteStreamsBuffer = (int*) malloc(nb * sizeof(int));
    if (nbWriteStreamsBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbWriteStreamsBuffer);
    unsigned short* nbWriteStreamsBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nbWriteStreamsBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbWriteStreamsBufLens);
    for (int i = 0; i < nb; i++) {
      nbWriteStreamsBuffer[i] = objs[i]->nbWriteStreams();
      nbWriteStreamsBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (10, nbWriteStreamsBuffer, castor::db::DBTYPE_INT, sizeof(nbWriteStreamsBuffer[0]), nbWriteStreamsBufLens);
    // build the buffers for nbReadWriteStreams
    int* nbReadWriteStreamsBuffer = (int*) malloc(nb * sizeof(int));
    if (nbReadWriteStreamsBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbReadWriteStreamsBuffer);
    unsigned short* nbReadWriteStreamsBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nbReadWriteStreamsBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbReadWriteStreamsBufLens);
    for (int i = 0; i < nb; i++) {
      nbReadWriteStreamsBuffer[i] = objs[i]->nbReadWriteStreams();
      nbReadWriteStreamsBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (11, nbReadWriteStreamsBuffer, castor::db::DBTYPE_INT, sizeof(nbReadWriteStreamsBuffer[0]), nbReadWriteStreamsBufLens);
    // build the buffers for nbMigratorStreams
    int* nbMigratorStreamsBuffer = (int*) malloc(nb * sizeof(int));
    if (nbMigratorStreamsBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbMigratorStreamsBuffer);
    unsigned short* nbMigratorStreamsBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nbMigratorStreamsBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbMigratorStreamsBufLens);
    for (int i = 0; i < nb; i++) {
      nbMigratorStreamsBuffer[i] = objs[i]->nbMigratorStreams();
      nbMigratorStreamsBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (12, nbMigratorStreamsBuffer, castor::db::DBTYPE_INT, sizeof(nbMigratorStreamsBuffer[0]), nbMigratorStreamsBufLens);
    // build the buffers for nbRecallerStreams
    int* nbRecallerStreamsBuffer = (int*) malloc(nb * sizeof(int));
    if (nbRecallerStreamsBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbRecallerStreamsBuffer);
    unsigned short* nbRecallerStreamsBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nbRecallerStreamsBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nbRecallerStreamsBufLens);
    for (int i = 0; i < nb; i++) {
      nbRecallerStreamsBuffer[i] = objs[i]->nbRecallerStreams();
      nbRecallerStreamsBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (13, nbRecallerStreamsBuffer, castor::db::DBTYPE_INT, sizeof(nbRecallerStreamsBuffer[0]), nbRecallerStreamsBufLens);
    // build the buffers for diskPool
    double* diskPoolBuffer = (double*) malloc(nb * sizeof(double));
    if (diskPoolBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskPoolBuffer);
    unsigned short* diskPoolBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (diskPoolBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskPoolBufLens);
    for (int i = 0; i < nb; i++) {
      diskPoolBuffer[i] = (type == OBJ_DiskPool && objs[i]->diskPool() != 0) ? objs[i]->diskPool()->id() : 0;
      diskPoolBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (14, diskPoolBuffer, castor::db::DBTYPE_UINT64, sizeof(diskPoolBuffer[0]), diskPoolBufLens);
    // build the buffers for diskserver
    double* diskserverBuffer = (double*) malloc(nb * sizeof(double));
    if (diskserverBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskserverBuffer);
    unsigned short* diskserverBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (diskserverBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskserverBufLens);
    for (int i = 0; i < nb; i++) {
      diskserverBuffer[i] = (type == OBJ_DiskServer && objs[i]->diskserver() != 0) ? objs[i]->diskserver()->id() : 0;
      diskserverBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (15, diskserverBuffer, castor::db::DBTYPE_UINT64, sizeof(diskserverBuffer[0]), diskserverBufLens);
    // build the buffers for status
    int* statusBuffer = (int*) malloc(nb * sizeof(int));
    if (statusBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(statusBuffer);
    unsigned short* statusBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (statusBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(statusBufLens);
    for (int i = 0; i < nb; i++) {
      statusBuffer[i] = objs[i]->status();
      statusBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (16, statusBuffer, castor::db::DBTYPE_INT, sizeof(statusBuffer[0]), statusBufLens);
    // build the buffers for adminStatus
    int* adminStatusBuffer = (int*) malloc(nb * sizeof(int));
    if (adminStatusBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(adminStatusBuffer);
    unsigned short* adminStatusBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (adminStatusBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(adminStatusBufLens);
    for (int i = 0; i < nb; i++) {
      adminStatusBuffer[i] = objs[i]->adminStatus();
      adminStatusBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (17, adminStatusBuffer, castor::db::DBTYPE_INT, sizeof(adminStatusBuffer[0]), adminStatusBufLens);
    // build the buffers for returned ids
    double* idBuffer = (double*) calloc(nb, sizeof(double));
    if (idBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBuffer);
    unsigned short* idBufLens = (unsigned short*) calloc(nb, sizeof(unsigned short));
    if (idBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBufLens);
    m_insertStatement->setDataBuffer
      (18, idBuffer, castor::db::DBTYPE_UINT64, sizeof(double), idBufLens);
    m_insertStatement->execute(nb);
    for (int i = 0; i < nb; i++) {
      objects[i]->setId((u_signed64)idBuffer[i]);
    }
    // reuse idBuffer for bulk insertion into Id2Type
    m_storeTypeStatement->setDataBuffer
      (1, idBuffer, castor::db::DBTYPE_UINT64, sizeof(idBuffer[0]), idBufLens);
    // build the buffers for type
    int* typeBuffer = (int*) malloc(nb * sizeof(int));
    if (typeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBuffer);
    unsigned short* typeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (typeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBufLens);
    for (int i = 0; i < nb; i++) {
      typeBuffer[i] = objs[i]->type();
      typeBufLens[i] = sizeof(int);
    }
    m_storeTypeStatement->setDataBuffer
      (2, typeBuffer, castor::db::DBTYPE_INT, sizeof(typeBuffer[0]), typeBufLens);
    m_storeTypeStatement->execute(nb);
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkInsert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::updateRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::FileSystem* obj = 
    dynamic_cast<castor::stager::FileSystem*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setUInt64(1, obj->free());
    m_updateStatement->setString(2, obj->mountPoint());
    m_updateStatement->setFloat(3, obj->minFreeSpace());
    m_updateStatement->setFloat(4, obj->minAllowedFreeSpace());
    m_updateStatement->setFloat(5, obj->maxFreeSpace());
    m_updateStatement->setUInt64(6, obj->totalSize());
    m_updateStatement->setUInt64(7, obj->readRate());
    m_updateStatement->setUInt64(8, obj->writeRate());
    m_updateStatement->setInt(9, obj->nbReadStreams());
    m_updateStatement->setInt(10, obj->nbWriteStreams());
    m_updateStatement->setInt(11, obj->nbReadWriteStreams());
    m_updateStatement->setInt(12, obj->nbMigratorStreams());
    m_updateStatement->setInt(13, obj->nbRecallerStreams());
    m_updateStatement->setInt(14, (int)obj->status());
    m_updateStatement->setInt(15, (int)obj->adminStatus());
    m_updateStatement->setUInt64(16, obj->id());
    m_updateStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::deleteRep(castor::IAddress* address,
                                                 castor::IObject* object,
                                                 bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::FileSystem* obj = 
    dynamic_cast<castor::stager::FileSystem*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setUInt64(1, obj->id());
    m_deleteTypeStatement->execute();
    m_deleteStatement->setUInt64(1, obj->id());
    m_deleteStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_deleteStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbFileSystemCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::stager::FileSystem* object = new castor::stager::FileSystem();
    // Now retrieve and set members
    object->setFree(rset->getUInt64(1));
    object->setMountPoint(rset->getString(2));
    object->setMinFreeSpace(rset->getFloat(3));
    object->setMinAllowedFreeSpace(rset->getFloat(4));
    object->setMaxFreeSpace(rset->getFloat(5));
    object->setTotalSize(rset->getUInt64(6));
    object->setReadRate(rset->getUInt64(7));
    object->setWriteRate(rset->getUInt64(8));
    object->setNbReadStreams(rset->getInt(9));
    object->setNbWriteStreams(rset->getInt(10));
    object->setNbReadWriteStreams(rset->getInt(11));
    object->setNbMigratorStreams(rset->getInt(12));
    object->setNbRecallerStreams(rset->getInt(13));
    object->setId(rset->getUInt64(14));
    object->setStatus((enum castor::stager::FileSystemStatusCodes)rset->getInt(17));
    object->setAdminStatus((enum castor::monitoring::AdminStatusCodes)rset->getInt(18));
    delete rset;
    return object;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_selectStatementString << std::endl
                    << " and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateObj
//------------------------------------------------------------------------------
std::vector<castor::IObject*>
castor::db::cnv::DbFileSystemCnv::bulkCreateObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  // Prepare result
  std::vector<castor::IObject*> res;
  // check whether something needs to be done
  castor::VectorAddress* ad = 
    dynamic_cast<castor::VectorAddress*>(address);
  int nb = ad->target().size();
  if (0 == nb) return res;
  try {
    // Check whether the statement is ok
    if (0 == m_bulkSelectStatement) {
      m_bulkSelectStatement = createStatement(s_bulkSelectStatementString);
      m_bulkSelectStatement->registerOutParam(2, castor::db::DBTYPE_CURSOR);
    }
    // set the buffer for input ids
    m_bulkSelectStatement->setDataBufferUInt64Array(1, ad->target());
    // Execute statement
    m_bulkSelectStatement->execute();
    // get the result, that is a cursor on the selected rows
    castor::db::IDbResultSet *rset =
      m_bulkSelectStatement->getCursor(2);
    // loop and create the new objects
    bool status = rset->next();
    while (status) {
      // create the new Object
      castor::stager::FileSystem* object = new castor::stager::FileSystem();
      // Now retrieve and set members
      object->setFree(rset->getUInt64(1));
      object->setMountPoint(rset->getString(2));
      object->setMinFreeSpace(rset->getFloat(3));
      object->setMinAllowedFreeSpace(rset->getFloat(4));
      object->setMaxFreeSpace(rset->getFloat(5));
      object->setTotalSize(rset->getUInt64(6));
      object->setReadRate(rset->getUInt64(7));
      object->setWriteRate(rset->getUInt64(8));
      object->setNbReadStreams(rset->getInt(9));
      object->setNbWriteStreams(rset->getInt(10));
      object->setNbReadWriteStreams(rset->getInt(11));
      object->setNbMigratorStreams(rset->getInt(12));
      object->setNbRecallerStreams(rset->getInt(13));
      object->setId(rset->getUInt64(14));
      object->setStatus((enum castor::stager::FileSystemStatusCodes)rset->getInt(17));
      object->setAdminStatus((enum castor::monitoring::AdminStatusCodes)rset->getInt(18));
      // store object in results and loop;
      res.push_back(object);
      status = rset->next();
    }
    delete rset;
    return res;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkSelect request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbFileSystemCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::stager::FileSystem* object = 
      dynamic_cast<castor::stager::FileSystem*>(obj);
    object->setFree(rset->getUInt64(1));
    object->setMountPoint(rset->getString(2));
    object->setMinFreeSpace(rset->getFloat(3));
    object->setMinAllowedFreeSpace(rset->getFloat(4));
    object->setMaxFreeSpace(rset->getFloat(5));
    object->setTotalSize(rset->getUInt64(6));
    object->setReadRate(rset->getUInt64(7));
    object->setWriteRate(rset->getUInt64(8));
    object->setNbReadStreams(rset->getInt(9));
    object->setNbWriteStreams(rset->getInt(10));
    object->setNbReadWriteStreams(rset->getInt(11));
    object->setNbMigratorStreams(rset->getInt(12));
    object->setNbRecallerStreams(rset->getInt(13));
    object->setId(rset->getUInt64(14));
    object->setStatus((enum castor::stager::FileSystemStatusCodes)rset->getInt(17));
    object->setAdminStatus((enum castor::monitoring::AdminStatusCodes)rset->getInt(18));
    delete rset;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

