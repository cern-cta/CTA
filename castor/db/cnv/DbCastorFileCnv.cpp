/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbCastorFileCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbCastorFileCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/VectorAddress.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/exception/OutOfMemory.hpp"
#include "castor/stager/CastorFile.hpp"
#include "castor/stager/DiskCopy.hpp"
#include "castor/stager/FileClass.hpp"
#include "castor/stager/SvcClass.hpp"
#include "castor/stager/TapeCopy.hpp"
#include <algorithm>
#include <set>
#include <stdlib.h>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbCastorFileCnv>* s_factoryDbCastorFileCnv =
  new castor::CnvFactory<castor::db::cnv::DbCastorFileCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbCastorFileCnv::s_insertStatementString =
"INSERT INTO CastorFile (fileId, nsHost, fileSize, creationTime, lastAccessTime, lastKnownFileName, lastUpdateTime, id, svcClass, fileClass) VALUES (:1,:2,:3,:4,NULL,:5,:6,ids_seq.nextval,:7,:8) RETURNING id INTO :9";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbCastorFileCnv::s_deleteStatementString =
"DELETE FROM CastorFile WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbCastorFileCnv::s_selectStatementString =
"SELECT fileId, nsHost, fileSize, creationTime, lastAccessTime, lastKnownFileName, lastUpdateTime, id, svcClass, fileClass FROM CastorFile WHERE id = :1";

/// SQL statement for bulk request selection
const std::string castor::db::cnv::DbCastorFileCnv::s_bulkSelectStatementString =
"DECLARE \
   TYPE CurType IS REF CURSOR RETURN CastorFile%ROWTYPE; \
   PROCEDURE bulkSelect(ids IN castor.\"cnumList\", \
                        objs OUT CurType) AS \
   BEGIN \
     FORALL i IN ids.FIRST..ids.LAST \
       INSERT INTO bulkSelectHelper VALUES(ids(i)); \
     OPEN objs FOR SELECT fileId, nsHost, fileSize, creationTime, lastAccessTime, lastKnownFileName, lastUpdateTime, id, svcClass, fileClass \
                     FROM CastorFile t, bulkSelectHelper h \
                    WHERE t.id = h.objId; \
     DELETE FROM bulkSelectHelper; \
   END; \
 BEGIN \
   bulkSelect(:1, :2); \
 END;";

/// SQL statement for request update
const std::string castor::db::cnv::DbCastorFileCnv::s_updateStatementString =
"UPDATE CastorFile SET fileId = :1, nsHost = :2, fileSize = :3, lastKnownFileName = :4, lastUpdateTime = :5 WHERE id = :6";

/// SQL statement for type storage
const std::string castor::db::cnv::DbCastorFileCnv::s_storeTypeStatementString =
"INSERT /* CastorFile class */ INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::cnv::DbCastorFileCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member svcClass
const std::string castor::db::cnv::DbCastorFileCnv::s_checkSvcClassExistStatementString =
"SELECT id FROM SvcClass WHERE id = :1";

/// SQL update statement for member svcClass
const std::string castor::db::cnv::DbCastorFileCnv::s_updateSvcClassStatementString =
"UPDATE CastorFile SET svcClass = :1 WHERE id = :2";

/// SQL existence statement for member fileClass
const std::string castor::db::cnv::DbCastorFileCnv::s_checkFileClassExistStatementString =
"SELECT id FROM FileClass WHERE id = :1";

/// SQL update statement for member fileClass
const std::string castor::db::cnv::DbCastorFileCnv::s_updateFileClassStatementString =
"UPDATE CastorFile SET fileClass = :1 WHERE id = :2";

/// SQL select statement for member diskCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_selectDiskCopyStatementString =
"SELECT id FROM DiskCopy WHERE castorFile = :1 FOR UPDATE";

/// SQL delete statement for member diskCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_deleteDiskCopyStatementString =
"UPDATE DiskCopy SET castorFile = 0 WHERE id = :1";

/// SQL remote update statement for member diskCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_remoteUpdateDiskCopyStatementString =
"UPDATE DiskCopy SET castorFile = :1 WHERE id = :2";

/// SQL select statement for member tapeCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_selectTapeCopyStatementString =
"SELECT id FROM TapeCopy WHERE castorFile = :1 FOR UPDATE";

/// SQL delete statement for member tapeCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_deleteTapeCopyStatementString =
"UPDATE TapeCopy SET castorFile = 0 WHERE id = :1";

/// SQL remote update statement for member tapeCopies
const std::string castor::db::cnv::DbCastorFileCnv::s_remoteUpdateTapeCopyStatementString =
"UPDATE TapeCopy SET castorFile = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbCastorFileCnv::DbCastorFileCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_bulkSelectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkSvcClassExistStatement(0),
  m_updateSvcClassStatement(0),
  m_checkFileClassExistStatement(0),
  m_updateFileClassStatement(0),
  m_selectDiskCopyStatement(0),
  m_deleteDiskCopyStatement(0),
  m_remoteUpdateDiskCopyStatement(0),
  m_selectTapeCopyStatement(0),
  m_deleteTapeCopyStatement(0),
  m_remoteUpdateTapeCopyStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbCastorFileCnv::~DbCastorFileCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    if(m_insertStatement) delete m_insertStatement;
    if(m_deleteStatement) delete m_deleteStatement;
    if(m_selectStatement) delete m_selectStatement;
    if(m_bulkSelectStatement) delete m_bulkSelectStatement;
    if(m_updateStatement) delete m_updateStatement;
    if(m_storeTypeStatement) delete m_storeTypeStatement;
    if(m_deleteTypeStatement) delete m_deleteTypeStatement;
    if(m_checkSvcClassExistStatement) delete m_checkSvcClassExistStatement;
    if(m_updateSvcClassStatement) delete m_updateSvcClassStatement;
    if(m_checkFileClassExistStatement) delete m_checkFileClassExistStatement;
    if(m_updateFileClassStatement) delete m_updateFileClassStatement;
    if(m_deleteDiskCopyStatement) delete m_deleteDiskCopyStatement;
    if(m_selectDiskCopyStatement) delete m_selectDiskCopyStatement;
    if(m_remoteUpdateDiskCopyStatement) delete m_remoteUpdateDiskCopyStatement;
    if(m_deleteTapeCopyStatement) delete m_deleteTapeCopyStatement;
    if(m_selectTapeCopyStatement) delete m_selectTapeCopyStatement;
    if(m_remoteUpdateTapeCopyStatement) delete m_remoteUpdateTapeCopyStatement;
  } catch (castor::exception::Exception ignored) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_bulkSelectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkSvcClassExistStatement = 0;
  m_updateSvcClassStatement = 0;
  m_checkFileClassExistStatement = 0;
  m_updateFileClassStatement = 0;
  m_selectDiskCopyStatement = 0;
  m_deleteDiskCopyStatement = 0;
  m_remoteUpdateDiskCopyStatement = 0;
  m_selectTapeCopyStatement = 0;
  m_deleteTapeCopyStatement = 0;
  m_remoteUpdateTapeCopyStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
unsigned int castor::db::cnv::DbCastorFileCnv::ObjType() {
  return castor::stager::CastorFile::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
unsigned int castor::db::cnv::DbCastorFileCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillRep(castor::IAddress*,
                                               castor::IObject* object,
                                               unsigned int type,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::CastorFile* obj = 
    dynamic_cast<castor::stager::CastorFile*>(object);
  try {
    switch (type) {
    case castor::OBJ_SvcClass :
      fillRepSvcClass(obj);
      break;
    case castor::OBJ_FileClass :
      fillRepFileClass(obj);
      break;
    case castor::OBJ_DiskCopy :
      fillRepDiskCopy(obj);
      break;
    case castor::OBJ_TapeCopy :
      fillRepTapeCopy(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepSvcClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillRepSvcClass(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->svcClass()) {
    // Check checkSvcClassExist statement
    if (0 == m_checkSvcClassExistStatement) {
      m_checkSvcClassExistStatement = createStatement(s_checkSvcClassExistStatementString);
    }
    // retrieve the object from the database
    m_checkSvcClassExistStatement->setUInt64(1, obj->svcClass()->id());
    castor::db::IDbResultSet *rset = m_checkSvcClassExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->svcClass(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateSvcClassStatement) {
    m_updateSvcClassStatement = createStatement(s_updateSvcClassStatementString);
  }
  // Update local object
  m_updateSvcClassStatement->setUInt64(1, 0 == obj->svcClass() ? 0 : obj->svcClass()->id());
  m_updateSvcClassStatement->setUInt64(2, obj->id());
  m_updateSvcClassStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepFileClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillRepFileClass(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->fileClass()) {
    // Check checkFileClassExist statement
    if (0 == m_checkFileClassExistStatement) {
      m_checkFileClassExistStatement = createStatement(s_checkFileClassExistStatementString);
    }
    // retrieve the object from the database
    m_checkFileClassExistStatement->setUInt64(1, obj->fileClass()->id());
    castor::db::IDbResultSet *rset = m_checkFileClassExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->fileClass(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateFileClassStatement) {
    m_updateFileClassStatement = createStatement(s_updateFileClassStatementString);
  }
  // Update local object
  m_updateFileClassStatement->setUInt64(1, 0 == obj->fileClass() ? 0 : obj->fileClass()->id());
  m_updateFileClassStatement->setUInt64(2, obj->id());
  m_updateFileClassStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillRepDiskCopy(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // check select statement
  if (0 == m_selectDiskCopyStatement) {
    m_selectDiskCopyStatement = createStatement(s_selectDiskCopyStatementString);
  }
  // Get current database data
  std::set<u_signed64> diskCopiesList;
  m_selectDiskCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskCopyStatement->executeQuery();
  while (rset->next()) {
    diskCopiesList.insert(rset->getUInt64(1));
  }
  delete rset;
  // update diskCopies and create new ones
  std::vector<castor::IObject*> toBeCreated;
  for (std::vector<castor::stager::DiskCopy*>::iterator it = obj->diskCopies().begin();
       it != obj->diskCopies().end();
       it++) {
    if (0 == (*it)->id()) {
      toBeCreated.push_back(*it);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateDiskCopyStatement) {
        m_remoteUpdateDiskCopyStatement = createStatement(s_remoteUpdateDiskCopyStatementString);
      }
      // Update remote object
      m_remoteUpdateDiskCopyStatement->setUInt64(1, obj->id());
      m_remoteUpdateDiskCopyStatement->setUInt64(2, (*it)->id());
      m_remoteUpdateDiskCopyStatement->execute();
      std::set<u_signed64>::iterator item;
      if ((item = diskCopiesList.find((*it)->id())) != diskCopiesList.end()) {
        diskCopiesList.erase(item);
      }
    }
  }
  // create new objects
  cnvSvc()->bulkCreateRep(0, toBeCreated, false, OBJ_CastorFile);
  // Delete old links
  for (std::set<u_signed64>::iterator it = diskCopiesList.begin();
       it != diskCopiesList.end();
       it++) {
    if (0 == m_deleteDiskCopyStatement) {
      m_deleteDiskCopyStatement = createStatement(s_deleteDiskCopyStatementString);
    }
    m_deleteDiskCopyStatement->setUInt64(1, *it);
    m_deleteDiskCopyStatement->execute();
  }
}

//------------------------------------------------------------------------------
// fillRepTapeCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillRepTapeCopy(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // check select statement
  if (0 == m_selectTapeCopyStatement) {
    m_selectTapeCopyStatement = createStatement(s_selectTapeCopyStatementString);
  }
  // Get current database data
  std::set<u_signed64> tapeCopiesList;
  m_selectTapeCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectTapeCopyStatement->executeQuery();
  while (rset->next()) {
    tapeCopiesList.insert(rset->getUInt64(1));
  }
  delete rset;
  // update tapeCopies and create new ones
  std::vector<castor::IObject*> toBeCreated;
  for (std::vector<castor::stager::TapeCopy*>::iterator it = obj->tapeCopies().begin();
       it != obj->tapeCopies().end();
       it++) {
    if (0 == (*it)->id()) {
      toBeCreated.push_back(*it);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateTapeCopyStatement) {
        m_remoteUpdateTapeCopyStatement = createStatement(s_remoteUpdateTapeCopyStatementString);
      }
      // Update remote object
      m_remoteUpdateTapeCopyStatement->setUInt64(1, obj->id());
      m_remoteUpdateTapeCopyStatement->setUInt64(2, (*it)->id());
      m_remoteUpdateTapeCopyStatement->execute();
      std::set<u_signed64>::iterator item;
      if ((item = tapeCopiesList.find((*it)->id())) != tapeCopiesList.end()) {
        tapeCopiesList.erase(item);
      }
    }
  }
  // create new objects
  cnvSvc()->bulkCreateRep(0, toBeCreated, false, OBJ_CastorFile);
  // Delete old links
  for (std::set<u_signed64>::iterator it = tapeCopiesList.begin();
       it != tapeCopiesList.end();
       it++) {
    if (0 == m_deleteTapeCopyStatement) {
      m_deleteTapeCopyStatement = createStatement(s_deleteTapeCopyStatementString);
    }
    m_deleteTapeCopyStatement->setUInt64(1, *it);
    m_deleteTapeCopyStatement->execute();
  }
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillObj(castor::IAddress*,
                                               castor::IObject* object,
                                               unsigned int type,
                                               bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::CastorFile* obj = 
    dynamic_cast<castor::stager::CastorFile*>(object);
  switch (type) {
  case castor::OBJ_SvcClass :
    fillObjSvcClass(obj);
    break;
  case castor::OBJ_FileClass :
    fillObjFileClass(obj);
    break;
  case castor::OBJ_DiskCopy :
    fillObjDiskCopy(obj);
    break;
  case castor::OBJ_TapeCopy :
    fillObjTapeCopy(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (endTransaction) {
    cnvSvc()->commit();
  }
}

//------------------------------------------------------------------------------
// fillObjSvcClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillObjSvcClass(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 svcClassId = rset->getInt64(9);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->svcClass() &&
      (0 == svcClassId ||
       obj->svcClass()->id() != svcClassId)) {
    obj->setSvcClass(0);
  }
  // Update object or create new one
  if (0 != svcClassId) {
    if (0 == obj->svcClass()) {
      obj->setSvcClass
        (dynamic_cast<castor::stager::SvcClass*>
         (cnvSvc()->getObjFromId(svcClassId)));
    } else {
      cnvSvc()->updateObj(obj->svcClass());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjFileClass
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillObjFileClass(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 fileClassId = rset->getInt64(10);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->fileClass() &&
      (0 == fileClassId ||
       obj->fileClass()->id() != fileClassId)) {
    obj->setFileClass(0);
  }
  // Update object or create new one
  if (0 != fileClassId) {
    if (0 == obj->fileClass()) {
      obj->setFileClass
        (dynamic_cast<castor::stager::FileClass*>
         (cnvSvc()->getObjFromId(fileClassId)));
    } else {
      cnvSvc()->updateObj(obj->fileClass());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillObjDiskCopy(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectDiskCopyStatement) {
    m_selectDiskCopyStatement = createStatement(s_selectDiskCopyStatementString);
  }
  // retrieve the object from the database
  std::vector<u_signed64> diskCopiesList;
  m_selectDiskCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectDiskCopyStatement->executeQuery();
  while (rset->next()) {
    diskCopiesList.push_back(rset->getUInt64(1));
  }
  // Close ResultSet
  delete rset;
  // Update objects and mark old ones for deletion
  std::vector<castor::stager::DiskCopy*> toBeDeleted;
  for (std::vector<castor::stager::DiskCopy*>::iterator it = obj->diskCopies().begin();
       it != obj->diskCopies().end();
       it++) {
    std::vector<u_signed64>::iterator item =
      std::find(diskCopiesList.begin(), diskCopiesList.end(), (*it)->id());
    if (item == diskCopiesList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      diskCopiesList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::stager::DiskCopy*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeDiskCopies(*it);
    (*it)->setCastorFile(0);
  }
  // Create new objects
  std::vector<castor::IObject*> newDiskCopies =
    cnvSvc()->getObjsFromIds(diskCopiesList, OBJ_DiskCopy);
  for (std::vector<castor::IObject*>::iterator it = newDiskCopies.begin();
       it != newDiskCopies.end();
       it++) {
    castor::stager::DiskCopy* remoteObj = 
      dynamic_cast<castor::stager::DiskCopy*>(*it);
    obj->addDiskCopies(remoteObj);
    remoteObj->setCastorFile(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjTapeCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::fillObjTapeCopy(castor::stager::CastorFile* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectTapeCopyStatement) {
    m_selectTapeCopyStatement = createStatement(s_selectTapeCopyStatementString);
  }
  // retrieve the object from the database
  std::vector<u_signed64> tapeCopiesList;
  m_selectTapeCopyStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectTapeCopyStatement->executeQuery();
  while (rset->next()) {
    tapeCopiesList.push_back(rset->getUInt64(1));
  }
  // Close ResultSet
  delete rset;
  // Update objects and mark old ones for deletion
  std::vector<castor::stager::TapeCopy*> toBeDeleted;
  for (std::vector<castor::stager::TapeCopy*>::iterator it = obj->tapeCopies().begin();
       it != obj->tapeCopies().end();
       it++) {
    std::vector<u_signed64>::iterator item =
      std::find(tapeCopiesList.begin(), tapeCopiesList.end(), (*it)->id());
    if (item == tapeCopiesList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      tapeCopiesList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::stager::TapeCopy*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeTapeCopies(*it);
    (*it)->setCastorFile(0);
  }
  // Create new objects
  std::vector<castor::IObject*> newTapeCopies =
    cnvSvc()->getObjsFromIds(tapeCopiesList, OBJ_TapeCopy);
  for (std::vector<castor::IObject*>::iterator it = newTapeCopies.begin();
       it != newTapeCopies.end();
       it++) {
    castor::stager::TapeCopy* remoteObj = 
      dynamic_cast<castor::stager::TapeCopy*>(*it);
    obj->addTapeCopies(remoteObj);
    remoteObj->setCastorFile(obj);
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::createRep(castor::IAddress*,
                                                 castor::IObject* object,
                                                 bool endTransaction,
                                                 unsigned int type)
  throw (castor::exception::Exception) {
  castor::stager::CastorFile* obj = 
    dynamic_cast<castor::stager::CastorFile*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(9, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setUInt64(1, obj->fileId());
    m_insertStatement->setString(2, obj->nsHost());
    m_insertStatement->setUInt64(3, obj->fileSize());
    m_insertStatement->setInt(4, time(0));
    m_insertStatement->setString(5, obj->lastKnownFileName());
    m_insertStatement->setUInt64(6, obj->lastUpdateTime());
    m_insertStatement->setUInt64(7, (type == OBJ_SvcClass && obj->svcClass() != 0) ? obj->svcClass()->id() : 0);
    m_insertStatement->setUInt64(8, (type == OBJ_FileClass && obj->fileClass() != 0) ? obj->fileClass()->id() : 0);
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getUInt64(9));
    m_storeTypeStatement->setUInt64(1, obj->id());
    m_storeTypeStatement->setUInt64(2, obj->type());
    m_storeTypeStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_insertStatementString << std::endl
                    << " and parameters' values were :" << std::endl
                    << "  fileId : " << obj->fileId() << std::endl
                    << "  nsHost : " << obj->nsHost() << std::endl
                    << "  fileSize : " << obj->fileSize() << std::endl
                    << "  creationTime : " << obj->creationTime() << std::endl
                    << "  lastAccessTime : " << obj->lastAccessTime() << std::endl
                    << "  lastKnownFileName : " << obj->lastKnownFileName() << std::endl
                    << "  lastUpdateTime : " << obj->lastUpdateTime() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  svcClass : " << (obj->svcClass() ? obj->svcClass()->id() : 0) << std::endl
                    << "  fileClass : " << (obj->fileClass() ? obj->fileClass()->id() : 0) << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::bulkCreateRep(castor::IAddress*,
                                                     std::vector<castor::IObject*> &objects,
                                                     bool endTransaction,
                                                     unsigned int type)
  throw (castor::exception::Exception) {
  // check whether something needs to be done
  int nb = objects.size();
  if (0 == nb) return;
  // Casts all objects
  std::vector<castor::stager::CastorFile*> objs;
  for (int i = 0; i < nb; i++) {
    objs.push_back(dynamic_cast<castor::stager::CastorFile*>(objects[i]));
  }
  std::vector<void *> allocMem;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(9, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // build the buffers for fileId
    double* fileIdBuffer = (double*) malloc(nb * sizeof(double));
    if (fileIdBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileIdBuffer);
    unsigned short* fileIdBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (fileIdBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileIdBufLens);
    for (int i = 0; i < nb; i++) {
      fileIdBuffer[i] = objs[i]->fileId();
      fileIdBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (1, fileIdBuffer, castor::db::DBTYPE_UINT64, sizeof(fileIdBuffer[0]), fileIdBufLens);
    // build the buffers for nsHost
    unsigned int nsHostMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->nsHost().length()+1 > nsHostMaxLen)
        nsHostMaxLen = objs[i]->nsHost().length()+1;
    }
    char* nsHostBuffer = (char*) calloc(nb, nsHostMaxLen);
    if (nsHostBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nsHostBuffer);
    unsigned short* nsHostBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (nsHostBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(nsHostBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(nsHostBuffer+(i*nsHostMaxLen), objs[i]->nsHost().c_str(), nsHostMaxLen);
      nsHostBufLens[i] = objs[i]->nsHost().length()+1; // + 1 for the trailing \0
    }
    m_insertStatement->setDataBuffer
      (2, nsHostBuffer, castor::db::DBTYPE_STRING, nsHostMaxLen, nsHostBufLens);
    // build the buffers for fileSize
    double* fileSizeBuffer = (double*) malloc(nb * sizeof(double));
    if (fileSizeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileSizeBuffer);
    unsigned short* fileSizeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (fileSizeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileSizeBufLens);
    for (int i = 0; i < nb; i++) {
      fileSizeBuffer[i] = objs[i]->fileSize();
      fileSizeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (3, fileSizeBuffer, castor::db::DBTYPE_UINT64, sizeof(fileSizeBuffer[0]), fileSizeBufLens);
    // build the buffers for creationTime
    double* creationTimeBuffer = (double*) malloc(nb * sizeof(double));
    if (creationTimeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(creationTimeBuffer);
    unsigned short* creationTimeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (creationTimeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(creationTimeBufLens);
    for (int i = 0; i < nb; i++) {
      creationTimeBuffer[i] = time(0);
      creationTimeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (4, creationTimeBuffer, castor::db::DBTYPE_UINT64, sizeof(creationTimeBuffer[0]), creationTimeBufLens);
    // build the buffers for lastKnownFileName
    unsigned int lastKnownFileNameMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->lastKnownFileName().length()+1 > lastKnownFileNameMaxLen)
        lastKnownFileNameMaxLen = objs[i]->lastKnownFileName().length()+1;
    }
    char* lastKnownFileNameBuffer = (char*) calloc(nb, lastKnownFileNameMaxLen);
    if (lastKnownFileNameBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastKnownFileNameBuffer);
    unsigned short* lastKnownFileNameBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (lastKnownFileNameBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastKnownFileNameBufLens);
    for (int i = 0; i < nb; i++) {
      strncpy(lastKnownFileNameBuffer+(i*lastKnownFileNameMaxLen), objs[i]->lastKnownFileName().c_str(), lastKnownFileNameMaxLen);
      lastKnownFileNameBufLens[i] = objs[i]->lastKnownFileName().length()+1; // + 1 for the trailing \0
    }
    m_insertStatement->setDataBuffer
      (5, lastKnownFileNameBuffer, castor::db::DBTYPE_STRING, lastKnownFileNameMaxLen, lastKnownFileNameBufLens);
    // build the buffers for lastUpdateTime
    double* lastUpdateTimeBuffer = (double*) malloc(nb * sizeof(double));
    if (lastUpdateTimeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastUpdateTimeBuffer);
    unsigned short* lastUpdateTimeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (lastUpdateTimeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(lastUpdateTimeBufLens);
    for (int i = 0; i < nb; i++) {
      lastUpdateTimeBuffer[i] = objs[i]->lastUpdateTime();
      lastUpdateTimeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (6, lastUpdateTimeBuffer, castor::db::DBTYPE_UINT64, sizeof(lastUpdateTimeBuffer[0]), lastUpdateTimeBufLens);
    // build the buffers for svcClass
    double* svcClassBuffer = (double*) malloc(nb * sizeof(double));
    if (svcClassBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(svcClassBuffer);
    unsigned short* svcClassBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (svcClassBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(svcClassBufLens);
    for (int i = 0; i < nb; i++) {
      svcClassBuffer[i] = (type == OBJ_SvcClass && objs[i]->svcClass() != 0) ? objs[i]->svcClass()->id() : 0;
      svcClassBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (7, svcClassBuffer, castor::db::DBTYPE_UINT64, sizeof(svcClassBuffer[0]), svcClassBufLens);
    // build the buffers for fileClass
    double* fileClassBuffer = (double*) malloc(nb * sizeof(double));
    if (fileClassBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileClassBuffer);
    unsigned short* fileClassBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (fileClassBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fileClassBufLens);
    for (int i = 0; i < nb; i++) {
      fileClassBuffer[i] = (type == OBJ_FileClass && objs[i]->fileClass() != 0) ? objs[i]->fileClass()->id() : 0;
      fileClassBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (8, fileClassBuffer, castor::db::DBTYPE_UINT64, sizeof(fileClassBuffer[0]), fileClassBufLens);
    // build the buffers for returned ids
    double* idBuffer = (double*) calloc(nb, sizeof(double));
    if (idBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBuffer);
    unsigned short* idBufLens = (unsigned short*) calloc(nb, sizeof(unsigned short));
    if (idBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBufLens);
    m_insertStatement->setDataBuffer
      (9, idBuffer, castor::db::DBTYPE_UINT64, sizeof(double), idBufLens);
    m_insertStatement->execute(nb);
    for (int i = 0; i < nb; i++) {
      objects[i]->setId((u_signed64)idBuffer[i]);
    }
    // reuse idBuffer for bulk insertion into Id2Type
    m_storeTypeStatement->setDataBuffer
      (1, idBuffer, castor::db::DBTYPE_UINT64, sizeof(idBuffer[0]), idBufLens);
    // build the buffers for type
    int* typeBuffer = (int*) malloc(nb * sizeof(int));
    if (typeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBuffer);
    unsigned short* typeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (typeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBufLens);
    for (int i = 0; i < nb; i++) {
      typeBuffer[i] = objs[i]->type();
      typeBufLens[i] = sizeof(int);
    }
    m_storeTypeStatement->setDataBuffer
      (2, typeBuffer, castor::db::DBTYPE_INT, sizeof(typeBuffer[0]), typeBufLens);
    m_storeTypeStatement->execute(nb);
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkInsert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::updateRep(castor::IAddress*,
                                                 castor::IObject* object,
                                                 bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::CastorFile* obj = 
    dynamic_cast<castor::stager::CastorFile*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setUInt64(1, obj->fileId());
    m_updateStatement->setString(2, obj->nsHost());
    m_updateStatement->setUInt64(3, obj->fileSize());
    m_updateStatement->setString(4, obj->lastKnownFileName());
    m_updateStatement->setUInt64(5, obj->lastUpdateTime());
    m_updateStatement->setUInt64(6, obj->id());
    m_updateStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::deleteRep(castor::IAddress*,
                                                 castor::IObject* object,
                                                 bool endTransaction)
  throw (castor::exception::Exception) {
  castor::stager::CastorFile* obj = 
    dynamic_cast<castor::stager::CastorFile*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setUInt64(1, obj->id());
    m_deleteTypeStatement->execute();
    m_deleteStatement->setUInt64(1, obj->id());
    m_deleteStatement->execute();
    for (std::vector<castor::stager::TapeCopy*>::iterator it = obj->tapeCopies().begin();
         it != obj->tapeCopies().end();
         it++) {
      cnvSvc()->deleteRep(0, *it, false);
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_deleteStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbCastorFileCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::stager::CastorFile* object = new castor::stager::CastorFile();
    // Now retrieve and set members
    object->setFileId(rset->getUInt64(1));
    object->setNsHost(rset->getString(2));
    object->setFileSize(rset->getUInt64(3));
    object->setCreationTime(rset->getUInt64(4));
    object->setLastAccessTime(rset->getUInt64(5));
    object->setLastKnownFileName(rset->getString(6));
    object->setLastUpdateTime(rset->getUInt64(7));
    object->setId(rset->getUInt64(8));
    delete rset;
    return object;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_selectStatementString << std::endl
                    << " and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateObj
//------------------------------------------------------------------------------
std::vector<castor::IObject*>
castor::db::cnv::DbCastorFileCnv::bulkCreateObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  // Prepare result
  std::vector<castor::IObject*> res;
  // check whether something needs to be done
  castor::VectorAddress* ad = 
    dynamic_cast<castor::VectorAddress*>(address);
  int nb = ad->target().size();
  if (0 == nb) return res;
  try {
    // Check whether the statement is ok
    if (0 == m_bulkSelectStatement) {
      m_bulkSelectStatement = createStatement(s_bulkSelectStatementString);
      m_bulkSelectStatement->registerOutParam(2, castor::db::DBTYPE_CURSOR);
    }
    // set the buffer for input ids
    m_bulkSelectStatement->setDataBufferUInt64Array(1, ad->target());
    // Execute statement
    m_bulkSelectStatement->execute();
    // get the result, that is a cursor on the selected rows
    castor::db::IDbResultSet *rset =
      m_bulkSelectStatement->getCursor(2);
    // loop and create the new objects
    bool status = rset->next();
    while (status) {
      // create the new Object
      castor::stager::CastorFile* object = new castor::stager::CastorFile();
      // Now retrieve and set members
      object->setFileId(rset->getUInt64(1));
      object->setNsHost(rset->getString(2));
      object->setFileSize(rset->getUInt64(3));
      object->setCreationTime(rset->getUInt64(4));
      object->setLastAccessTime(rset->getUInt64(5));
      object->setLastKnownFileName(rset->getString(6));
      object->setLastUpdateTime(rset->getUInt64(7));
      object->setId(rset->getUInt64(8));
      // store object in results and loop;
      res.push_back(object);
      status = rset->next();
    }
    delete rset;
    return res;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkSelect request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbCastorFileCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::stager::CastorFile* object = 
      dynamic_cast<castor::stager::CastorFile*>(obj);
    object->setFileId(rset->getUInt64(1));
    object->setNsHost(rset->getString(2));
    object->setFileSize(rset->getUInt64(3));
    object->setCreationTime(rset->getUInt64(4));
    object->setLastAccessTime(rset->getUInt64(5));
    object->setLastKnownFileName(rset->getString(6));
    object->setLastUpdateTime(rset->getUInt64(7));
    object->setId(rset->getUInt64(8));
    delete rset;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

