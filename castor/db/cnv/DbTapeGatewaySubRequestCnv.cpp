/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbTapeGatewaySubRequestCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbTapeGatewaySubRequestCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/VectorAddress.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/exception/OutOfMemory.hpp"
#include "castor/stager/DiskCopy.hpp"
#include "castor/stager/TapeCopy.hpp"
#include "castor/tape/tapegateway/TapeGatewayRequest.hpp"
#include "castor/tape/tapegateway/TapeGatewaySubRequest.hpp"
#include <stdlib.h>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbTapeGatewaySubRequestCnv>* s_factoryDbTapeGatewaySubRequestCnv =
  new castor::CnvFactory<castor::db::cnv::DbTapeGatewaySubRequestCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_insertStatementString =
"INSERT INTO TapeGatewaySubRequest (fseq, id, tapecopy, request, diskcopy) VALUES (:1,ids_seq.nextval,:2,:3,:4) RETURNING id INTO :5";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_deleteStatementString =
"DELETE FROM TapeGatewaySubRequest WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_selectStatementString =
"SELECT fseq, id, tapecopy, request, diskcopy FROM TapeGatewaySubRequest WHERE id = :1";

/// SQL statement for bulk request selection
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_bulkSelectStatementString =
"DECLARE \
   TYPE CurType IS REF CURSOR RETURN TapeGatewaySubRequest%ROWTYPE; \
   PROCEDURE bulkSelect(ids IN castor.\"cnumList\", \
                        objs OUT CurType) AS \
   BEGIN \
     FORALL i IN ids.FIRST..ids.LAST \
       INSERT INTO bulkSelectHelper VALUES(ids(i)); \
     OPEN objs FOR SELECT fseq, id, tapecopy, request, diskcopy \
                     FROM TapeGatewaySubRequest t, bulkSelectHelper h \
                    WHERE t.id = h.objId; \
     DELETE FROM bulkSelectHelper; \
   END; \
 BEGIN \
   bulkSelect(:1, :2); \
 END;";

/// SQL statement for request update
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_updateStatementString =
"UPDATE TapeGatewaySubRequest SET fseq = :1 WHERE id = :2";

/// SQL statement for type storage
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_storeTypeStatementString =
"INSERT /* TapeGatewaySubRequest class */ INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member tapecopy
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_checkTapeCopyExistStatementString =
"SELECT id FROM TapeCopy WHERE id = :1";

/// SQL update statement for member tapecopy
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_updateTapeCopyStatementString =
"UPDATE TapeGatewaySubRequest SET tapecopy = :1 WHERE id = :2";

/// SQL existence statement for member request
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_checkTapeGatewayRequestExistStatementString =
"SELECT id FROM TapeGatewayRequest WHERE id = :1";

/// SQL update statement for member request
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_updateTapeGatewayRequestStatementString =
"UPDATE TapeGatewaySubRequest SET request = :1 WHERE id = :2";

/// SQL existence statement for member diskcopy
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_checkDiskCopyExistStatementString =
"SELECT id FROM DiskCopy WHERE id = :1";

/// SQL update statement for member diskcopy
const std::string castor::db::cnv::DbTapeGatewaySubRequestCnv::s_updateDiskCopyStatementString =
"UPDATE TapeGatewaySubRequest SET diskcopy = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbTapeGatewaySubRequestCnv::DbTapeGatewaySubRequestCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_bulkSelectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkTapeCopyExistStatement(0),
  m_updateTapeCopyStatement(0),
  m_checkTapeGatewayRequestExistStatement(0),
  m_updateTapeGatewayRequestStatement(0),
  m_checkDiskCopyExistStatement(0),
  m_updateDiskCopyStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbTapeGatewaySubRequestCnv::~DbTapeGatewaySubRequestCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    if(m_insertStatement) delete m_insertStatement;
    if(m_deleteStatement) delete m_deleteStatement;
    if(m_selectStatement) delete m_selectStatement;
    if(m_bulkSelectStatement) delete m_bulkSelectStatement;
    if(m_updateStatement) delete m_updateStatement;
    if(m_storeTypeStatement) delete m_storeTypeStatement;
    if(m_deleteTypeStatement) delete m_deleteTypeStatement;
    if(m_checkTapeCopyExistStatement) delete m_checkTapeCopyExistStatement;
    if(m_updateTapeCopyStatement) delete m_updateTapeCopyStatement;
    if(m_checkTapeGatewayRequestExistStatement) delete m_checkTapeGatewayRequestExistStatement;
    if(m_updateTapeGatewayRequestStatement) delete m_updateTapeGatewayRequestStatement;
    if(m_checkDiskCopyExistStatement) delete m_checkDiskCopyExistStatement;
    if(m_updateDiskCopyStatement) delete m_updateDiskCopyStatement;
  } catch (castor::exception::Exception ignored) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_bulkSelectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkTapeCopyExistStatement = 0;
  m_updateTapeCopyStatement = 0;
  m_checkTapeGatewayRequestExistStatement = 0;
  m_updateTapeGatewayRequestStatement = 0;
  m_checkDiskCopyExistStatement = 0;
  m_updateDiskCopyStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbTapeGatewaySubRequestCnv::ObjType() {
  return castor::tape::tapegateway::TapeGatewaySubRequest::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbTapeGatewaySubRequestCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillRep(castor::IAddress* address,
                                                          castor::IObject* object,
                                                          unsigned int type,
                                                          bool endTransaction)
  throw (castor::exception::Exception) {
  castor::tape::tapegateway::TapeGatewaySubRequest* obj = 
    dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(object);
  try {
    switch (type) {
    case castor::OBJ_TapeCopy :
      fillRepTapeCopy(obj);
      break;
    case castor::OBJ_TapeGatewayRequest :
      fillRepTapeGatewayRequest(obj);
      break;
    case castor::OBJ_DiskCopy :
      fillRepDiskCopy(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepTapeCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillRepTapeCopy(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->tapecopy()) {
    // Check checkTapeCopyExist statement
    if (0 == m_checkTapeCopyExistStatement) {
      m_checkTapeCopyExistStatement = createStatement(s_checkTapeCopyExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeCopyExistStatement->setUInt64(1, obj->tapecopy()->id());
    castor::db::IDbResultSet *rset = m_checkTapeCopyExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->tapecopy(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeCopyStatement) {
    m_updateTapeCopyStatement = createStatement(s_updateTapeCopyStatementString);
  }
  // Update local object
  m_updateTapeCopyStatement->setUInt64(1, 0 == obj->tapecopy() ? 0 : obj->tapecopy()->id());
  m_updateTapeCopyStatement->setUInt64(2, obj->id());
  m_updateTapeCopyStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepTapeGatewayRequest
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillRepTapeGatewayRequest(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->request()) {
    // Check checkTapeGatewayRequestExist statement
    if (0 == m_checkTapeGatewayRequestExistStatement) {
      m_checkTapeGatewayRequestExistStatement = createStatement(s_checkTapeGatewayRequestExistStatementString);
    }
    // retrieve the object from the database
    m_checkTapeGatewayRequestExistStatement->setUInt64(1, obj->request()->id());
    castor::db::IDbResultSet *rset = m_checkTapeGatewayRequestExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->request(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateTapeGatewayRequestStatement) {
    m_updateTapeGatewayRequestStatement = createStatement(s_updateTapeGatewayRequestStatementString);
  }
  // Update local object
  m_updateTapeGatewayRequestStatement->setUInt64(1, 0 == obj->request() ? 0 : obj->request()->id());
  m_updateTapeGatewayRequestStatement->setUInt64(2, obj->id());
  m_updateTapeGatewayRequestStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillRepDiskCopy(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->diskcopy()) {
    // Check checkDiskCopyExist statement
    if (0 == m_checkDiskCopyExistStatement) {
      m_checkDiskCopyExistStatement = createStatement(s_checkDiskCopyExistStatementString);
    }
    // retrieve the object from the database
    m_checkDiskCopyExistStatement->setUInt64(1, obj->diskcopy()->id());
    castor::db::IDbResultSet *rset = m_checkDiskCopyExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->diskcopy(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateDiskCopyStatement) {
    m_updateDiskCopyStatement = createStatement(s_updateDiskCopyStatementString);
  }
  // Update local object
  m_updateDiskCopyStatement->setUInt64(1, 0 == obj->diskcopy() ? 0 : obj->diskcopy()->id());
  m_updateDiskCopyStatement->setUInt64(2, obj->id());
  m_updateDiskCopyStatement->execute();
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillObj(castor::IAddress* address,
                                                          castor::IObject* object,
                                                          unsigned int type,
                                                          bool endTransaction)
  throw (castor::exception::Exception) {
  castor::tape::tapegateway::TapeGatewaySubRequest* obj = 
    dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(object);
  switch (type) {
  case castor::OBJ_TapeCopy :
    fillObjTapeCopy(obj);
    break;
  case castor::OBJ_TapeGatewayRequest :
    fillObjTapeGatewayRequest(obj);
    break;
  case castor::OBJ_DiskCopy :
    fillObjDiskCopy(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (endTransaction) {
    cnvSvc()->commit();
  }
}

//------------------------------------------------------------------------------
// fillObjTapeCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillObjTapeCopy(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 tapecopyId = rset->getInt64(3);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->tapecopy() &&
      (0 == tapecopyId ||
       obj->tapecopy()->id() != tapecopyId)) {
    obj->setTapecopy(0);
  }
  // Update object or create new one
  if (0 != tapecopyId) {
    if (0 == obj->tapecopy()) {
      obj->setTapecopy
        (dynamic_cast<castor::stager::TapeCopy*>
         (cnvSvc()->getObjFromId(tapecopyId)));
    } else {
      cnvSvc()->updateObj(obj->tapecopy());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjTapeGatewayRequest
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillObjTapeGatewayRequest(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 requestId = rset->getInt64(4);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->request() &&
      (0 == requestId ||
       obj->request()->id() != requestId)) {
    obj->setRequest(0);
  }
  // Update object or create new one
  if (0 != requestId) {
    if (0 == obj->request()) {
      obj->setRequest
        (dynamic_cast<castor::tape::tapegateway::TapeGatewayRequest*>
         (cnvSvc()->getObjFromId(requestId)));
    } else {
      cnvSvc()->updateObj(obj->request());
    }
  }
}

//------------------------------------------------------------------------------
// fillObjDiskCopy
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::fillObjDiskCopy(castor::tape::tapegateway::TapeGatewaySubRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 diskcopyId = rset->getInt64(5);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->diskcopy() &&
      (0 == diskcopyId ||
       obj->diskcopy()->id() != diskcopyId)) {
    obj->setDiskcopy(0);
  }
  // Update object or create new one
  if (0 != diskcopyId) {
    if (0 == obj->diskcopy()) {
      obj->setDiskcopy
        (dynamic_cast<castor::stager::DiskCopy*>
         (cnvSvc()->getObjFromId(diskcopyId)));
    } else {
      cnvSvc()->updateObj(obj->diskcopy());
    }
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::createRep(castor::IAddress* address,
                                                            castor::IObject* object,
                                                            bool endTransaction,
                                                            unsigned int type)
  throw (castor::exception::Exception) {
  castor::tape::tapegateway::TapeGatewaySubRequest* obj = 
    dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(5, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setInt(1, obj->fseq());
    m_insertStatement->setUInt64(2, (type == OBJ_TapeCopy && obj->tapecopy() != 0) ? obj->tapecopy()->id() : 0);
    m_insertStatement->setUInt64(3, (type == OBJ_TapeGatewayRequest && obj->request() != 0) ? obj->request()->id() : 0);
    m_insertStatement->setUInt64(4, (type == OBJ_DiskCopy && obj->diskcopy() != 0) ? obj->diskcopy()->id() : 0);
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getUInt64(5));
    m_storeTypeStatement->setUInt64(1, obj->id());
    m_storeTypeStatement->setUInt64(2, obj->type());
    m_storeTypeStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_insertStatementString << std::endl
                    << " and parameters' values were :" << std::endl
                    << "  fseq : " << obj->fseq() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  tapecopy : " << obj->tapecopy() << std::endl
                    << "  request : " << obj->request() << std::endl
                    << "  diskcopy : " << obj->diskcopy() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::bulkCreateRep(castor::IAddress* address,
                                                                std::vector<castor::IObject*> &objects,
                                                                bool endTransaction,
                                                                unsigned int type)
  throw (castor::exception::Exception) {
  // check whether something needs to be done
  int nb = objects.size();
  if (0 == nb) return;
  // Casts all objects
  std::vector<castor::tape::tapegateway::TapeGatewaySubRequest*> objs;
  for (int i = 0; i < nb; i++) {
    objs.push_back(dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(objects[i]));
  }
  std::vector<void *> allocMem;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(5, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // build the buffers for fseq
    int* fseqBuffer = (int*) malloc(nb * sizeof(int));
    if (fseqBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fseqBuffer);
    unsigned short* fseqBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (fseqBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(fseqBufLens);
    for (int i = 0; i < nb; i++) {
      fseqBuffer[i] = objs[i]->fseq();
      fseqBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (1, fseqBuffer, castor::db::DBTYPE_INT, sizeof(fseqBuffer[0]), fseqBufLens);
    // build the buffers for tapecopy
    double* tapecopyBuffer = (double*) malloc(nb * sizeof(double));
    if (tapecopyBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(tapecopyBuffer);
    unsigned short* tapecopyBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (tapecopyBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(tapecopyBufLens);
    for (int i = 0; i < nb; i++) {
      tapecopyBuffer[i] = (type == OBJ_TapeCopy && objs[i]->tapecopy() != 0) ? objs[i]->tapecopy()->id() : 0;
      tapecopyBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (2, tapecopyBuffer, castor::db::DBTYPE_UINT64, sizeof(tapecopyBuffer[0]), tapecopyBufLens);
    // build the buffers for request
    double* requestBuffer = (double*) malloc(nb * sizeof(double));
    if (requestBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(requestBuffer);
    unsigned short* requestBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (requestBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(requestBufLens);
    for (int i = 0; i < nb; i++) {
      requestBuffer[i] = (type == OBJ_TapeGatewayRequest && objs[i]->request() != 0) ? objs[i]->request()->id() : 0;
      requestBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (3, requestBuffer, castor::db::DBTYPE_UINT64, sizeof(requestBuffer[0]), requestBufLens);
    // build the buffers for diskcopy
    double* diskcopyBuffer = (double*) malloc(nb * sizeof(double));
    if (diskcopyBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskcopyBuffer);
    unsigned short* diskcopyBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (diskcopyBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(diskcopyBufLens);
    for (int i = 0; i < nb; i++) {
      diskcopyBuffer[i] = (type == OBJ_DiskCopy && objs[i]->diskcopy() != 0) ? objs[i]->diskcopy()->id() : 0;
      diskcopyBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (4, diskcopyBuffer, castor::db::DBTYPE_UINT64, sizeof(diskcopyBuffer[0]), diskcopyBufLens);
    // build the buffers for returned ids
    double* idBuffer = (double*) calloc(nb, sizeof(double));
    if (idBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBuffer);
    unsigned short* idBufLens = (unsigned short*) calloc(nb, sizeof(unsigned short));
    if (idBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(idBufLens);
    m_insertStatement->setDataBuffer
      (5, idBuffer, castor::db::DBTYPE_UINT64, sizeof(double), idBufLens);
    m_insertStatement->execute(nb);
    for (int i = 0; i < nb; i++) {
      objects[i]->setId((u_signed64)idBuffer[i]);
    }
    // reuse idBuffer for bulk insertion into Id2Type
    m_storeTypeStatement->setDataBuffer
      (1, idBuffer, castor::db::DBTYPE_UINT64, sizeof(idBuffer[0]), idBufLens);
    // build the buffers for type
    int* typeBuffer = (int*) malloc(nb * sizeof(int));
    if (typeBuffer == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBuffer);
    unsigned short* typeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    if (typeBufLens == 0) {
      castor::exception::OutOfMemory e;
      throw e;
    }
    allocMem.push_back(typeBufLens);
    for (int i = 0; i < nb; i++) {
      typeBuffer[i] = objs[i]->type();
      typeBufLens[i] = sizeof(int);
    }
    m_storeTypeStatement->setDataBuffer
      (2, typeBuffer, castor::db::DBTYPE_INT, sizeof(typeBuffer[0]), typeBufLens);
    m_storeTypeStatement->execute(nb);
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // release the buffers
    for (unsigned int i = 0; i < allocMem.size(); i++) {
      free(allocMem[i]);
    }
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkInsert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::updateRep(castor::IAddress* address,
                                                            castor::IObject* object,
                                                            bool endTransaction)
  throw (castor::exception::Exception) {
  castor::tape::tapegateway::TapeGatewaySubRequest* obj = 
    dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setInt(1, obj->fseq());
    m_updateStatement->setUInt64(2, obj->id());
    m_updateStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::deleteRep(castor::IAddress* address,
                                                            castor::IObject* object,
                                                            bool endTransaction)
  throw (castor::exception::Exception) {
  castor::tape::tapegateway::TapeGatewaySubRequest* obj = 
    dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setUInt64(1, obj->id());
    m_deleteTypeStatement->execute();
    m_deleteStatement->setUInt64(1, obj->id());
    m_deleteStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try {
      if (endTransaction) cnvSvc()->rollback();
    } catch (castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_deleteStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbTapeGatewaySubRequestCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::tape::tapegateway::TapeGatewaySubRequest* object = new castor::tape::tapegateway::TapeGatewaySubRequest();
    // Now retrieve and set members
    object->setFseq(rset->getInt(1));
    object->setId(rset->getUInt64(2));
    delete rset;
    return object;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_selectStatementString << std::endl
                    << " and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateObj
//------------------------------------------------------------------------------
std::vector<castor::IObject*>
castor::db::cnv::DbTapeGatewaySubRequestCnv::bulkCreateObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  // Prepare result
  std::vector<castor::IObject*> res;
  // check whether something needs to be done
  castor::VectorAddress* ad = 
    dynamic_cast<castor::VectorAddress*>(address);
  int nb = ad->target().size();
  if (0 == nb) return res;
  try {
    // Check whether the statement is ok
    if (0 == m_bulkSelectStatement) {
      m_bulkSelectStatement = createStatement(s_bulkSelectStatementString);
      m_bulkSelectStatement->registerOutParam(2, castor::db::DBTYPE_CURSOR);
    }
    // set the buffer for input ids
    m_bulkSelectStatement->setDataBufferUInt64Array(1, ad->target());
    // Execute statement
    m_bulkSelectStatement->execute();
    // get the result, that is a cursor on the selected rows
    castor::db::IDbResultSet *rset =
      m_bulkSelectStatement->getCursor(2);
    // loop and create the new objects
    bool status = rset->next();
    while (status) {
      // create the new Object
      castor::tape::tapegateway::TapeGatewaySubRequest* object = new castor::tape::tapegateway::TapeGatewaySubRequest();
      // Now retrieve and set members
      object->setFseq(rset->getInt(1));
      object->setId(rset->getUInt64(2));
      // store object in results and loop;
      res.push_back(object);
      status = rset->next();
    }
    delete rset;
    return res;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkSelect request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbTapeGatewaySubRequestCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::tape::tapegateway::TapeGatewaySubRequest* object = 
      dynamic_cast<castor::tape::tapegateway::TapeGatewaySubRequest*>(obj);
    object->setFseq(rset->getInt(1));
    object->setId(rset->getUInt64(2));
    delete rset;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

