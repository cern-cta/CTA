/**** This file has been autogenerated by gencastor from Umbrello UML model ***/

/******************************************************************************
 *                      castor/db/cnv/DbRepackSubRequestCnv.cpp
 *
 * This file is part of the Castor project.
 * See http://castor.web.cern.ch/castor
 *
 * Copyright (C) 2003  CERN
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * @(#)$RCSfile$ $Revision$ $Release$ $Date$ $Author$
 *
 * 
 *
 * @author Castor Dev team, castor-dev@cern.ch
 *****************************************************************************/

// Include Files
#include "DbRepackSubRequestCnv.hpp"
#include "castor/BaseAddress.hpp"
#include "castor/CnvFactory.hpp"
#include "castor/Constants.hpp"
#include "castor/IAddress.hpp"
#include "castor/ICnvSvc.hpp"
#include "castor/IObject.hpp"
#include "castor/VectorAddress.hpp"
#include "castor/db/DbCnvSvc.hpp"
#include "castor/exception/Exception.hpp"
#include "castor/exception/Internal.hpp"
#include "castor/exception/InvalidArgument.hpp"
#include "castor/exception/NoEntry.hpp"
#include "castor/repack/RepackRequest.hpp"
#include "castor/repack/RepackSegment.hpp"
#include "castor/repack/RepackSubRequest.hpp"
#include "castor/repack/RepackSubRequestStatusCode.hpp"
#include <set>
#include <vector>

//------------------------------------------------------------------------------
// Instantiation of a static factory class - should never be used
//------------------------------------------------------------------------------
static castor::CnvFactory<castor::db::cnv::DbRepackSubRequestCnv>* s_factoryDbRepackSubRequestCnv =
  new castor::CnvFactory<castor::db::cnv::DbRepackSubRequestCnv>();

//------------------------------------------------------------------------------
// Static constants initialization
//------------------------------------------------------------------------------
/// SQL statement for request insertion
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_insertStatementString =
"INSERT INTO RepackSubRequest (vid, xsize, filesMigrating, filesStaging, files, filesFailed, cuuid, submitTime, filesStaged, filesFailedSubmit, retryNb, id, repackrequest, status) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,ids_seq.nextval,:12,:13) RETURNING id INTO :14";

/// SQL statement for request deletion
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_deleteStatementString =
"DELETE FROM RepackSubRequest WHERE id = :1";

/// SQL statement for request selection
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_selectStatementString =
"SELECT vid, xsize, filesMigrating, filesStaging, files, filesFailed, cuuid, submitTime, filesStaged, filesFailedSubmit, retryNb, id, repackrequest, status FROM RepackSubRequest WHERE id = :1";

/// SQL statement for bulk request selection
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_bulkSelectStatementString =
"DECLARE \
   TYPE CurType IS REF CURSOR RETURN RepackSubRequest%ROWTYPE; \
   PROCEDURE bulkSelect(ids IN castor.\"cnumList\", \
                        objs OUT CurType) AS \
   BEGIN \
     FORALL i IN ids.FIRST..ids.LAST \
       INSERT INTO bulkSelectHelper VALUES(ids(i)); \
     OPEN objs FOR SELECT vid, xsize, filesMigrating, filesStaging, files, filesFailed, cuuid, submitTime, filesStaged, filesFailedSubmit, retryNb, id, repackrequest, status \
                     FROM RepackSubRequest t, bulkSelectHelper h \
                    WHERE t.id = h.objId; \
     DELETE FROM bulkSelectHelper; \
   END; \
 BEGIN \
   bulkSelect(:1, :2); \
 END;";

/// SQL statement for request update
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_updateStatementString =
"UPDATE RepackSubRequest SET vid = :1, xsize = :2, filesMigrating = :3, filesStaging = :4, files = :5, filesFailed = :6, cuuid = :7, submitTime = :8, filesStaged = :9, filesFailedSubmit = :10, retryNb = :11, status = :12 WHERE id = :13";

/// SQL statement for type storage
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_storeTypeStatementString =
"INSERT INTO Id2Type (id, type) VALUES (:1, :2)";

/// SQL statement for type deletion
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_deleteTypeStatementString =
"DELETE FROM Id2Type WHERE id = :1";

/// SQL existence statement for member repackrequest
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_checkRepackRequestExistStatementString =
"SELECT id FROM RepackRequest WHERE id = :1";

/// SQL update statement for member repackrequest
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_updateRepackRequestStatementString =
"UPDATE RepackSubRequest SET repackrequest = :1 WHERE id = :2";

/// SQL select statement for member repacksegment
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_selectRepackSegmentStatementString =
"SELECT id FROM RepackSegment WHERE repacksubrequest = :1 FOR UPDATE";

/// SQL delete statement for member repacksegment
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_deleteRepackSegmentStatementString =
"UPDATE RepackSegment SET repacksubrequest = 0 WHERE id = :1";

/// SQL remote update statement for member repacksegment
const std::string castor::db::cnv::DbRepackSubRequestCnv::s_remoteUpdateRepackSegmentStatementString =
"UPDATE RepackSegment SET repacksubrequest = :1 WHERE id = :2";

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
castor::db::cnv::DbRepackSubRequestCnv::DbRepackSubRequestCnv(castor::ICnvSvc* cnvSvc) :
  DbBaseCnv(cnvSvc),
  m_insertStatement(0),
  m_deleteStatement(0),
  m_selectStatement(0),
  m_bulkSelectStatement(0),
  m_updateStatement(0),
  m_storeTypeStatement(0),
  m_deleteTypeStatement(0),
  m_checkRepackRequestExistStatement(0),
  m_updateRepackRequestStatement(0),
  m_selectRepackSegmentStatement(0),
  m_deleteRepackSegmentStatement(0),
  m_remoteUpdateRepackSegmentStatement(0) {}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
castor::db::cnv::DbRepackSubRequestCnv::~DbRepackSubRequestCnv() throw() {
  reset();
}

//------------------------------------------------------------------------------
// reset
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::reset() throw() {
  //Here we attempt to delete the statements correctly
  // If something goes wrong, we just ignore it
  try {
    if(m_insertStatement) delete m_insertStatement;
    if(m_deleteStatement) delete m_deleteStatement;
    if(m_selectStatement) delete m_selectStatement;
    if(m_bulkSelectStatement) delete m_bulkSelectStatement;
    if(m_updateStatement) delete m_updateStatement;
    if(m_storeTypeStatement) delete m_storeTypeStatement;
    if(m_deleteTypeStatement) delete m_deleteTypeStatement;
    if(m_checkRepackRequestExistStatement) delete m_checkRepackRequestExistStatement;
    if(m_updateRepackRequestStatement) delete m_updateRepackRequestStatement;
    if(m_deleteRepackSegmentStatement) delete m_deleteRepackSegmentStatement;
    if(m_selectRepackSegmentStatement) delete m_selectRepackSegmentStatement;
    if(m_remoteUpdateRepackSegmentStatement) delete m_remoteUpdateRepackSegmentStatement;
  } catch (castor::exception::Exception ignored) {};
  // Now reset all pointers to 0
  m_insertStatement = 0;
  m_deleteStatement = 0;
  m_selectStatement = 0;
  m_bulkSelectStatement = 0;
  m_updateStatement = 0;
  m_storeTypeStatement = 0;
  m_deleteTypeStatement = 0;
  m_checkRepackRequestExistStatement = 0;
  m_updateRepackRequestStatement = 0;
  m_selectRepackSegmentStatement = 0;
  m_deleteRepackSegmentStatement = 0;
  m_remoteUpdateRepackSegmentStatement = 0;
}

//------------------------------------------------------------------------------
// ObjType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbRepackSubRequestCnv::ObjType() {
  return castor::repack::RepackSubRequest::TYPE();
}

//------------------------------------------------------------------------------
// objType
//------------------------------------------------------------------------------
const unsigned int castor::db::cnv::DbRepackSubRequestCnv::objType() const {
  return ObjType();
}

//------------------------------------------------------------------------------
// fillRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillRep(castor::IAddress* address,
                                                     castor::IObject* object,
                                                     unsigned int type,
                                                     bool endTransaction)
  throw (castor::exception::Exception) {
  castor::repack::RepackSubRequest* obj = 
    dynamic_cast<castor::repack::RepackSubRequest*>(object);
  try {
    switch (type) {
    case castor::OBJ_RepackRequest :
      fillRepRepackRequest(obj);
      break;
    case castor::OBJ_RepackSegment :
      fillRepRepackSegment(obj);
      break;
    default :
      castor::exception::InvalidArgument ex;
      ex.getMessage() << "fillRep called for type " << type 
                      << " on object of type " << obj->type() 
                      << ". This is meaningless.";
      throw ex;
    }
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    castor::exception::Internal ex;
    ex.getMessage() << "Error in fillRep for type " << type
                    << std::endl << e.getMessage().str() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// fillRepRepackRequest
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillRepRepackRequest(castor::repack::RepackSubRequest* obj)
  throw (castor::exception::Exception) {
  if (0 != obj->repackrequest()) {
    // Check checkRepackRequestExist statement
    if (0 == m_checkRepackRequestExistStatement) {
      m_checkRepackRequestExistStatement = createStatement(s_checkRepackRequestExistStatementString);
    }
    // retrieve the object from the database
    m_checkRepackRequestExistStatement->setUInt64(1, obj->repackrequest()->id());
    castor::db::IDbResultSet *rset = m_checkRepackRequestExistStatement->executeQuery();
    if (!rset->next()) {
      castor::BaseAddress ad;
      ad.setCnvSvcName("DbCnvSvc");
      ad.setCnvSvcType(castor::SVC_DBCNV);
      cnvSvc()->createRep(&ad, obj->repackrequest(), false);
    }
    // Close resultset
    delete rset;
  }
  // Check update statement
  if (0 == m_updateRepackRequestStatement) {
    m_updateRepackRequestStatement = createStatement(s_updateRepackRequestStatementString);
  }
  // Update local object
  m_updateRepackRequestStatement->setUInt64(1, 0 == obj->repackrequest() ? 0 : obj->repackrequest()->id());
  m_updateRepackRequestStatement->setUInt64(2, obj->id());
  m_updateRepackRequestStatement->execute();
}

//------------------------------------------------------------------------------
// fillRepRepackSegment
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillRepRepackSegment(castor::repack::RepackSubRequest* obj)
  throw (castor::exception::Exception) {
  // check select statement
  if (0 == m_selectRepackSegmentStatement) {
    m_selectRepackSegmentStatement = createStatement(s_selectRepackSegmentStatementString);
  }
  // Get current database data
  std::set<u_signed64> repacksegmentList;
  m_selectRepackSegmentStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectRepackSegmentStatement->executeQuery();
  while (rset->next()) {
    repacksegmentList.insert(rset->getUInt64(1));
  }
  delete rset;
  // update repacksegment and create new ones
  std::vector<castor::IObject*> toBeCreated;
  for (std::vector<castor::repack::RepackSegment*>::iterator it = obj->repacksegment().begin();
       it != obj->repacksegment().end();
       it++) {
    if (0 == (*it)->id()) {
      toBeCreated.push_back(*it);
    } else {
      // Check remote update statement
      if (0 == m_remoteUpdateRepackSegmentStatement) {
        m_remoteUpdateRepackSegmentStatement = createStatement(s_remoteUpdateRepackSegmentStatementString);
      }
      // Update remote object
      m_remoteUpdateRepackSegmentStatement->setUInt64(1, obj->id());
      m_remoteUpdateRepackSegmentStatement->setUInt64(2, (*it)->id());
      m_remoteUpdateRepackSegmentStatement->execute();
      std::set<u_signed64>::iterator item;
      if ((item = repacksegmentList.find((*it)->id())) != repacksegmentList.end()) {
        repacksegmentList.erase(item);
      }
    }
  }
  // create new objects
  cnvSvc()->bulkCreateRep(0, toBeCreated, false, OBJ_RepackSubRequest);
  // Delete old links
  for (std::set<u_signed64>::iterator it = repacksegmentList.begin();
       it != repacksegmentList.end();
       it++) {
    if (0 == m_deleteRepackSegmentStatement) {
      m_deleteRepackSegmentStatement = createStatement(s_deleteRepackSegmentStatementString);
    }
    m_deleteRepackSegmentStatement->setUInt64(1, *it);
    m_deleteRepackSegmentStatement->execute();
  }
}

//------------------------------------------------------------------------------
// fillObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillObj(castor::IAddress* address,
                                                     castor::IObject* object,
                                                     unsigned int type,
                                                     bool endTransaction)
  throw (castor::exception::Exception) {
  castor::repack::RepackSubRequest* obj = 
    dynamic_cast<castor::repack::RepackSubRequest*>(object);
  switch (type) {
  case castor::OBJ_RepackRequest :
    fillObjRepackRequest(obj);
    break;
  case castor::OBJ_RepackSegment :
    fillObjRepackSegment(obj);
    break;
  default :
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "fillObj called on type " << type 
                    << " on object of type " << obj->type() 
                    << ". This is meaningless.";
    throw ex;
  }
  if (endTransaction) {
    cnvSvc()->commit();
  }
}
//------------------------------------------------------------------------------
// fillObjRepackRequest
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillObjRepackRequest(castor::repack::RepackSubRequest* obj)
  throw (castor::exception::Exception) {
  // Check whether the statement is ok
  if (0 == m_selectStatement) {
    m_selectStatement = createStatement(s_selectStatementString);
  }
  // retrieve the object from the database
  m_selectStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
  if (!rset->next()) {
    castor::exception::NoEntry ex;
    ex.getMessage() << "No object found for id :" << obj->id();
    throw ex;
  }
  u_signed64 repackrequestId = rset->getInt64(13);
  // Close ResultSet
  delete rset;
  // Check whether something should be deleted
  if (0 != obj->repackrequest() &&
      (0 == repackrequestId ||
       obj->repackrequest()->id() != repackrequestId)) {
    obj->repackrequest()->removeRepacksubrequest(obj);
    obj->setRepackrequest(0);
  }
  // Update object or create new one
  if (0 != repackrequestId) {
    if (0 == obj->repackrequest()) {
      obj->setRepackrequest
        (dynamic_cast<castor::repack::RepackRequest*>
         (cnvSvc()->getObjFromId(repackrequestId)));
    } else {
      cnvSvc()->updateObj(obj->repackrequest());
    }
    obj->repackrequest()->addRepacksubrequest(obj);
  }
}

//------------------------------------------------------------------------------
// fillObjRepackSegment
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::fillObjRepackSegment(castor::repack::RepackSubRequest* obj)
  throw (castor::exception::Exception) {
  // Check select statement
  if (0 == m_selectRepackSegmentStatement) {
    m_selectRepackSegmentStatement = createStatement(s_selectRepackSegmentStatementString);
  }
  // retrieve the object from the database
  std::vector<u_signed64> repacksegmentList;
  m_selectRepackSegmentStatement->setUInt64(1, obj->id());
  castor::db::IDbResultSet *rset = m_selectRepackSegmentStatement->executeQuery();
  while (rset->next()) {
    repacksegmentList.push_back(rset->getUInt64(1));
  }
  // Close ResultSet
  delete rset;
  // Update objects and mark old ones for deletion
  std::vector<castor::repack::RepackSegment*> toBeDeleted;
  for (std::vector<castor::repack::RepackSegment*>::iterator it = obj->repacksegment().begin();
       it != obj->repacksegment().end();
       it++) {
    std::vector<u_signed64>::iterator item =
      std::find(repacksegmentList.begin(), repacksegmentList.end(), (*it)->id());
    if (item == repacksegmentList.end()) {
      toBeDeleted.push_back(*it);
    } else {
      repacksegmentList.erase(item);
      cnvSvc()->updateObj((*it));
    }
  }
  // Delete old objects
  for (std::vector<castor::repack::RepackSegment*>::iterator it = toBeDeleted.begin();
       it != toBeDeleted.end();
       it++) {
    obj->removeRepacksegment(*it);
    (*it)->setRepacksubrequest(0);
  }
  // Create new objects
  std::vector<castor::IObject*> newRepacksegment =
    cnvSvc()->getObjsFromIds(repacksegmentList, OBJ_RepackSegment);
  for (std::vector<castor::IObject*>::iterator it = newRepacksegment.begin();
       it != newRepacksegment.end();
       it++) {
    castor::repack::RepackSegment* remoteObj = 
      dynamic_cast<castor::repack::RepackSegment*>(*it);
    obj->addRepacksegment(remoteObj);
    remoteObj->setRepacksubrequest(obj);
  }
}

//------------------------------------------------------------------------------
// createRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::createRep(castor::IAddress* address,
                                                       castor::IObject* object,
                                                       bool endTransaction,
                                                       unsigned int type)
  throw (castor::exception::Exception) {
  castor::repack::RepackSubRequest* obj = 
    dynamic_cast<castor::repack::RepackSubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  if (0 != obj->id()) return;
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(14, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // Now Save the current object
    m_insertStatement->setString(1, obj->vid());
    m_insertStatement->setUInt64(2, obj->xsize());
    m_insertStatement->setUInt64(3, obj->filesMigrating());
    m_insertStatement->setUInt64(4, obj->filesStaging());
    m_insertStatement->setUInt64(5, obj->files());
    m_insertStatement->setUInt64(6, obj->filesFailed());
    m_insertStatement->setString(7, obj->cuuid());
    m_insertStatement->setUInt64(8, obj->submitTime());
    m_insertStatement->setUInt64(9, obj->filesStaged());
    m_insertStatement->setUInt64(10, obj->filesFailedSubmit());
    m_insertStatement->setUInt64(11, obj->retryNb());
    m_insertStatement->setUInt64(12, (type == OBJ_RepackRequest && obj->repackrequest() != 0) ? obj->repackrequest()->id() : 0);
    m_insertStatement->setInt(13, (int)obj->status());
    m_insertStatement->execute();
    obj->setId(m_insertStatement->getUInt64(14));
    m_storeTypeStatement->setUInt64(1, obj->id());
    m_storeTypeStatement->setUInt64(2, obj->type());
    m_storeTypeStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { if (endTransaction) cnvSvc()->rollback(); }
    catch(castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in insert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_insertStatementString << std::endl
                    << " and parameters' values were :" << std::endl
                    << "  vid : " << obj->vid() << std::endl
                    << "  xsize : " << obj->xsize() << std::endl
                    << "  filesMigrating : " << obj->filesMigrating() << std::endl
                    << "  filesStaging : " << obj->filesStaging() << std::endl
                    << "  files : " << obj->files() << std::endl
                    << "  filesFailed : " << obj->filesFailed() << std::endl
                    << "  cuuid : " << obj->cuuid() << std::endl
                    << "  submitTime : " << obj->submitTime() << std::endl
                    << "  filesStaged : " << obj->filesStaged() << std::endl
                    << "  filesFailedSubmit : " << obj->filesFailedSubmit() << std::endl
                    << "  retryNb : " << obj->retryNb() << std::endl
                    << "  id : " << obj->id() << std::endl
                    << "  repackrequest : " << obj->repackrequest() << std::endl
                    << "  status : " << obj->status() << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::bulkCreateRep(castor::IAddress* address,
                                                           std::vector<castor::IObject*> &objects,
                                                           bool endTransaction,
                                                           unsigned int type)
  throw (castor::exception::Exception) {
  // check whether something needs to be done
  int nb = objects.size();
  if (0 == nb) return;
  // Casts all objects
  std::vector<castor::repack::RepackSubRequest*> objs;
  for (int i = 0; i < nb; i++) {
    objs.push_back(dynamic_cast<castor::repack::RepackSubRequest*>(objects[i]));
  }
  try {
    // Check whether the statements are ok
    if (0 == m_insertStatement) {
      m_insertStatement = createStatement(s_insertStatementString);
      m_insertStatement->registerOutParam(14, castor::db::DBTYPE_UINT64);
    }
    if (0 == m_storeTypeStatement) {
      m_storeTypeStatement = createStatement(s_storeTypeStatementString);
    }
    // build the buffers for vid
    unsigned int vidMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->vid().length()+1 > vidMaxLen)
        vidMaxLen = objs[i]->vid().length()+1;
    }
    char* vidBuffer = (char*) calloc(nb, vidMaxLen);
    unsigned short* vidBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      strncpy(vidBuffer+(i*vidMaxLen), objs[i]->vid().c_str(), vidMaxLen);
      vidBufLens[i] = objs[i]->vid().length()+1; // + 1 for the trailing \0
    }
    m_insertStatement->setDataBuffer
      (1, vidBuffer, DBTYPE_STRING, vidMaxLen, vidBufLens);
    // build the buffers for xsize
    double* xsizeBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* xsizeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      xsizeBuffer[i] = objs[i]->xsize();
      xsizeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (2, xsizeBuffer, DBTYPE_UINT64, sizeof(xsizeBuffer[0]), xsizeBufLens);
    // build the buffers for filesMigrating
    double* filesMigratingBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesMigratingBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesMigratingBuffer[i] = objs[i]->filesMigrating();
      filesMigratingBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (3, filesMigratingBuffer, DBTYPE_UINT64, sizeof(filesMigratingBuffer[0]), filesMigratingBufLens);
    // build the buffers for filesStaging
    double* filesStagingBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesStagingBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesStagingBuffer[i] = objs[i]->filesStaging();
      filesStagingBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (4, filesStagingBuffer, DBTYPE_UINT64, sizeof(filesStagingBuffer[0]), filesStagingBufLens);
    // build the buffers for files
    double* filesBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesBuffer[i] = objs[i]->files();
      filesBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (5, filesBuffer, DBTYPE_UINT64, sizeof(filesBuffer[0]), filesBufLens);
    // build the buffers for filesFailed
    double* filesFailedBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesFailedBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesFailedBuffer[i] = objs[i]->filesFailed();
      filesFailedBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (6, filesFailedBuffer, DBTYPE_UINT64, sizeof(filesFailedBuffer[0]), filesFailedBufLens);
    // build the buffers for cuuid
    unsigned int cuuidMaxLen = 0;
    for (int i = 0; i < nb; i++) {
      if (objs[i]->cuuid().length()+1 > cuuidMaxLen)
        cuuidMaxLen = objs[i]->cuuid().length()+1;
    }
    char* cuuidBuffer = (char*) calloc(nb, cuuidMaxLen);
    unsigned short* cuuidBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      strncpy(cuuidBuffer+(i*cuuidMaxLen), objs[i]->cuuid().c_str(), cuuidMaxLen);
      cuuidBufLens[i] = objs[i]->cuuid().length()+1; // + 1 for the trailing \0
    }
    m_insertStatement->setDataBuffer
      (7, cuuidBuffer, DBTYPE_STRING, cuuidMaxLen, cuuidBufLens);
    // build the buffers for submitTime
    double* submitTimeBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* submitTimeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      submitTimeBuffer[i] = objs[i]->submitTime();
      submitTimeBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (8, submitTimeBuffer, DBTYPE_UINT64, sizeof(submitTimeBuffer[0]), submitTimeBufLens);
    // build the buffers for filesStaged
    double* filesStagedBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesStagedBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesStagedBuffer[i] = objs[i]->filesStaged();
      filesStagedBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (9, filesStagedBuffer, DBTYPE_UINT64, sizeof(filesStagedBuffer[0]), filesStagedBufLens);
    // build the buffers for filesFailedSubmit
    double* filesFailedSubmitBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* filesFailedSubmitBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      filesFailedSubmitBuffer[i] = objs[i]->filesFailedSubmit();
      filesFailedSubmitBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (10, filesFailedSubmitBuffer, DBTYPE_UINT64, sizeof(filesFailedSubmitBuffer[0]), filesFailedSubmitBufLens);
    // build the buffers for retryNb
    double* retryNbBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* retryNbBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      retryNbBuffer[i] = objs[i]->retryNb();
      retryNbBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (11, retryNbBuffer, DBTYPE_UINT64, sizeof(retryNbBuffer[0]), retryNbBufLens);
    // build the buffers for repackrequest
    double* repackrequestBuffer = (double*) malloc(nb * sizeof(double));
    unsigned short* repackrequestBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      repackrequestBuffer[i] = (type == OBJ_RepackRequest && objs[i]->repackrequest() != 0) ? objs[i]->repackrequest()->id() : 0;
      repackrequestBufLens[i] = sizeof(double);
    }
    m_insertStatement->setDataBuffer
      (12, repackrequestBuffer, DBTYPE_UINT64, sizeof(repackrequestBuffer[0]), repackrequestBufLens);
    // build the buffers for status
    int* statusBuffer = (int*) malloc(nb * sizeof(int));
    unsigned short* statusBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      statusBuffer[i] = objs[i]->status();
      statusBufLens[i] = sizeof(int);
    }
    m_insertStatement->setDataBuffer
      (13, statusBuffer, DBTYPE_INT, sizeof(statusBuffer[0]), statusBufLens);
    // build the buffers for returned ids
    double* idBuffer = (double*) calloc(nb, sizeof(double));
    unsigned short* idBufLens = (unsigned short*) calloc(nb, sizeof(unsigned short));
    m_insertStatement->setDataBuffer
      (14, idBuffer, DBTYPE_UINT64, sizeof(double), idBufLens);
    m_insertStatement->execute(nb);
    for (int i = 0; i < nb; i++) {
      objects[i]->setId((u_signed64)idBuffer[i]);
    }
    // release the buffers for vid
    free(vidBuffer);
    free(vidBufLens);
    // release the buffers for xsize
    free(xsizeBuffer);
    free(xsizeBufLens);
    // release the buffers for filesMigrating
    free(filesMigratingBuffer);
    free(filesMigratingBufLens);
    // release the buffers for filesStaging
    free(filesStagingBuffer);
    free(filesStagingBufLens);
    // release the buffers for files
    free(filesBuffer);
    free(filesBufLens);
    // release the buffers for filesFailed
    free(filesFailedBuffer);
    free(filesFailedBufLens);
    // release the buffers for cuuid
    free(cuuidBuffer);
    free(cuuidBufLens);
    // release the buffers for submitTime
    free(submitTimeBuffer);
    free(submitTimeBufLens);
    // release the buffers for filesStaged
    free(filesStagedBuffer);
    free(filesStagedBufLens);
    // release the buffers for filesFailedSubmit
    free(filesFailedSubmitBuffer);
    free(filesFailedSubmitBufLens);
    // release the buffers for retryNb
    free(retryNbBuffer);
    free(retryNbBufLens);
    // release the buffers for repackrequest
    free(repackrequestBuffer);
    free(repackrequestBufLens);
    // release the buffers for status
    free(statusBuffer);
    free(statusBufLens);
    // reuse idBuffer for bulk insertion into Id2Type
    m_storeTypeStatement->setDataBuffer
      (1, idBuffer, DBTYPE_UINT64, sizeof(idBuffer[0]), idBufLens);
    // build the buffers for type
    int* typeBuffer = (int*) malloc(nb * sizeof(int));
    unsigned short* typeBufLens = (unsigned short*) malloc(nb * sizeof(unsigned short));
    for (int i = 0; i < nb; i++) {
      typeBuffer[i] = objs[i]->type();
      typeBufLens[i] = sizeof(int);
    }
    m_storeTypeStatement->setDataBuffer
      (2, typeBuffer, DBTYPE_INT, sizeof(typeBuffer[0]), typeBufLens);
    m_storeTypeStatement->execute(nb);
    // release the buffers for type
    free(typeBuffer);
    free(typeBufLens);
    // release the buffers for returned ids
    free(idBuffer);
    free(idBufLens);
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { if (endTransaction) cnvSvc()->rollback(); }
    catch(castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkInsert request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::updateRep(castor::IAddress* address,
                                                       castor::IObject* object,
                                                       bool endTransaction)
  throw (castor::exception::Exception) {
  castor::repack::RepackSubRequest* obj = 
    dynamic_cast<castor::repack::RepackSubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_updateStatement) {
      m_updateStatement = createStatement(s_updateStatementString);
    }
    // Update the current object
    m_updateStatement->setString(1, obj->vid());
    m_updateStatement->setUInt64(2, obj->xsize());
    m_updateStatement->setUInt64(3, obj->filesMigrating());
    m_updateStatement->setUInt64(4, obj->filesStaging());
    m_updateStatement->setUInt64(5, obj->files());
    m_updateStatement->setUInt64(6, obj->filesFailed());
    m_updateStatement->setString(7, obj->cuuid());
    m_updateStatement->setUInt64(8, obj->submitTime());
    m_updateStatement->setUInt64(9, obj->filesStaged());
    m_updateStatement->setUInt64(10, obj->filesFailedSubmit());
    m_updateStatement->setUInt64(11, obj->retryNb());
    m_updateStatement->setInt(12, (int)obj->status());
    m_updateStatement->setUInt64(13, obj->id());
    m_updateStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { if (endTransaction) cnvSvc()->rollback(); }
    catch(castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// deleteRep
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::deleteRep(castor::IAddress* address,
                                                       castor::IObject* object,
                                                       bool endTransaction)
  throw (castor::exception::Exception) {
  castor::repack::RepackSubRequest* obj = 
    dynamic_cast<castor::repack::RepackSubRequest*>(object);
  // check whether something needs to be done
  if (0 == obj) return;
  try {
    // Check whether the statements are ok
    if (0 == m_deleteStatement) {
      m_deleteStatement = createStatement(s_deleteStatementString);
    }
    if (0 == m_deleteTypeStatement) {
      m_deleteTypeStatement = createStatement(s_deleteTypeStatementString);
    }
    // Now Delete the object
    m_deleteTypeStatement->setUInt64(1, obj->id());
    m_deleteTypeStatement->execute();
    m_deleteStatement->setUInt64(1, obj->id());
    m_deleteStatement->execute();
    if (endTransaction) {
      cnvSvc()->commit();
    }
  } catch (castor::exception::SQLError e) {
    // Always try to rollback
    try { if (endTransaction) cnvSvc()->rollback(); }
    catch(castor::exception::Exception ignored) {}
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in delete request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_deleteStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// createObj
//------------------------------------------------------------------------------
castor::IObject* castor::db::cnv::DbRepackSubRequestCnv::createObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  castor::BaseAddress* ad = 
    dynamic_cast<castor::BaseAddress*>(address);
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, ad->target());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << ad->target();
      throw ex;
    }
    // create the new Object
    castor::repack::RepackSubRequest* object = new castor::repack::RepackSubRequest();
    // Now retrieve and set members
    object->setVid(rset->getString(1));
    object->setXsize(rset->getUInt64(2));
    object->setFilesMigrating(rset->getUInt64(3));
    object->setFilesStaging(rset->getUInt64(4));
    object->setFiles(rset->getUInt64(5));
    object->setFilesFailed(rset->getUInt64(6));
    object->setCuuid(rset->getString(7));
    object->setSubmitTime(rset->getUInt64(8));
    object->setFilesStaged(rset->getUInt64(9));
    object->setFilesFailedSubmit(rset->getUInt64(10));
    object->setRetryNb(rset->getUInt64(11));
    object->setId(rset->getUInt64(12));
    object->setStatus((enum castor::repack::RepackSubRequestStatusCode)rset->getInt(14));
    delete rset;
    return object;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in select request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_selectStatementString << std::endl
                    << " and id was " << ad->target() << std::endl;;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// bulkCreateObj
//------------------------------------------------------------------------------
std::vector<castor::IObject*>
castor::db::cnv::DbRepackSubRequestCnv::bulkCreateObj(castor::IAddress* address)
  throw (castor::exception::Exception) {
  // Prepare result
  std::vector<castor::IObject*> res;
  // check whether something needs to be done
  castor::VectorAddress* ad = 
    dynamic_cast<castor::VectorAddress*>(address);
  int nb = ad->target().size();
  if (0 == nb) return res;
  try {
    // Check whether the statement is ok
    if (0 == m_bulkSelectStatement) {
      m_bulkSelectStatement = createStatement(s_bulkSelectStatementString);
      m_bulkSelectStatement->registerOutParam(2, castor::db::DBTYPE_CURSOR);
    }
    // set the buffer for input ids
    m_bulkSelectStatement->setDataBufferUInt64Array(1, ad->target());
    // Execute statement
    m_bulkSelectStatement->execute();
    // get the result, that is a cursor on the selected rows
    castor::db::IDbResultSet *rset =
      m_bulkSelectStatement->getCursor(2);
    // loop and create the new objects
    bool status = rset->next();
    while (status) {
      // create the new Object
      castor::repack::RepackSubRequest* object = new castor::repack::RepackSubRequest();
      // Now retrieve and set members
      object->setVid(rset->getString(1));
      object->setXsize(rset->getUInt64(2));
      object->setFilesMigrating(rset->getUInt64(3));
      object->setFilesStaging(rset->getUInt64(4));
      object->setFiles(rset->getUInt64(5));
      object->setFilesFailed(rset->getUInt64(6));
      object->setCuuid(rset->getString(7));
      object->setSubmitTime(rset->getUInt64(8));
      object->setFilesStaged(rset->getUInt64(9));
      object->setFilesFailedSubmit(rset->getUInt64(10));
      object->setRetryNb(rset->getUInt64(11));
      object->setId(rset->getUInt64(12));
      object->setStatus((enum castor::repack::RepackSubRequestStatusCode)rset->getInt(14));
      // store object in results and loop;
      res.push_back(object);
      status = rset->next();
    }
    delete rset;
    return res;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in bulkSelect request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << " was called in bulk with "
                    << nb << " items." << std::endl;
    throw ex;
  }
}

//------------------------------------------------------------------------------
// updateObj
//------------------------------------------------------------------------------
void castor::db::cnv::DbRepackSubRequestCnv::updateObj(castor::IObject* obj)
  throw (castor::exception::Exception) {
  try {
    // Check whether the statement is ok
    if (0 == m_selectStatement) {
      m_selectStatement = createStatement(s_selectStatementString);
    }
    // retrieve the object from the database
    m_selectStatement->setUInt64(1, obj->id());
    castor::db::IDbResultSet *rset = m_selectStatement->executeQuery();
    if (!rset->next()) {
      castor::exception::NoEntry ex;
      ex.getMessage() << "No object found for id :" << obj->id();
      throw ex;
    }
    // Now retrieve and set members
    castor::repack::RepackSubRequest* object = 
      dynamic_cast<castor::repack::RepackSubRequest*>(obj);
    object->setVid(rset->getString(1));
    object->setXsize(rset->getUInt64(2));
    object->setFilesMigrating(rset->getUInt64(3));
    object->setFilesStaging(rset->getUInt64(4));
    object->setFiles(rset->getUInt64(5));
    object->setFilesFailed(rset->getUInt64(6));
    object->setCuuid(rset->getString(7));
    object->setSubmitTime(rset->getUInt64(8));
    object->setFilesStaged(rset->getUInt64(9));
    object->setFilesFailedSubmit(rset->getUInt64(10));
    object->setRetryNb(rset->getUInt64(11));
    object->setId(rset->getUInt64(12));
    object->setStatus((enum castor::repack::RepackSubRequestStatusCode)rset->getInt(14));
    delete rset;
  } catch (castor::exception::SQLError e) {
    castor::exception::InvalidArgument ex;
    ex.getMessage() << "Error in update request :"
                    << std::endl << e.getMessage().str() << std::endl
                    << "Statement was : " << std::endl
                    << s_updateStatementString << std::endl
                    << " and id was " << obj->id() << std::endl;;
    throw ex;
  }
}

