'''
Created on Jul 13, 2010
Classes with key-value pairs suggesting parameters to TreeCalculators and TreeDesigner.
These properties are used as standard values, if nothing else is given.
Using these guideline values, TreeCalculators and TreeDesigner set properties for every ViewNode in ViewTree.

BasicViewTreeProps:
width - informs about the desired width of the TreeMap in px
height - informs about the desired height of the TreeMap in px
tree - holds related viewtree, if already existing, value is None otherwise

ViewTreeCalculationProps:
basic_properties - reference to BasicViewTreeProps
headersize - desired height of the rectangle header in px
spacesize - desired space between the rectangles on the same level, in px (in the current implementation this value is decreased each level)
minspacesize - the minimum space between rectangles on the same level, in px
tree - holds related viewtree, if already existing, value is None otherwise

ViewTreeDesignProps:
calc_properties - reference to ViewTreeCalculationProps
inbordersize - desired thickness of the rectangle border line (default is 0, ie. it is greater than 0 for Annex)
headerfontsize - desired fontsize of the font for the text displayed in rectangle header, in px
radiallightbrightness - desired "strength of the light source shining on the rectangle", value between 0.0 and 1.0
tree - holds related viewtree
headertextisbold - defines if the text in the rectangle header is desired to be bold

All of this result in following Properties of a ViewNode:

set by TreeCalculators:
treenode - original TreeNode object from data tree generated by TreeBuilder
spacesize - space to neighbour rectangles, in px
headersize - height of the rectangle header, in px
width - rectangle width
height - rectangle height
x - rectangle x pos in the image
y - rectangle y pos in the image
nbchildren - number of children the node has (for potential use)

set by TreeDesigner:
headertext - text string to show in the rectangle header
headertextisbold - defines if the header text should be bold
htmltooltiptext - defines the tooltip text for that node
fillcolor - color the rectangle should be filled with
level - level inside of the data tree (root is 0, ascending)
radiallight {'brightness': b, 'hue':h, 'opacity': o } - defines brightness, hue and opacity of the "light" shining at the rectangle

@author: kblaszcz
'''

class PropertiesBase(object):
    '''
    classdocs
    '''
    def __init__(self):
        '''
        Constructor
        '''
        self.props = {}
        
    def addProperties(self, propdict):
        assert(isinstance (propdict, dict))
        self.props.update(propdict)
        
    def setProperty (self, key, value):
        self.props[key] = value
        
    def getProperty (self, key):
        try:
            return self.props[key]
        except KeyError:
            return None
    
#    def getObject(self):
#        return self.obj
    
    def __str__(self):
        return self.props.__str__()


class BasicViewTreeProps(PropertiesBase):
    '''
    classdocs
    '''

    def __init__(self, width=800, height = 600, tree = None):
        '''
        Constructor
        '''
        PropertiesBase.__init__(self)
        self.props['width'] = width
        self.props['height'] = height
        self.props['viewtree'] = tree

class ViewTreeCalculationProps(PropertiesBase):
    '''
    classdocsheight
    '''

    def __init__(self, basic_properties, headersize = 12.0, spacesize = 3.0, minspacesize = 1.0, tree = None):
        '''
        Constructor
        '''
        assert (basic_properties is not None or isinstance(basic_properties, BasicViewTreeProps))
        
        PropertiesBase.__init__(self)
        self.props['basic_properties'] = basic_properties
        
        self.height = basic_properties.getProperty('height')
        self.width = basic_properties.getProperty('width')
        
        if headersize > self.height:
            self.props['headersize'] = self.height * 0.02
        else:
            self.props['headersize'] = headersize
            
        if spacesize > min(self.width, self.height) * 0.25:
            self.props['spacesize'] = 4.0
        else:
            self.props['spacesize'] = spacesize
            
        if minspacesize <= spacesize and minspacesize >= 0.0:
            self.props['minspacesize'] = minspacesize
        else:
            self.props['minspacesize'] = spacesize
            
        self.props['objecttree'] = tree

        
class ViewTreeDesignProps(PropertiesBase):
    '''
    classdocs
    '''

    def __init__(self, calc_properties, inbordersize = 0.0, headerfontsize = 12.0, radiallightbrightness = 0.4, tree = None, headertextisbold = True):
        '''
        Constructor
        '''
        assert(calc_properties is not None or isinstance(calc_properties, ViewTreeCalculationProps)), "calc_properties wrong"
        PropertiesBase.__init__(self)
        self.props['calc_properties'] = calc_properties
        
        self.props['basic_properties'] = calc_properties.getProperty('basic_properties')
        basic_properties = self.props['basic_properties']
        assert(basic_properties is not None or isinstance(self.basic_properties, BasicViewTreeProps)), "basic_properties wrong"
        
        self.headersize  = self.props['calc_properties'].getProperty('headersize')
        self.width = self.props['basic_properties'].getProperty('width')
        self.height = self.props['basic_properties'].getProperty('height')
            
        if inbordersize > min(self.width, self.height) * 0.1:
            self.props['inbordersize'] = 1.0
        else:
            self.props['inbordersize'] = inbordersize
            
        if headerfontsize > self.headersize - inbordersize:
            self.props['headerfontsize'] = self.headersize - inbordersize
        else:
            self.props['headerfontsize'] = headerfontsize
            
        if radiallightbrightness > 1.0 or radiallightbrightness < 0.0:
            self.props['radiallightbrightness'] = 0.4
        else:
            self.props['radiallightbrightness'] = radiallightbrightness
        
        self.props['viewtree'] = tree
        
        self.props['headertextisbold'] = headertextisbold

        