    mysite/
        __init__.py //constructor
        manage.py	//execute to start the server, update db, ...
        settings.py	//settings like database parameters or libraries used
        urls.py		//url to method(view)
        
        python manage.py runserver 8000 //starts the server on port 8000
        
        python manage.py startapp polls
    creates
        polls/
        __init__.py
        models.py
        views.py
        
    from django.db import models
    
    class Poll(models.Model):
        question = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')

    class Choice(models.Model):
        poll = models.ForeignKey(Poll)
        choice = models.CharField(max_length=200)
        votes = models.IntegerField()
        
    django.db.models.Field
    django.db.models.ForeignKey
    
        INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'mysite.polls'
        'django.contrib.admin'
    )
    
    python manage.py sql polls
    python manage.py validate
    python manage.py sqlcustom polls 
    python manage.py sqlclear polls
    python manage.py sqlindexes polls
    python manage.py sqlall polls
    
    python manage.py syncdb
    
    python manage.py shell
    
    Poll.objects.all()
    import datetime
    p = Poll(question="What's up?", pub_date=datetime.datetime.now())
    p.save()
    p.id
    Poll.objects.filter(id=1)
    Poll.objects.filter(question__startswith='What')
    Poll.objects.get(pub_date__year=2007)
    Poll.objects.get(id=2)
    Poll.objects.get(pk=1)
    p = Poll.objects.get(pk=1)
    p.was_published_today()
    p = Poll.objects.get(pk=1)
    p.choice_set.create(choice='Not much', votes=0)
    p.choice_set.create(choice='The sky', votes=0)
    c = p.choice_set.create(choice='Just hacking again', votes=0)
    c.poll
    p.choice_set.all()
    p.choice_set.count()
    Choice.objects.filter(poll__pub_date__year=2007)
    c = p.choice_set.filter(choice__startswith='Just hacking')
    c.delete()
    
    
    models.py:
        class Poll(models.Model):
        # ...
        def __unicode__(self):
            return self.question

    class Choice(models.Model):
        # ...
        def __unicode__(self):
            return self.choice
            
    Django models have a default :meth:`~django.db.models.Model.__str__` method
    that calls django.db.models.Model.__unicode__
    
    unicode(p)
    str(p)
    
        class Poll(models.Model):
        # ...
        def was_published_today(self):    from mysite.polls.models import Poll
    from django.contrib import admin

    admin.site.register(Poll)
            return self.pub_date.date() == datetime.date.today()
    
    from mysite.polls.models import Poll, Choice
    
    urlpatterns = patterns('',
          (r'^admin/', include(admin.site.urls))
    )
    
    
    admin.py in polls directory
    
    from mysite.polls.models import Poll
    from django.contrib import admin
    
    class ChoiceInline(admin.TabularInline):
        model = Choice
        extra = 3
    
    class PollAdmin(admin.ModelAdmin):
        //fields = ['pub_date', 'question']
        fieldsets = [
            (None,               {'fields': ['question']}),
            ('Date information', {'fields': ['pub_date']}),
        ]
        list_display = ('question', 'pub_date', 'was_published_today')
        inlines = [ChoiceInline]
        list_filter = ['pub_date']
        search_fields = ['question']
        date_hierarchy = 'pub_date'

    admin.site.register(Poll, PollAdmin) // instead of admin.site.register(Poll)
    
    models.py
    
    from mysite.polls.models import Choice
    admin.site.register(Choice)

        def was_published_today(self):
        return self.pub_date.date() == datetime.date.today()
    was_published_today.short_description = 'Published today?'
    
    TEMPLATE_DIRS = (
        "/home/my_username/mytemplates", # Change this to your own directory.
    )
    
    from django.conf.urls.defaults import *
    from django.contrib import admin
    admin.autodiscover()

    urlpatterns = patterns('',
        (r'^polls/$', 'mysite.polls.views.index'),
        (r'^polls/(?P<poll_id>\d+)/$', 'mysite.polls.views.detail'),
        (r'^polls/(?P<poll_id>\d+)/results/$', 'mysite.polls.views.results'),
        (r'^polls/(?P<poll_id>\d+)/vote/$', 'mysite.polls.views.vote'),
        (r'^admin/', include(admin.site.urls)),
    )
    
    from mysite.polls.models import Poll
    from django.http import HttpResponse

    def index(request):
        latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
        output = ', '.join([p.question for p in latest_poll_list])
        return HttpResponse(output)
        
    def index(request):
        latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
        t = loader.get_template('polls/index.html')
        c = Context({
            'latest_poll_list': latest_poll_list,
        })
        return HttpResponse(t.render(c))
        
    {% if latest_poll_list %}
        <ul>
        {% for poll in latest_poll_list %}
            <li>{{ poll.question }}</li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No polls are available.</p>
    {% endif %}
    
    def detail(request, poll_id):
        try:
            p = Poll.objects.get(pk=poll_id)
        except Poll.DoesNotExist:
            raise Http404
        return render_to_response('polls/detail.html', {'poll': p})
    
    from django.shortcuts import render_to_response
    from mysite.polls.models import Poll

    def index(request):
        latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
        return render_to_response('polls/index.html', {'latest_poll_list': latest_poll_list})
    
    from django.shortcuts import render_to_response, get_object_or_404
    
    def detail(request, poll_id):
        p = get_object_or_404(Poll, pk=poll_id)
        return render_to_response('polls/detail.html', {'poll': p})
        
    django.shortcuts.get_list_or_404
    
    urlpatterns = patterns('mysite.polls.views',
        (r'^polls/$', 'index'),
        (r'^polls/(?P<poll_id>\d+)/$', 'detail'),
        (r'^polls/(?P<poll_id>\d+)/results/$', 'results'),
        (r'^polls/(?P<poll_id>\d+)/vote/$', 'vote'),
    )
    
	urlpatterns = patterns('',
	    (r'^polls/', include('mysite.polls.urls')),
	    (r'^admin/', include(admin.site.urls)),
	)
	
	<h1>{{ poll.question }}</h1>

    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    <form action="/polls/{{ poll.id }}/vote/" method="post">
    {% for choice in poll.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
        <label for="choice{{ forloop.counter }}">{{ choice.choice }}</label><br />
    {% endfor %}
    <input type="submit" value="Vote" />
    </form>
    
    from django.shortcuts import get_object_or_404, render_to_response
    from django.http import HttpResponseRedirect
    from django.core.urlresolvers import reverse
    from mysite.polls.models import Choice, Poll
    # ...
    def vote(request, poll_id):
        p = get_object_or_404(Poll, pk=poll_id)
        try:
            selected_choice = p.choice_set.get(pk=request.POST['choice'])
        except (KeyError, Choice.DoesNotExist):
            # Redisplay the poll voting form.
            return render_to_response('polls/detail.html', {
                'poll': p,
                'error_message': "You didn't select a choice.",
            })
        else:
            selected_choice.votes += 1
            selected_choice.save()
            # Always return an HttpResponseRedirect after successfully dealing
            # with POST data. This prevents data from being posted twice if a
            # user hits the Back button.
            return HttpResponseRedirect(reverse('mysite.polls.views.results', args=(p.id,)))

    <h1>{{ poll.question }}</h1>

    <ul>
    {% for choice in poll.choice_set.all %}
        <li>{{ choice.choice }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
    {% endfor %}
    </ul>
   
    from django.conf.urls.defaults import *
    from mysite.polls.models import Poll

    info_dict = {
        'queryset': Poll.objects.all(),
    }

    urlpatterns = patterns('',
        (r'^$', 'django.views.generic.list_detail.object_list', info_dict),
        (r'^(?P<object_id>\d+)/$', 'django.views.generic.list_detail.object_detail', info_dict),
        url(r'^(?P<object_id>\d+)/results/$', 'django.views.generic.list_detail.object_detail', dict(info_dict, template_name='polls/results.html'), 'poll_results'),
        (r'^(?P<poll_id>\d+)/vote/$', 'mysite.polls.views.vote'),
    )
    
    poll_details.html:
    
    <h1>{{ object.question }}</h1>

    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    <form action="/polls/{{ object.id }}/vote/" method="post">
    {% for choice in object.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
        <label for="choice{{ forloop.counter }}">{{ choice.choice }}</label><br />
    {% endfor %}
    <input type="submit" value="Vote" />
    </form>
    
    python manage.py inspectdb > dirs/modelsnew.py