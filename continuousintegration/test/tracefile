#!/bin/sh

TMP_FILE=/tmp/tracefile.$$

get_ids()
{
  IDS=$(grep -m1 "^$1 " filenameToLogIds.txt)
  FILE_ID=$(echo $IDS | cut -d' ' -f2)
  ARCHIVE_ID=$(echo $IDS | cut -d' ' -f3)
}

get_mgm_time()
{
  grep -m1 " $1 " xrdlog.mgm.${2}.${3} | sed 's/ func=DoIt.*$//' | sed 's/time=//'
}

get_mgm_times()
{
  TIME_ARCHIVED=$(get_mgm_time $1 default ARCHIVED)
  TIME_CLOSEW=$(get_mgm_time $1 default CLOSEW)
  TIME_CREATE=$(get_mgm_time $1 default SYNC::CREATE)
  TIME_PREPARE=$(get_mgm_time $1 default SYNC::PREPARE)
  TIME_RETRIEVED=$(get_mgm_time $1 retrieve_written CLOSEW)
}

get_cta_time()
{
  awk -vPATTERN="$*" '
    $0 ~ PATTERN {
       gsub("^Apr ", "1804")
       print $1 " " $2
       #exit
  }' ${TMP_FILE}
}

get_frontend_times()
{
  grep "fileId=\"$1\"" cta-frontend-processWFE.log >${TMP_FILE}

  TIME_FE_CREATE=$(get_cta_time CREATE)
  TIME_FE_CLOSEW=$(get_cta_time CLOSEW)
  TIME_FE_PREPARE=$(get_cta_time PREPARE)
}

get_taped_times()
{
  grep -m 11 "fileId=\"$1\"" cta-taped-archive.log >${TMP_FILE}
  TIME_TS_ARCHIVE_POP=$(get_cta_time "In ArchiveMount::getNextJobBatch")
  TIME_TS_ARCHIVE_TASKS=$(get_cta_time "Created tasks for migrating a file")
  TIME_TS_ARCHIVE_OPEN=$(get_cta_time "Opened disk file for read")
  TIME_TS_ARCHIVE_READ=$(get_cta_time "File successfully read from disk")
  TIME_TS_ARCHIVE_DONE=$(get_cta_time "File successfully transmitted to drive")
  TIME_TS_ARCHIVE_REPORT=$(get_cta_time "Reported to the client a full file archival")

  grep -m 7 "fileId=\"$1\"" cta-taped-retrieve.log >${TMP_FILE}
  TIME_TS_RETRIEVE_POP=$(get_cta_time "In RetrieveMount::getNextJobBatch")
  TIME_TS_RETRIEVE_TASK=$(get_cta_time "Recall task created")
  TIME_TS_RETRIEVE_TASKS=$(get_cta_time "Created tasks for recalling a file")
  TIME_TS_RETRIEVE_POSITION=$(get_cta_time "Successfully positioned for reading")
  TIME_TS_RETRIEVE_READ=$(get_cta_time "File successfully read from tape")
  TIME_TS_RETRIEVE_OPEN=$(get_cta_time "Opened disk file for writing")
  TIME_TS_RETRIEVE_DONE=$(get_cta_time "File successfully transfered to disk")
}

get_time()
{
  OFFSET_SECS=$1
  ABS_DAYS=$((${2}-180413))
  ABS_HOURS=$(echo $3 | cut -d: -f1)
  ABS_MINS=$(echo $3 | cut -d: -f2)
  ABS_SECS=$(echo $3 | cut -d: -f3)
  echo $((((${ABS_DAYS}*24 + ${ABS_HOURS})*60 + ${ABS_MINS})*60 + ${ABS_SECS}))
}

get_times()
{
  get_ids $1
  get_mgm_times $1
  get_frontend_times $ARCHIVE_ID
  get_taped_times $ARCHIVE_ID

  echo -n "$ARCHIVE_ID $FILE_ID "

  ABS_TIME_START=$(get_time 0 $TIME_CREATE)
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_CREATE) "
  echo -n "$(get_time $ABS_TIME_START $TIME_CLOSEW) "
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_CLOSEW) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_POP) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_TASKS) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_OPEN) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_READ) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_DONE) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_ARCHIVE_REPORT) "
  echo -n "$(get_time $ABS_TIME_START $TIME_ARCHIVED) "

  ABS_TIME_START=$(get_time 0 $TIME_PREPARE)
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_PREPARE) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_POP) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_TASK) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_TASKS) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_POSITION) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_READ) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_OPEN) "
  echo -n "$(get_time $ABS_TIME_START $TIME_TS_RETRIEVE_DONE) "
  echo    "$(get_time $ABS_TIME_START $TIME_RETRIEVED);"
}

FILE_NUM=1

echo "cta_times = ["

while :
do
  get_times /eos/dev/userfiles/testdir/group_${FILE_NUM}
  FILE_NUM=$((${FILE_NUM}+1))
  [ $FILE_NUM -le 1000000 ] || break
done

echo "];"

rm -f ${TMP_FILE}
