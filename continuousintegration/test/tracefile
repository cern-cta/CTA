#!/bin/sh

TMP_FILE=/tmp/tracefile.$$

get_ids()
{
  IDS=$(grep -m1 "^$1 " filenameToLogIds.txt)
  FILE_ID=$(echo $IDS | cut -d' ' -f2)
  ARCHIVE_ID=$(echo $IDS | cut -d' ' -f3)
}

get_mgm_time()
{
  grep -m1 " $1 " xrdlog.mgm.${2}.${3} | sed 's/ func=DoIt.*$//' | sed 's/time=//'
}

get_mgm_times()
{
  TIME_ARCHIVED=$(get_mgm_time $1 default ARCHIVED)
  TIME_CLOSEW=$(get_mgm_time $1 default CLOSEW)
  TIME_CREATE=$(get_mgm_time $1 default SYNC::CREATE)
  TIME_PREPARE=$(get_mgm_time $1 default SYNC::PREPARE)
  TIME_RETRIEVED=$(get_mgm_time $1 retrieve_written CLOSEW)
}

get_cta_time()
{
  awk -vPATTERN="$*" '
    $0 ~ PATTERN {
       gsub("^Apr ", "1804")
       print $1 " " $2
       #exit
  }' ${TMP_FILE}
}

get_frontend_times()
{
  grep "fileId=\"$1\"" cta-frontend-processWFE.log >${TMP_FILE}

  TIME_FE_CREATE=$(get_cta_time CREATE)
  TIME_FE_CLOSEW=$(get_cta_time CLOSEW)
  TIME_FE_PREPARE=$(get_cta_time PREPARE)
}

get_taped_times()
{
  # 18 for 2 archive copies + 1 retrieve
  TMP_RESULTS=$(grep -m18 "^$1 " cta-taped-events.log)
  TIME_TS_ARCHIVE_POP=$(echo -e "${TMP_RESULTS}" | grep -m1 "^$1 A_POP" | cut -d' ' -f3)
  TIME_TS_ARCHIVE_TASKS=$(echo -e "${TMP_RESULTS}" | grep "^$1 A_TSS" | cut -d' ' -f3)
  TIME_TS_ARCHIVE_OPEN=$(echo -e "${TMP_RESULTS}" | grep "^$1 A_OPN" | cut -d' ' -f3)
  TIME_TS_ARCHIVE_READ=$(echo -e "${TMP_RESULTS}" | grep "^$1 A_RED" | cut -d' ' -f3)
  TIME_TS_ARCHIVE_DONE=$(echo -e "${TMP_RESULTS}" | grep "^$1 A_DNE" | cut -d' ' -f3)
  TIME_TS_ARCHIVE_REPORT=$(echo -e "${TMP_RESULTS}" | grep "^$1 A_RPT" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_POP=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_POP" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_TASK=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_TSK" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_TASKS=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_RCL" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_POSITION=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_POS" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_READ=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_RED" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_OPEN=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_OPN" | cut -d' ' -f3)
  TIME_TS_RETRIEVE_DONE=$(echo -e "${TMP_RESULTS}" | grep "^$1 R_TRF" | cut -d' ' -f3)
}

get_time()
{
  awk -vOFFSET_SECS=${1} -vABS_DAYS=${2} -vABS_TIME=${3} 'BEGIN{
    ABS_DAYS -= 180413
    ABS_HOURS = substr(ABS_TIME,1,2)
    ABS_MINS  = substr(ABS_TIME,4,2)
    ABS_SECS  = substr(ABS_TIME,7,2)
    TIME_SECS = (((ABS_DAYS*24) + ABS_HOURS)*60 + ABS_MINS)*60 + ABS_SECS
    print TIME_SECS-OFFSET_SECS
  }'
}

get_offset_time()
{
  echo $(($2-$1))
}

get_times()
{
  get_ids $1
  get_mgm_times $1
  get_frontend_times $ARCHIVE_ID
  get_taped_times $ARCHIVE_ID

  echo -n "$ARCHIVE_ID $FILE_ID "

  ABS_TIME_START=$(get_time 0 $TIME_CREATE)
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_CREATE) "
  echo -n "$(get_time $ABS_TIME_START $TIME_CLOSEW) "
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_CLOSEW) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_POP) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_TASKS) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_OPEN) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_READ) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_DONE) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_ARCHIVE_REPORT) "
  echo -n "$(get_time $ABS_TIME_START $TIME_ARCHIVED) "

  ABS_TIME_START=$(get_time 0 $TIME_PREPARE)
  echo -n "$(get_time $ABS_TIME_START $TIME_FE_PREPARE) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_POP) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_TASK) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_TASKS) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_POSITION) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_READ) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_OPEN) "
  echo -n "$(get_offset_time $ABS_TIME_START $TIME_TS_RETRIEVE_DONE) "
  echo    "$(get_time $ABS_TIME_START $TIME_RETRIEVED);"
}

FILE_NUM=1000000

echo "cta_times = ["

while :
do
  get_times /eos/dev/userfiles/testdir/group_${FILE_NUM}
  FILE_NUM=$((${FILE_NUM}+1))
  [ $FILE_NUM -le 1000000 ] || break
done

echo "];"

rm -f ${TMP_FILE}
