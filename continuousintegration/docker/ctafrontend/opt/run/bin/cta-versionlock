#!/usr/bin/python3

import argparse
import json
import os
import re
import rpm
from typing import List, Dict, Tuple, Any


def printer(versions: Dict[str, Dict[str, List[str]]], msg: Dict[str, Any], json_output: bool) -> None:
    """
    Formats and prints the message based on the provided versions and jsonoutput flag.

    Args:
        versions (dict): Dictionary containing version information.
        msg (dict): Message to print.
        jsonoutput (bool): Flag to determine if the output should be in JSON format.
    """
    if json_output:
        print(json.dumps(msg))
    else:
        print(f"\n{msg.pop('title')}")
        for status in ["ok", "wrong_version", "missing", "adding", "updating", "removing"]:
            if msg.get(status):
                print(f"\n==> {status}: {msg[status]['count']}/{len(versions['cta'])}")
                if status in ["wrong_version", "updating"] and msg[status]["count"] > 0:
                    print("\n".join([f"{key}: {value}" for key, value in msg[status]["content"].items()]))
                else:
                    print("\n".join(msg[status]["content"]))
        print("\n")


def split_filename(filename: str) -> Tuple[str, str, str, str, str]:
    """
    Splits RPM filename into name, version, release, epoch, and architecture.

    Args:
        filename (str): RPM filename.

    Returns:
        tuple: A tuple containing name, version, release, epoch, and architecture.

    Raises:
        ValueError: If the filename does not match the expected RPM format.
    """
    # Note that dnf versionlock has the epoch after the name, instead of before: https://dnf-plugins-core.readthedocs.io/en/latest/versionlock.html
    regex = r"^(?P<name>.+)-((?P<epoch>[0-9]+):)?(?P<version>[^-]+)-(?P<release>[^-]+(?:\.[^-.]+)*)\.(?P<arch>[^-.]+)$"
    match = re.match(regex, filename)
    if match:
        return (
            match.group("name"),
            match.group("version"),
            match.group("release"),
            match.group("epoch") or "0",
            match.group("arch"),
        )
    else:
        raise ValueError(f"Filename {filename} does not match expected RPM format")


def read_version_lock_file(versionlock_files: Dict[str, str]) -> Dict[str, Dict[str, List[str]]]:
    """
    Reads versionlock files and returns a dictionary of versions.

    Args:
        filelist (dict): Dictionary with filenames and their paths.

    Returns:
        dict: Dictionary containing versions.
    """
    versions = {fname: {} for fname in versionlock_files}
    for fname, vfile in versionlock_files.items():
        if not os.path.isfile(vfile):
            raise FileNotFoundError(f"file {vfile} not found")

        with open(vfile) as f:
            packages = f.read().splitlines()
            for package in packages:
                if package == "" or package.startswith("#"):
                    continue
                name, version, release, epoch, arch = split_filename(package)
                versions[fname][name] = [epoch, version, release, arch]
    return versions

def check_consistency(required_versions: Dict[str, List[str]]) -> Dict[str, Any]:
    """
    Checks the installed packages version with the versions in the versionlock.

    Args:
        pkglist (dict): Dictionary of package list.

    Returns:
        dict: Dictionary containing check results.
    """
    result = {"ok": {}, "wrong_version": {}}
    installed_packages = rpm.TransactionSet()
    for package_name, required_version in required_versions.items():
        mi = installed_packages.dbMatch("name", package_name)
        for item in mi:
            installed_epoch = "0" if item["epoch"] is None else str(item["epoch"])
            epoch, version, release, _ = required_version
            if (epoch, version, release) == (installed_epoch, item["version"], item["release"]):
                result["ok"][package_name] = f"{epoch}:{version}-{release}"
            else:
                result["wrong_version"][package_name] = {
                    "required": f"{epoch}:{version}-{release}",
                    "installed": f"{installed_epoch}:{item['version']}-{item['release']}",
                }
    return result


def checkpg() -> None:
    """
    Main function to check if CTA packages exist in versionlock.list and if the installed versions are consistent.
    """
    versionlock_files = {"cta": "/etc/yum/pluginconf.d/versionlock.cta", "yum": "/etc/yum/pluginconf.d/versionlock.list"}
    retcode = 0
    json_output = False

    actions: list[str] = ["check", "apply", "remove"]

    parser = argparse.ArgumentParser(
        description="Tool that checks the consistency between installed packages and CTA versionlock requirements"
    )
    parser.add_argument("--cta-versionlock", help="Check against the provided versionlock file instead of the default versionlock.cta")
    parser.add_argument("--yum-versionlock", help="Check against the provided versionlock file instead of the default versionlock.list")
    parser.add_argument("--json", action="store_true", help="Format output in json")
    args = parser.parse_args()

    if args.json:
        json_output = True

    if args.cta_versionlock:
        versionlock_files['cta'] = args.cta_versionlock
        print("Using cta versionlock file: %s" % args.cta_versionlock)

    if args.yum_versionlock:
        versionlock_files['yum'] = args.yum_versionlock
        print("Using yum versionlock file: %s" % args.yum_versionlock)

    message = {"title": "CTA packages and dependencies versions currently installed"}

    required_versions = read_version_lock_file(versionlock_files)

    packages = check_consistency(required_versions["cta"])
    for status, content in packages.items():
        message[status] = {"count": len(content), "content": content}
    if packages['wrong_version']:
        retcode = 2

    printer(required_versions, message, json_output)
    exit(retcode)


checkpg()
