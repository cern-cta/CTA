diff --git a/cmake/FindProtobuf3.cmake b/cmake/FindProtobuf3.cmake
index bbb25ecc72..7e6db8f294 100644
--- a/cmake/FindProtobuf3.cmake
+++ b/cmake/FindProtobuf3.cmake
@@ -18,20 +18,20 @@
 set(PROTOBUF3_ROOT /usr)
 #set(PROTOBUF3_ROOT /opt/eos)
 
-set(PROTOBUF3_RPATH ${PROTOBUF3_ROOT}/lib64/protobuf3)
+set(PROTOBUF3_RPATH ${PROTOBUF3_ROOT}/lib64)
 message(STATUS "PROTOBUF3_RPATH=${PROTOBUF3_RPATH}")
 
 set(PROTOBUF3_INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
 
 find_program(PROTOBUF3_PROTOC3_EXECUTABLE
-    NAMES ${PROTOBUF3_ROOT}/bin/protoc3
+    NAMES ${PROTOBUF3_ROOT}/bin/protoc
     DOC "Version 3 of The Google Protocol Buffers Compiler"
 )
-message(STATUS "protoc3 is at ${PROTOBUF3_PROTOC3_EXECUTABLE} ")
+message(STATUS "protoc is at ${PROTOBUF3_PROTOC3_EXECUTABLE} ")
 
 find_path(PROTOBUF3_INCLUDE_DIRS
   google/protobuf/message.h
-  PATHS ${PROTOBUF3_ROOT}/include/protobuf3
+  PATHS ${PROTOBUF3_ROOT}/include
   NO_DEFAULT_PATH)
 message(STATUS "PROTOBUF3_INCLUDE_DIRS=${PROTOBUF3_INCLUDE_DIRS}")
 
diff --git a/cmake/Findoracle-instantclient.cmake b/cmake/Findoracle-instantclient.cmake
index 1c2508ea8a..3192f3746c 100644
--- a/cmake/Findoracle-instantclient.cmake
+++ b/cmake/Findoracle-instantclient.cmake
@@ -19,7 +19,7 @@
 #     ORACLE-INSTANTCLIENT_LIBRARIES
 #     ORACLE-INSTANTCLIENT_RPATH
 
-set(ORACLE-INSTANTCLIENT_VERSION 19.3)
+set(ORACLE-INSTANTCLIENT_VERSION 21)
 
 set(ORACLE-INSTANTCLIENT_RPATH /usr/lib/oracle/${ORACLE-INSTANTCLIENT_VERSION}/client64/lib)
 message(STATUS "ORACLE-INSTANTCLIENT_RPATH=${ORACLE-INSTANTCLIENT_RPATH}")
@@ -35,7 +35,7 @@ find_library(ORACLE-INSTANTCLIENT_CLNTSH_LIBRARY
   NO_DEFAULT_PATH)
 
 find_library(ORACLE-INSTANTCLIENT_OCCI_LIBRARY
-  NAME libocci.so.19.1
+  NAME libocci_gcc53.so
   PATHS ${ORACLE-INSTANTCLIENT_RPATH}
   NO_DEFAULT_PATH)
 
diff --git a/common/json/object/JSONCObject.cpp b/common/json/object/JSONCObject.cpp
index 43fc568c79..3bdde9a8c9 100644
--- a/common/json/object/JSONCObject.cpp
+++ b/common/json/object/JSONCObject.cpp
@@ -95,7 +95,9 @@ void JSONCObject::jsonSetValue(const std::string& key, const std::string & value
 
 template<>
 void JSONCObject::jsonSetValue(const std::string& key, const double & value){
-  json_object_object_add(m_jsonObject,key.c_str(),json_object_new_double(value));
+  char buffer[64];
+  snprintf(buffer, sizeof(buffer), "%.6f", value);
+  json_object_object_add(m_jsonObject,key.c_str(),json_object_new_double_s(value, buffer));
 }
 
 template<>
diff --git a/common/json/test/JSONCObjectTest.cpp b/common/json/test/JSONCObjectTest.cpp
index b834ad5f28..bd5ac647f3 100644
--- a/common/json/test/JSONCObjectTest.cpp
+++ b/common/json/test/JSONCObjectTest.cpp
@@ -26,10 +26,10 @@ using namespace cta::utils;
 
 TEST(JSONCObjectTest, testJSONGenerationFromObject) {
   JSONCTestObject to;
-  to.double_number = 42.0;
+  to.double_number = 42.234567;
   to.integer_number = 42;
   to.str = "forty two";
-  ASSERT_EQ("{\"integer_number\":42,\"str\":\"forty two\",\"double_number\":42.000000}",to.getJSON());
+  ASSERT_EQ("{\"integer_number\":42,\"str\":\"forty two\",\"double_number\":42.234567}",to.getJSON());
 }
 
 TEST(JSONCObjectTest, testObjectGenerationFromJSON){
diff --git a/continuousintegration/ci_runner/prepareImage.sh b/continuousintegration/ci_runner/prepareImage.sh
index a35c3a807a..ffe4681e16 100755
--- a/continuousintegration/ci_runner/prepareImage.sh
+++ b/continuousintegration/ci_runner/prepareImage.sh
@@ -37,4 +37,4 @@ mkdir -p $rpm_dir
 cp -r $rpm_source $rpm_dir
 
 echo "sudo docker build . -f continuousintegration/docker/ctafrontend/alma9/Dockerfile -t ctageneric:${image_tag}"
-sudo docker build . -f continuousintegration/docker/ctafrontend/alma9/Dockerfile -t ctageneric:${image_tag}
+podman build . -f continuousintegration/docker/ctafrontend/alma9/Dockerfile -t ctageneric:${image_tag} --network host
diff --git a/continuousintegration/orchestration/create_instance.sh b/continuousintegration/orchestration/create_instance.sh
index 964c1f6c74..4bd5aedcae 100755
--- a/continuousintegration/orchestration/create_instance.sh
+++ b/continuousintegration/orchestration/create_instance.sh
@@ -172,7 +172,7 @@ echo "Creating instance using docker image with tag: ${imagetag}"
 cp pod-* ${poddir}
 if [ ! -z "${dockerimage}" ]; then
   echo "set image to ctageneric:${imagetag}"
-  sed -i ${poddir}/pod-* -e "s/\(^\s\+image\):.*/\1: ctageneric:${imagetag}\n\1PullPolicy: Never/"
+  sed -i ${poddir}/pod-* -e "s/\(^\s\+image\):.*/\1: localhost\/ctageneric:${imagetag}\n\1PullPolicy: Never/"
 else
   sed -i ${poddir}/pod-* -e "s/\(^\s\+image:[^:]\+:\).*/\1${imagetag}/"
 fi
diff --git a/cta.spec.in b/cta.spec.in
index c7755abc2e..44beb3cf1d 100644
--- a/cta.spec.in
+++ b/cta.spec.in
@@ -1,5 +1,5 @@
 # Avoid problem with official Oracle RPMS not listing necessary capabilities
-%global __requires_exclude ^libocci.so|^libclntsh.so
+%global __requires_exclude ^libocci.so|^libocci_gcc53.so|^libclntsh.so
 
 # Generic macros
 #---------------
@@ -50,13 +50,13 @@ BuildRequires: cmake3 >= 3.17 redhat-rpm-config
 %define xrootdVersion 1:5.6.1-1
 %endif
 
-%define radosVersion 2:15.2.15
+%define radosVersion 2:17.2.7
 BuildRequires: xrootd-client-devel  >= %{xrootdVersion}
 BuildRequires: xrootd-devel         >= %{xrootdVersion}
 BuildRequires: xrootd-server-devel  >= %{xrootdVersion}
 BuildRequires: xrootd-private-devel >= %{xrootdVersion}
 BuildRequires: librados-devel = %{radosVersion}, libradosstriper-devel = %{radosVersion},
-BuildRequires: protobuf3-compiler >= 3.3.1 protobuf3-devel >= 3.3.1
+BuildRequires: protobuf-compiler >= 3.3.1 protobuf-devel >= 3.3.1
 BuildRequires: gtest-devel >= 1.11.0
 BuildRequires: sqlite-devel >= 3.6
 BuildRequires: libcap-devel >= 2.16
@@ -65,11 +65,11 @@ BuildRequires: cryptopp-devel >= 5.6.2
 BuildRequires: libuuid-devel >= 2.17
 BuildRequires: json-c-devel >= 0.11
 BuildRequires: libattr-devel >= 2.4.44
-BuildRequires: oracle-instantclient19.3-devel
+BuildRequires: oracle-instantclient-devel
 BuildRequires: postgresql-devel
 BuildRequires: valgrind
 BuildRequires: valgrind-devel
-BuildRequires: grpc, grpc-devel, grpc-static, grpc-plugins
+BuildRequires: grpc, grpc-devel, grpc-plugins
 BuildRequires: krb5-devel
 BuildRequires: libtirpc-devel
 %{?systemd_requires}
@@ -254,8 +254,8 @@ fi
 %package -n cta-lib-common
 Summary: CERN Tape Archive libraries
 Group: Application/CTA
-# Explicity require protobuf3 to avoid clash with eos-protobuf3
-Requires: protobuf3
+# Explicity require protobuf to avoid clash with eos-protobuf
+Requires: protobuf
 Requires: xrootd-client-libs >= %{xrootdVersion}
 %description -n cta-lib-common
 CERN Tape Archive:
@@ -267,9 +267,9 @@ The shared libraries base
 %package -n cta-lib-catalogue
 Summary: CERN Tape Archive libraries
 Group: Application/CTA
-# Explicity require protobuf3 to avoid clash with eos-protobuf3
+# Explicity require protobuf to avoid clash with eos-protobuf
 Requires: cta-lib-common
-Requires: oracle-instantclient19.3-basic
+# Requires: oracle-instantclient-basic
 Requires: postgresql-libs
 Requires: xrootd-client-libs >= %{xrootdVersion}
 %description -n cta-lib-catalogue
@@ -292,8 +292,8 @@ Requires: librados2 = %{radosVersion}
 Requires: postgresql-libs
 %endif
 Requires: xrootd-client-libs >= %{xrootdVersion}
-# Explicity require protobuf3 to avoid clash with eos-protobuf3
-Requires: protobuf3
+# Explicity require protobuf to avoid clash with eos-protobuf
+Requires: protobuf
 Requires: cta-lib-common = %{version}-%{release}
 %description -n cta-lib
 CERN Tape Archive:
@@ -388,6 +388,7 @@ Command-line tool for testing immutable files
 Summary: CERN Tape Archive: object store tools
 Group: Application/CTA
 Requires: cta-lib = %{version}-%{release}
+Requires: cta-lib-catalogue = %{version}-%{release}
 Requires: xrootd-client-libs >= %{xrootdVersion}
 %description -n cta-objectstore-tools
 CERN Tape Archive:
@@ -536,7 +537,7 @@ Requires(pre): /usr/bin/egrep, /usr/sbin/groupadd, /usr/sbin/luseradd
 CERN Tape Archive:
 Common items such as the creation of the cta local user and /var/log/cta
 %pre -n cta-common
-/usr/bin/egrep -q '^cta:' /etc/passwd || /usr/sbin/luseradd -s /bin/nologin -c "CTA system account" -g tape cta
+/usr/bin/egrep -q '^cta:' /etc/passwd || /usr/sbin/luseradd -s /usr/sbin/nologin -c "CTA system account" -g tape cta
 %files -n cta-common
 %defattr(-,root,root)
 %attr(0755,cta,tape) %dir /var/log/cta
diff --git a/eos_cta/CMakeLists.txt b/eos_cta/CMakeLists.txt
index 66f3a07ce5..9ee05dfd78 100644
--- a/eos_cta/CMakeLists.txt
+++ b/eos_cta/CMakeLists.txt
@@ -54,4 +54,4 @@ add_library(EosCtaGrpc ${ProtoSourcesEosCtaGrpc} ${ProtoGrpcSourcesEosCtaGrpc})
 set_target_properties(EosCtaGrpc PROPERTIES
   LINKER_LANGUAGE CXX
   POSITION_INDEPENDENT_CODE TRUE)
-target_link_libraries(EosCtaGrpc gpr ${PROTOBUF3_GRPC_LIBRARIES})
+target_link_libraries(EosCtaGrpc gpr absl_synchronization ${PROTOBUF3_GRPC_LIBRARIES})
diff --git a/rdbms/StmtTest.cpp b/rdbms/StmtTest.cpp
index cdc3c3c2c1..552afa210d 100644
--- a/rdbms/StmtTest.cpp
+++ b/rdbms/StmtTest.cpp
@@ -1043,7 +1043,6 @@ TEST_P(cta_rdbms_StmtTest, insert_same_primary_twice) {
     auto stmt = m_conn.createStmt(sql);
     stmt.bindUint64(":ID", insertValue);
     switch(m_login.dbType) {
-    case Login::DBTYPE_IN_MEMORY:
     case Login::DBTYPE_ORACLE:
     case Login::DBTYPE_POSTGRESQL:
       ASSERT_THROW(stmt.executeNonQuery(), UniqueConstraintError);
