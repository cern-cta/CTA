global:
  securityContext:
    # These are set to True to allow attaching with gdb to the grpc frontend.
    allowPrivilegeEscalation: True
    privileged: True

frontend:
  grpc:
    enabled: true
  xrd:
    enabled: true

  # Enabled to allow debugging after a crash
  postRun:
    enabled: true
    script: |
      #!/usr/bin/bash
      echo "Process crashed. Sleeping..."
      sleep infinity

tpsrv:
  # Enabled to allow debugging after a crash
  postRun:
    enabled: true
    script: |
      #!/usr/bin/bash
      echo "Process crashed. Sleeping..."
      sleep infinity

cli:
  useGrpc: true
  conf:
    cta:
      endpoint: cta-frontend-grpc:10956
      grpc:
        tls:
          chain_cert_path: /etc/grpc-certs/ca.crt
          enabled: true

  initContainer:
    enabled: true
    script: |
      #!/usr/bin/bash

      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=admin-cli" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      admin_access_token=$(echo ${response} | jq -r .access_token)
      dnf install -y jq

      # Get the client-uuid for grpc-client, get the scope-id for custom-sub
      CLIENT_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients?clientId=grpc-client | jq -r '.[] .id')

      CUSTOM_SCOPE_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      # Check if the scope is already assigned to the client
      EXISTING_SCOPE=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      if [ -z "$EXISTING_SCOPE" ]; then
        echo "Scope not found on client, adding it..."

        CUSTOM_SCOPE_ID=$(curl -s \
          -H "Authorization: Bearer $admin_access_token" \
          http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

        curl -X PUT http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes/${CUSTOM_SCOPE_ID} \
          -H "Authorization: Bearer $admin_access_token" \
          -H "Content-Type: application/json" \
          -s
      else
        echo "Scope already assigned to client, skipping..."
      fi

      # Obtain an access token with the diskInstanceName set in the "sub" claim
      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=grpc-client" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      grpc_access_token=$(echo ${response} | jq -r .access_token)

      printf "$grpc_access_token" > /etc/grid-security/jwt-token-grpc
    spec:
      env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: password
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security

  extraVolumes:
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security
      readOnly: true
    - name: grpc-certs
      mountPath: /etc/grpc-certs
      readOnly: true
    volumes:
    - name: grid-security
      emptyDir: {}
    - name: grpc-certs
      secret:
        secretName: ca-crt

client:
  useGrpc: true
  conf:
    cta:
      endpoint: cta-frontend-grpc:10956
      grpc:
        tls:
          chain_cert_path: /etc/grpc-certs/ca.crt
          enabled: true

  initContainer:
    enabled: true
    script: |
      #!/usr/bin/bash

      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=admin-cli" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      admin_access_token=$(echo ${response} | jq -r .access_token)
      dnf install -y jq

      # Get the client-uuid for grpc-client, get the scope-id for custom-sub
      CLIENT_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients?clientId=grpc-client | jq -r '.[] .id')

      CUSTOM_SCOPE_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      # Check if the scope is already assigned to the client
      EXISTING_SCOPE=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      if [ -z "$EXISTING_SCOPE" ]; then
        echo "Scope not found on client, adding it..."

        CUSTOM_SCOPE_ID=$(curl -s \
          -H "Authorization: Bearer $admin_access_token" \
          http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

        curl -X PUT http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes/${CUSTOM_SCOPE_ID} \
          -H "Authorization: Bearer $admin_access_token" \
          -H "Content-Type: application/json" \
          -s
      else
        echo "Scope already assigned to client, skipping..."
      fi

      # Obtain an access token with the diskInstanceName set in the "sub" claim
      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=grpc-client" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      grpc_access_token=$(echo ${response} | jq -r .access_token)

      printf "$grpc_access_token" > /etc/grid-security/jwt-token-grpc
    spec:
      env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: password
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security

  extraVolumes:
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security
      readOnly: true
    - name: grpc-certs
      mountPath: /etc/grpc-certs
      readOnly: true
    volumes:
    - name: grid-security
      emptyDir: {}
    - name: grpc-certs
      secret:
        secretName: ca-crt
