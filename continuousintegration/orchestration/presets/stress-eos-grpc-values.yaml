global:
  # Note that the repository and tag are manually overriden by the create_instance script
  repository:
  tag:
  pullPolicy: IfNotPresent

  eos:
    instancename: ctaeos

  http:
    enabled: true

  sssKeytab:
    # This secret is generated by the authentication chart
    secret: eos-keytab

  extraObjects:
    # Ensure the MGM is addressable by its instancename
    - |
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ include "mgm.instancename" . }}
      spec:
        type: ExternalName
        externalName: {{ include "utils.mgm_fqdn" . }}


mgm:
  # Must match the authentication chart
  kerberos:
    enabled: true
    clientConfig:
      configMap: krb5-conf
    defaultRealm: TEST.CTA
    adminPrinc:
      name: root
      password: "defaultcipassword"

  # Ensure we can delete the pods quickly in CI
  pod:
    extraSpec:
      terminationGracePeriodSeconds: 1

  http:
    # Generated using: openssl rand -base64 64 | base64 -w 0
    macaroonsSecretKey: ZjZsMWxPT1lEc1poNFBKRTJiK05aaEhMdC9iUzdsSmxxNGZXT1Z4dE9PWElsR2I0MHhqZ3RnRDNzWnhVTW5iZAp1YWFSYmR6d0hSL3FMem1ncDNCWHFRPT0K

  xrd:
    # Additional tape-specific config
    # The option mgmofs.protowfusegrpc should be configurable
    extraConfig: |
      xrootd.chksum  adler32
      mgmofs.archivedir /var/eos/archive
      mgmofs.prepare.dest.space default
      mgmofs.tapeenabled true
      mgmofs.protowfendpoint cta-frontend-grpc:10956
      mgmofs.protowfresource /ctafrontend
      mgmofs.protowfusegrpc true
      mgmofs.protowfusegrpctls true
      mgmofs.jwttokenpath /etc/grid-security/jwt-token-grpc
      tpc.trace  all
      tpc.header2cgi  ArchiveMetadata archivemetadata
      taperestapi.sitename  cern-tape-archive-{{ include "mgm.instancename" . }}

  # Liveness probes are disabled for all pods as we specifically do not want the pod to restart in case of an error for CI
  # Additionally, these liveness probes cause a lot of extra messages in the logs
  probes:
    liveness: false

  extraEnv:
  - name: EOS_HA_REDIRECT_READS
    value: "1"
  - name: LD_PRELOAD
    value: "/usr/lib64/libjemalloc.so.2"
  # For some reason EOS is on another time zone, so set this to CET
  - name: TZ
    value: "CET"

  # Generate the self-signed certificates for http
  initContainer:
    enabled: true
    script: |
      #!/usr/bin/bash
      /mkcert-ssl.sh
      chown -R daemon:daemon /etc/grid-security/certificates
      cp /etc/grpc-certs/ca.crt /etc/grid-security/certificates

      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=admin-cli" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      admin_access_token=$(echo ${response} | jq -r .access_token)
      # with this access token, update the client scopes
      dnf install -y jq

      # ## 1. get the client-uuid for grpc-client, get the scope-id for custom-sub
      CLIENT_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients?clientId=grpc-client | jq -r '.[] .id')

      CUSTOM_SCOPE_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')
      echo $CUSTOM_SCOPE_ID > /etc/grid-security/jwt-token-grpc
      # CUSTOM_SCOPE_ID=$(echo {CLIENT_SCOPES} | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')
      ## 2. Make a PUT request using client id and scope id
      # Check if the scope is already assigned to the client
      EXISTING_SCOPE=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      if [ -z "$EXISTING_SCOPE" ]; then
        echo "Scope not found on client, adding it..."

        CUSTOM_SCOPE_ID=$(curl -s \
          -H "Authorization: Bearer $admin_access_token" \
          http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

        curl -X PUT http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes/${CUSTOM_SCOPE_ID} \
          -H "Authorization: Bearer $admin_access_token" \
          -H "Content-Type: application/json" \
          -s
      else
        echo "Scope already assigned to client, skipping..."
      fi

      # Obtain an access token with the diskInstanceName set in the "sub" claim
      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=grpc-client" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      grpc_access_token=$(echo ${response} | jq -r .access_token)

      printf "$grpc_access_token" > /etc/grid-security/jwt-token-grpc
    spec:
      env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: password
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security
    - name: grpc-certs
      mountPath: /etc/grpc-certs

  extraVolumes:
    volumeMounts:
    # varlog-tmp is the location where core dumps will end up
    - name: varlog-tmp
      mountPath: /var/log/tmp
    - name: grid-security
      mountPath: /etc/grid-security
      readOnly: true
    volumes:
    - name: varlog-tmp
      emptyDir: {}
    - name: grid-security
      emptyDir: {}
    - name: grpc-certs
      secret:
        secretName: ca-crt

fst:
  replicaCount: 1

  persistence:
    enabled: true
    storageClass: "fast-ssd"
    # This is a temporary work-around until the bug is fixed in the EOS charts
    # https://gitlab.cern.ch/eos/eos-charts/-/issues/113
    pvc:
      storageClass: "fast-ssd"
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 800Gi

  pod:
    extraSpec:
      terminationGracePeriodSeconds: 1

  xrd:
    extraConfig: |
      xrootd.redirect {{ include "utils.mgm_fqdn" . }}:1094 chksum
      fstofs.protowfendpoint cta-frontend-grpc:10956
      fstofs.protowfresource /ctafrontend
      fstofs.filemd_handler  attr
      fstofs.protowfusegrpc true
      fstofs.protowfusegrpctls true
      fstofs.jwttokenpath /etc/grid-security/jwt-token-grpc
      tpc.trace  all

  probes:
    liveness: false

  extraEnv:
  - name: TZ
    value: "CET"

  initContainer:
    enabled: true
    script: |
      #!/usr/bin/bash
      /mkcert-ssl.sh
      chown -R daemon:daemon /etc/grid-security/certificates
      cp /etc/grpc-certs/ca.crt /etc/grid-security/certificates

      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
      -H "Content-Type: application/x-www-form-urlencoded" \
      -d "grant_type=password" \
      -d "client_id=admin-cli" \
      -d "username=${KEYCLOAK_ADMIN}" \
      -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
      -s)

      admin_access_token=$(echo ${response} | jq -r .access_token)

      admin_access_token=$(echo ${response} | jq -r .access_token)
      # with this access token, update the client scopes
      dnf install -y jq

      # ## 1. get the client-uuid for grpc-client, get the scope-id for custom-sub
      CLIENT_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients?clientId=grpc-client | jq -r '.[] .id')

      CUSTOM_SCOPE_ID=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      ## 2. Make a PUT request using client id and scope id
      # Check if the scope is already assigned to the client
      EXISTING_SCOPE=$(curl -s \
        -H "Authorization: Bearer $admin_access_token" \
        http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

      if [ -z "$EXISTING_SCOPE" ]; then
        echo "Scope not found on client, adding it..."

        CUSTOM_SCOPE_ID=$(curl -s \
          -H "Authorization: Bearer $admin_access_token" \
          http://auth-keycloak:8080/admin/realms/master/client-scopes | jq -r '.[] | select(.name == "grpc-custom-sub") | .id')

        curl -X PUT http://auth-keycloak:8080/admin/realms/master/clients/${CLIENT_ID}/default-client-scopes/${CUSTOM_SCOPE_ID} \
          -H "Authorization: Bearer $admin_access_token" \
          -H "Content-Type: application/json" \
          -s
      else
        echo "Scope already assigned to client, skipping..."
      fi

      # Obtain an access token with the diskInstanceName set in the "sub" claim
      response=$(curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=grpc-client" \
        -d "username=${KEYCLOAK_ADMIN}" \
        -d "password=${KEYCLOAK_ADMIN_PASSWORD}" \
        -s)

      grpc_access_token=$(echo ${response} | jq -r .access_token)

      printf "$grpc_access_token" > /etc/grid-security/jwt-token-grpc
    spec:
      env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-credentials
              key: password
    volumeMounts:
    - name: grid-security
      mountPath: /etc/grid-security
    - name: grpc-certs
      mountPath: /etc/grpc-certs

  extraVolumes:
    volumeMounts:
    - name: varlog-tmp
      mountPath: /var/log/tmp
    - name: grid-security
      mountPath: /etc/grid-security
      readOnly: true
    volumes:
    - name: varlog-tmp
      emptyDir: {}
    - name: grid-security
      emptyDir: {}
    - name: grpc-certs
      secret:
        secretName: ca-crt

qdb:
  replicaCount: 1

  persistence:
    enabled: true
    storageClass: "fast-ssd"
    # This is a temporary work-around until the bug is fixed in the EOS charts
    pvc:
      storageClass: "fast-ssd"
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 800Gi

  pod:
    extraSpec:
      terminationGracePeriodSeconds: 1

  extraEnv:
  - name: LD_PRELOAD
    value: "/usr/lib64/libjemalloc.so.2"
  - name: TZ
    value: "CET"

  probes:
    liveness: false
