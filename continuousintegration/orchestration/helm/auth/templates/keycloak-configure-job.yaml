{{- $keycloakName := include "keycloak.fullname" . }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-configure-keycloak-job
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": post-install   # Note that we need to be sure the keycloak pod has been started before we do anything with it
    "helm.sh/hook-delete-policy": delete
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 300
  template:
    spec:
      automountServiceAccountToken: false
      restartPolicy: Never
      containers:
        - name: kcadm
          image: {{ .Values.keycloak.image }}
          securityContext:
            allowPrivilegeEscalation: {{ include "common.securityContext.allowPrivilegeEscalation" . }}
          {{- if $.Values.resources }}
          resources:
            {{-  toYaml $.Values.resources | nindent 10 }}
          {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              set -e

              /opt/keycloak/bin/kcadm.sh config credentials \
                --server "http://{{ $keycloakName }}:8080" \
                --realm "master" \
                --user "${KEYCLOAK_ADMIN}" \
                --password "${KEYCLOAK_ADMIN_PASSWORD}"

              /opt/keycloak/bin/kcadm.sh update "realms/{{ .Values.keycloak.realm }}" \
                -s "accessTokenLifespan={{ .Values.keycloak.accessTokenLifespan }}" \
                -s "ssoSessionMaxLifespan={{ .Values.keycloak.ssoSessionMaxLifespan }}"

              echo "Updated accessTokenLifespan to {{ .Values.keycloak.accessTokenLifespan }} seconds."
              echo "Updated ssoSessionMaxLifespan to {{ .Values.keycloak.ssoSessionMaxLifespan }} seconds."

              ## Now we need to create: a new client, a new scope for that client, a new role mapping for that scope

              REALM="master"
              CLIENT_ID="grpc-client"
              CUSTOM_SCOPE_NAME="grpc-custom-sub"
              CUSTOM_ATTRIBUTE="diskInstanceName"

              # Create or get grpc-client
              GRPC_CLIENT_ID=$(/opt/keycloak/bin/kcadm.sh get clients -r master -q clientId=grpc-client --fields id 2>/dev/null | grep '"id"' | head -1 | sed 's/.*"id" : "\([^"]*\)".*/\1/')
              if [ -z "$GRPC_CLIENT_ID" ]; then
                echo "Creating grpc-client..."
                /opt/keycloak/bin/kcadm.sh create clients \
                  -r master \
                  -s clientId="grpc-client" \
                  -s enabled=true \
                  -s publicClient=true \
                  -s directAccessGrantsEnabled=true \
                  -s serviceAccountsEnabled=false \
                  -s standardFlowEnabled=true \
                  -s protocol="openid-connect"
                GRPC_CLIENT_ID=$(/opt/keycloak/bin/kcadm.sh get clients -r master -q clientId=grpc-client --fields id | grep '"id"' | head -1 | sed 's/.*"id" : "\([^"]*\)".*/\1/')
                echo "Created grpc-client (ID: $GRPC_CLIENT_ID)."
              else
                echo "grpc-client already exists (ID: $GRPC_CLIENT_ID)."
              fi

              ## enable unmanaged attributes - this is required to allow us to set a custom diskInstanceName attribute that will override the sub claim
              ##  through a protocol mapper
              /opt/keycloak/bin/kcadm.sh update users/profile -r master -s unmanagedAttributePolicy=ENABLED

              # Set diskInstanceName attribute on admin user (for workflow event tokens with sub='ctaeos')
              ADMIN_USER_ID=$(/opt/keycloak/bin/kcadm.sh get users -r master -q username="${KEYCLOAK_ADMIN}" --fields id | grep '"id"' | head -1 | sed 's/.*"id" : "\([^"]*\)".*/\1/')
              if [ -n "$ADMIN_USER_ID" ]; then
                echo "Setting diskInstanceName attribute for admin user (ID: $ADMIN_USER_ID)..."
                /opt/keycloak/bin/kcadm.sh update users/$ADMIN_USER_ID \
                  -r master \
                  -s 'attributes.diskInstanceName=["ctaeos"]'
                echo "Set diskInstanceName=ctaeos for admin user."
              else
                echo "Admin user not found."
              fi

              # Create or update ctaadmin1 user (for admin command tokens with sub='ctaadmin1')
              CTAADMIN_USER_ID=$(/opt/keycloak/bin/kcadm.sh get users -r master -q username="ctaadmin1" --fields id 2>/dev/null | grep '"id"' | head -1 | sed 's/.*"id" : "\([^"]*\)".*/\1/')
              if [ -z "$CTAADMIN_USER_ID" ]; then
                echo "Creating ctaadmin1 user..."
                /opt/keycloak/bin/kcadm.sh create users -r master \
                  -s username="ctaadmin1" \
                  -s enabled=true \
                  -s 'attributes.diskInstanceName=["ctaadmin1"]'
                # Set password for ctaadmin1
                CTAADMIN_USER_ID=$(/opt/keycloak/bin/kcadm.sh get users -r master -q username="ctaadmin1" --fields id | grep '"id"' | head -1 | sed 's/.*"id" : "\([^"]*\)".*/\1/')
                /opt/keycloak/bin/kcadm.sh set-password -r master --username ctaadmin1 --new-password ctaadmin1
                echo "Created ctaadmin1 user with diskInstanceName=ctaadmin1 and password=ctaadmin1."
              else
                echo "ctaadmin1 user already exists (ID: $CTAADMIN_USER_ID). Updating diskInstanceName..."
                /opt/keycloak/bin/kcadm.sh update users/$CTAADMIN_USER_ID \
                  -r master \
                  -s 'attributes.diskInstanceName=["ctaadmin1"]'
                echo "Set diskInstanceName=ctaadmin1 for ctaadmin1 user."
              fi

              CUSTOM_SCOPE=$(/opt/keycloak/bin/kcadm.sh create client-scopes -r master \
                -s name="grpc-custom-sub" \
                -s description="Custom client scope to override sub claim" \
                -s protocol="openid-connect" \
                -s 'attributes={"include.in.token.scope":"true","display.on.consent.screen":"false"}'
              )
              echo "CUSTOM_SCOPE IS $CUSTOM_SCOPE"
              echo "Attempting to get the scope id of the new scope"
              ## Get the client scope id
              CUSTOM_SCOPE_ID=$(/opt/keycloak/bin/kcadm.sh get client-scopes -r master -q name=grpc-custom-sub --fields id,name --format csv \
                | grep grpc | sed 's/^\("\([^"]*\)\)".*/\2/')
                # we need to specify format csv and grep to get the output in one line, because the -q filtering does not work (perhaps a bug)

              echo "Got the custom scope id, it is $CUSTOM_SCOPE_ID"

              # Create the Protocol Mapper inside that client scope
              echo "Creating new protocol mapper"

              /opt/keycloak/bin/kcadm.sh create client-scopes/$CUSTOM_SCOPE_ID/protocol-mappers/models -r master \
              -s name="custom-sub-mapper" \
              -s protocol="openid-connect" \
              -s protocolMapper="oidc-usermodel-attribute-mapper" \
              -s 'config={
                    "user.attribute":"diskInstanceName",
                    "claim.name":"sub",
                    "jsonType.label":"String",
                    "id.token":"true",
                    "access.token":"true",
                    "access.token.claim":"true",
                    "userinfo.token":"false",
                    "multivalued":"false"
                  }'

              # Assign the custom scope to grpc-client as a default scope
              echo "Assigning custom scope to grpc-client..."
              /opt/keycloak/bin/kcadm.sh update clients/$GRPC_CLIENT_ID/default-client-scopes/$CUSTOM_SCOPE_ID -r master
              echo "Custom scope assigned to grpc-client."

              echo ""
              echo "============================================"
              echo "Keycloak configuration complete!"
              echo "============================================"
              echo ""
              echo "Two token types are available:"
              echo ""
              echo "1. Workflow Event Tokens (sub='ctaeos'):"
              echo "   curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \\"
              echo "     -d 'grant_type=password' \\"
              echo "     -d 'client_id=grpc-client' \\"
              echo "     -d 'username=admin' \\"
              echo "     -d 'password=admin'"
              echo ""
              echo "2. Admin Command Tokens (sub='ctaadmin1'):"
              echo "   curl -X POST http://auth-keycloak:8080/realms/master/protocol/openid-connect/token \\"
              echo "     -d 'grant_type=password' \\"
              echo "     -d 'client_id=grpc-client' \\"
              echo "     -d 'username=ctaadmin1' \\"
              echo "     -d 'password=ctaadmin1'"
              echo ""
              echo "============================================"


          env:
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-admin-credentials
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-admin-credentials
                  key: password
