{{- $schedulerConfig := include "scheduler.config" . | fromYaml -}}
{{- $tapeServers := include "tpsrv.tapeServers" . | fromYaml -}}
{{ include "validate.tapeServers" . }}
{{ range $name,$tapeServerConfig := $tapeServers }}
{{- $tpsrvName := printf "%s-%s" $.Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- $libraryDevice := .libraryDevice -}}
apiVersion: apps/v1
kind: StatefulSet # StatefulSets enforce at most x pods semantics (in our case x=1)
metadata:
  name: {{ $tpsrvName }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
spec:
  serviceName: {{ $tpsrvName }}  # Ensure a headless service exists with this name; allows for stable DNS entries
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $tpsrvName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $tpsrvName }}
        {{- include "common.labels.withoutname" $ | nindent 8 }}
        cta/library-device: {{ .libraryDevice }}
    spec:
      imagePullSecrets:
      {{- include "tpsrv.imagePullSecrets" $ | nindent 6 }}
      {{- if $.Values.pod.extraSpec }}
      {{ $.Values.pod.extraSpec | toYaml | nindent 6 }}
      {{- end }}
      initContainers:
      # Required until https://github.com/kubernetes/kubernetes/issues/81089 is merged
      - name: init1-fix-sss-keytab-ownership
        image: {{ include "common.images.busybox" . }}
        imagePullPolicy: {{ include "common.images.defaultPullPolicy" . }}
        command: ["sh", "-c"]
        args:
        - |
          cp /root/sss_keytab/input/eos.keytab /root/sss_keytab/output/cta-taped.sss.keytab;
          chmod 400 /root/sss_keytab/output/cta-taped.sss.keytab;
          # Make CTA user owner (group 33 is tape)
          chown -R 1000:33 /root/sss_keytab/output/cta-taped.sss.keytab
        volumeMounts:
          - name: eos-sss-keytab
            mountPath: /root/sss_keytab/input/eos.keytab
            subPath: eos.keytab
          - name: eos-sss-keytab-fixedownership
            mountPath: /root/sss_keytab/output
      containers:
      # RMCD container
      - name: cta-rmcd
        image: {{ include "tpsrv.image" $ }}
        imagePullPolicy: {{ include "tpsrv.imagePullPolicy" $ }}
        securityContext:
          allowPrivilegeEscalation: {{ include "common.securityContext.allowPrivilegeEscalation" $ }}
          privileged: {{ include "common.securityContext.privileged" $ }}
        stdin: true
        command: ["bash", "/scripts/rmcd.sh"]
        args: []
        readinessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f /usr/bin/cta-rmcd > /dev/null"]
          initialDelaySeconds: 5
          periodSeconds: 2
          failureThreshold: 60
        env:
        - name: MY_NAME
          value: {{ $tpsrvName }}
        - name: MY_NAMESPACE
          value: {{ $.Release.Namespace | quote }}
        - name: INSTANCE_NAME
          value: {{ $.Release.Namespace | quote }}
        - name: LIBRARY_DEVICE
          value: {{ $libraryDevice | quote }}
        - name: MY_CONTAINER
          value: "rmcd"
        - name: TERM
          value: "xterm"
        {{- with $.Values.extraEnv }}
        {{- include "common.extraEnv" $ | nindent 8 }}
        {{- end }}
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts/rmcd.sh
          subPath: rmcd.sh
        {{ include "common.extraVolumeMounts" $ | nindent 8 }}
      # For each drive, spawn a separate taped container
      {{- range $index, $drive := .drives }}
      - name: "cta-taped-{{ $index }}"
        image: {{ include "tpsrv.image" $ }}
        imagePullPolicy: {{ include "tpsrv.imagePullPolicy" $ }}
        securityContext:
          allowPrivilegeEscalation: {{ include "common.securityContext.allowPrivilegeEscalation" $ }}
          privileged: {{ include "common.securityContext.privileged" $ }}
        command: ["bash", "/scripts/taped.sh"]
        readinessProbe:
          exec:
            command: ["sh", "-c", "pgrep -f /usr/bin/cta-taped > /dev/null"]
          initialDelaySeconds: 5
          periodSeconds: 2
          failureThreshold: 60
        stdin: true
        env:
        - name: MY_NAME
          value: {{ $tpsrvName }}
        - name: MY_NAMESPACE
          value: {{ $.Release.Namespace | quote }}
        - name: INSTANCE_NAME
          value: {{ $.Release.Namespace | quote }}
        - name: MY_CONTAINER
          value: "taped-{{ $index }}"
        - name: TERM
          value: "xterm"
        - name: DRIVE_NAME
          value: {{ $drive.name }}
        - name: DRIVE_DEVICE
          value: {{ $drive.device }}
        - name: LIBRARY_DEVICE
          value: {{ $libraryDevice | quote }}
        - name: SCHEDULER_BACKEND
          value: {{ $schedulerConfig.backend | quote }}
        - name: XrdSecPROTOCOL
          value: sss
        - name: XrdSecSSSKT
          value: /etc/cta/cta-taped.sss.keytab
        {{- with $.Values.extraEnv }}
        {{- include "common.extraEnv" $ | nindent 8 }}
        {{- end }}
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts/taped.sh
          subPath: taped.sh
        - name: cta-taped-config
          mountPath: /etc/cta/cta-taped-{{ $drive.name }}.conf
          subPath: cta-taped-{{ $drive.name }}.conf
        - name: catalogue-config
          mountPath: /etc/cta/cta-catalogue.conf
          subPath: cta-catalogue.conf
        {{- if eq $schedulerConfig.backend "postgres" }}
        - name: scheduler-config
          mountPath: /etc/cta/cta-scheduler.conf
          subPath: cta-scheduler.conf
        {{- else }}
        - name: scheduler-config
          mountPath: /etc/cta/cta-objectstore-tools.conf
          subPath: cta-objectstore-tools.conf
        {{- end }}
        - name: eos-sss-keytab-fixedownership
          mountPath: /etc/cta/cta-taped.sss.keytab
          subPath: cta-taped.sss.keytab
        {{- if eq $schedulerConfig.backend "ceph" }}
        - name: cta-ceph-volume
          mountPath: /etc/ceph/ceph.conf
          subPath: ceph.conf
        - name: cta-ceph-volume
          mountPath: /etc/ceph/ceph.client.{{ $schedulerConfig.cephConfig.id }}.keyring
          subPath: ceph.client.{{ $schedulerConfig.cephConfig.id }}.keyring
        {{- end }}
        {{ include "common.extraVolumeMounts" $ | nindent 8 }}
      {{- end }} # End of containers loop
      volumes:
      - name: scripts-volume
        configMap:
          name: scripts-tpsrv
          defaultMode: 0777
      - name: catalogue-config
        configMap:
          name: cta-catalogue-conf
      {{- if eq $schedulerConfig.backend "postgres" }}
      - name: scheduler-config
        configMap:
          name: cta-scheduler-conf
      {{- else }}
      - name: scheduler-config
        configMap:
          name: cta-objectstore-conf
      {{- end }}
      {{- if eq $schedulerConfig.backend "ceph" }}
      - name: cta-ceph-volume
        configMap:
          name: ceph-conf
      {{- end }}
      {{- range $index, $drive := .drives }} # configmap for each drive in the tape server
      - name: cta-taped-config
        configMap:
          name: cta-taped-{{ lower $drive.name }}-conf
      {{- end }} # End of drive-specific configmaps loop
      - name: eos-sss-keytab
        secret:
          secretName: eos-sss-keytab
      - name: eos-sss-keytab-fixedownership
        emptyDir: {}
      {{ include "common.extraVolumes" $ | nindent 6 }}
---
{{- end }}
