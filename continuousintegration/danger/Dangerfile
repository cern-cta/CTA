# --- Title checks ---

ALLOWED_PREFIXES = %w[
  [CI] [Misc] [Tools] [catalogue]
  [frontend] [scheduler] [taped] [rmcd]
]

unless ALLOWED_PREFIXES.any? { |prefix| gitlab.mr_title.start_with?(prefix) }
  fail("**Invalid Merge Request Title format**\n\nThe title must start with one of the following prefixes:\n`#{ALLOWED_PREFIXES.join('`, `')}`")
end

if gitlab.mr_title.length > 72
  warn("**Merge Request Title Too Long**\n\nThe title is #{gitlab.mr_title.length} characters long. Please try to 1shorten it to 72 or fewer.")
end


# --- Description checks ---



required_checklist_items = [
  "- [x] Documentation reflects the changes made.",
  "- [x] Merge Request title is clear, concise, and suitable as a changelog entry. See [this link](https://cta.docs.cern.ch/latest/dev/contributing/workflow/#changelog)"
]

missing_items = required_checklist_items.reject { |item| gitlab.mr_body.include?(item) }

unless missing_items.empty?
  fail("**Checklist Incomplete**\n\nPlease complete all required items in the merge request checklist before proceeding.")
end

desc = gitlab.mr_body.strip

if desc.empty?
  fail("**Missing Description**\n\nThe merge request description is empty. Please use the provided MR template.")
end

desc_section = desc[/### Description\s+(.+?)### Checklist/m, 1]

if desc_section.nil?
  fail("**Missing Description Section**\n\nCould not find the `Description` section. Please ensure the merge request template is being followed.")
elsif desc_section.include?("<!-- Mandatory: provide a description")
  fail("**Unmodified Description Placeholder**\n\nPlease remove the placeholder comment and describe the changes introduced in this merge request.")
elsif desc_section.strip.length < 40
  warn("**Short Description**\n\nThe content under `Description` appears too brief. Please provide a more complete summary of the changes.")
end

unless gitlab.mr_body.match?(/(Closes|Fixes|Resolves) #\d+/)
  warn("**No Issue Reference Found**\n\nConsider linking this MR to a related issue using `Closes #1234` or similar.")
end


# --- Label checks ---

labels = gitlab.mr_json["labels"] || []

type_labels = labels.select { |l| l.start_with?("type::") }
workflow_labels = labels.select { |l| l.start_with?("workflow::") }
other_labels = labels - (type_labels + workflow_labels)

if type_labels.size != 1
  fail("**Missing `type::` Label**\n\nThis merge request must have a `type::` label (e.g. `type::bug`, `type::addition`).")
end

if workflow_labels.size != 1
  fail("**Missing `workflow::` Label**\n\Please add a `workflow::` label to reflect the current work status.")
end

if other_labels.empty?
  warn("**No Scoping Labels Found**\n\nAdd at least one additional label to indicate the affected component or context.")
end


# --- Assignee check ---

if gitlab.mr_json["assignee"].nil?
  fail("**No Assignee Set**\n\nPlease assign this merge request to a developer.")
end

if gitlab.mr_json["reviewers"].nil? || gitlab.mr_json["reviewers"].empty?
  warn("**No Reviewers Assigned**\n\nConsider assigning one or more reviewers to ensure this MR gets timely feedback.")
end


# --- MR size warnings ---

if git.lines_of_code > 500
  warn("**Large Merge Request**\n\nThis merge request includes over 500 changed lines (#{git.lines_of_code}). Consider splitting it into smaller MRs to improve reviewability.")
end


# --- General message ---

job_url = "#{ENV['CI_PROJECT_URL']}/-/jobs/#{ENV['CI_JOB_ID']}"

markdown <<~MSG
  ## 🤖 This merge request was automatically reviewed by [Danger](https://danger.systems/ruby/)

  Danger helps enforce project standards by performing various automated checks on the merge request.
  Please address all messages before merging.
  If any warning is intentional, acknowledge it by replying to this comment.

  🔁 Retry the [`danger-review`](#{job_url}) job if needed to refresh these results.

  ---
MSG
