.\" $Id: stagein_hsm.man,v 1.12 2002/10/08 07:54:02 jdurand Exp $
.\"
.\" @(#)$RCSfile: stagein_hsm.man,v $ $Revision: 1.12 $ $Date: 2002/10/08 07:54:02 $ CERN IT-DS/HSM Jean-Damien Durand
.\" Copyright (C) 2002 by CERN/IT/DS/HSM
.\" All rights reserved
.\"
.TH STAGEIN_HSM "3" "$Date: 2002/10/08 07:54:02 $" "CASTOR" "Stage Library Functions"
.SH NAME
stagein_hsm \- Asks for one or more HSM files to be staged on disk
.SH SYNOPSIS
.BI "#include <" stage_api.h ">"
.sp
.BI "int stagein_hsm(u_signed64 " flags ,
.BI "int " openflag ,
.BI "char *" hostname ,
.BI "char *" pooluser ,
.BI "int " nstcp_input ,
.BI "struct stgcat_entry *" stcp_input ,
.BI "int *" nstcp_output ,
.BI "struct stgcat_entry **" stcp_output ,
.BI "int " nstpp_input ,
.BI "struct stgpath_entry *" stpp_input ");"

.SH DESCRIPTION
The \fBstagein_hsm\fP API method asks the stager for one or more HSM files to be staged on disk.
There are two ouputs: the default ttys (unless you use \fBstage_setlog\fP, see in the example below) and the output parameters, that are allocated on the fly (e.g. the user will have to free them if necessary/wanted).

.SH PARAMETERS
.TP 1.5i
.I flags
Can be zero or a bit-wise of the following values:
.RS
.TP
.I STAGE_REQID
The member reqid of all 
.I stcp_input
structures given in input must match a known record having exactly this request id. Otherwise, even it is set in the input structures, the reqid member will be ignored when processing the request.
.TP
.I STAGE_DEFERRED
If data is to be recalled from tape, allocation will be differed, e.g. done only when the tape will be positionned.
.TP
.I STAGE_SILENT
Print nothing (the log callback will never be notified neither).
.TP
.I STAGE_NORETRY
If data is to be recalled from tape, and there is a medium error, internal retries by the I/O process doing the recall will be skipped. It does not prevent stager daemon to decide to do a retry, nevertheless. This flag also prevents client to keep retrying in any case. Can be set with environment variable $STAGE_NORETRY to a non\-zero value.
.TP
.I STAGE_NOWAIT
If data is to be recalled from tape, this will be done in the background, and client will get an immediate return with ok status.
.RE
.TP
.I openflags
If it contains O_RDWR or O_WRONLY the file is considered to be opened by an application that want to modify it.
.TP
.I hostname
Gives explicitely the hostname where is the stager daemon. If it NULL, default value apply: either the environment variable $STAGE_HOST, an entry 'STG HOST' in /etc/shift.conf file, or the default "stagepublic".
.TP
.I pooluser
A file allocated in a pool will be stored in a subdirectory 
.I pooluser.
This may also be specified thru the environment variable $STAGE_USER. The default subdirectory name is "stage". 
.I pooluser
must be a valid user name and belong to the same group as the requestor.
.TP
.I nstcp_input
Number of stcp_input entries.
.TP
.I stcp_input
Entries describing the files you want to be staged. Only the member xfile of the structures is mandatory. Other members of interest are:
.RS
.TP
.I size
Gives how many bytes should be allocated rather than the default
.TP
.I poolname
Specify explicitely a disk pool
.LP
Others members should all be setted to zero in order to avoid your request to possibly misbehave. See example below.
.RE
.TP
.I nstcp_output
Filled with the number of staged entries at return.
.TP
.I stcp_output
Filled with the address of an array containg the staged entries at return. Up to the user to free it if necessary.
.TP
.I nstpp_input
Filled with the number of stpp_input entries. If this number is positive it must match the number of stcp_input entries. Otherwise it should be zero.
.TP
.I stpp_input
Array giving the list of link files that will be created each time one of the files described in stcp_input entries is staged on disk. Must be NULL or pointing to 
.I nstpp_input
entries.

.SH EXAMPLE
.ft CW
.nf
.sp
\s-2
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <signal.h>
#include "stage_api.h"
#include "serrno.h"

/* Here is an API version of a recall of multiple HSM files */
/* It will create link files in the temporary directory */
/* with the basename of your HSM files */

/* Usage: program_name hsmfile1 hsmfile2 ... */

void log_callback _PROTO((int, char *));
void cleanup _PROTO((int));
void record_callback _PROTO((struct stgcat_entry *, struct stgpath_entry *));

/* Here because of the cleanup */
int nstpp_input = 0;
struct stgpath_entry *stpp_input = NULL;
int cleanup_mode = 0;

int main(argc,argv)
	int argc;
	char **argv;
{
  u_signed64 flags = STAGE_DEFERRED;
  int nstcp_input;
  struct stgcat_entry *stcp_input;
  int nstcp_output;
  struct stgcat_entry *stcp_output = NULL; /* Important */
  int i;
  char *p;

  if (argc <= 1) {
	  fprintf(stderr,"Usage: %s hsmfile1 [hsmfile [...]]\\n", argv[0]);
	  exit(EXIT_FAILURE);
  }

  nstcp_input = argc-1;
  /* Create room the input structures */
  if ((stcp_input = calloc(nstcp_input,sizeof(struct stgcat_entry))) == NULL) {
	  perror("malloc");
	  exit(EXIT_FAILURE);
  }
  nstpp_input = nstcp_input;
  if ((stpp_input = calloc(nstpp_input,sizeof(struct stgpath_entry))) == NULL) {
	  perror("malloc");
	  free(stcp_input);
	  exit(EXIT_FAILURE);
  }

  /* Fill the stcp_input structures */
  for (i = 1; i <= nstcp_input; i++) {
	  if (strlen(argv[i]) > STAGE_MAX_HSMLENGTH) {
		  fprintf(stderr,"%s: too long\\n", argv[i+1]);
		  free(stcp_input);
		  free(stpp_input);
		  exit(EXIT_FAILURE);
	  }
	  /* Note: u1 is composed of unions - this is not a hasard that */
	  /* u1.h.xfile, u1.m.xfile and u1.d.xfile have the same address */
	  strcpy(stcp_input[i-1].u1.h.xfile, argv[i]);
  }

  /* Fill the stpp_input structures */
  for (i = 1; i <= nstpp_input; i++) {
	  if ((p = strrchr(argv[i],'/')) == NULL) p = argv[i];
	  if ((strlen(p) + strlen("/tmp/")) > (CA_MAXHOSTNAMELEN+MAXPATH)) {
		  fprintf(stderr,"%s: basename too long\\n", argv[i]);
		  free(stcp_input);
		  free(stpp_input);
		  exit(EXIT_FAILURE);
	  }
	  strcpy(stpp_input[i-1].upath, "/tmp");
	  strcat(stpp_input[i-1].upath, p);
  }

  /* In case we control-c, we have to implement the cleanup handler */
#if ! defined(_WIN32)
  signal (SIGHUP, cleanup);
  signal (SIGQUIT, cleanup);
#endif
  signal (SIGINT, cleanup);
  signal (SIGTERM, cleanup);

  /* Let's control totally the output */
  stage_setlog((void (*) _PROTO((int, char *))) &log_callback);

  /* And let's be waked up each time a record is available */
  if (stage_setcallback(&record_callback) != 0) {
	  fprintf(stderr,"stage_setcallback error: %s", sstrerror(serrno));
	  free(stcp_input);
	  free(stpp_input);
	  /* Utility function that converts stage serrno to a program exit code */
	  exit(rc_castor2shift(serrno));
  }

	/* Call the method */
  if (stagein_hsm(/* Preferred allocation mode - make sure it is u_signed64 on the stack */
				  flags,
				  /* We really just want to read them */
				  O_RDONLY,
				  /* Default stager hostname */
				  NULL,
				  /* pooluser - default is "stage" */
				  NULL,
				  /* Number of HSM files */
				  nstcp_input,
				  /* and the records giving the names */
				  stcp_input,
				  /* We are interested to have all records back */
				  /* with daemon modifications */
				  &nstcp_output,
				  &stcp_output,
				  /* And we ask for links */
				  nstpp_input,
				  /* described here */
				  stpp_input
	  ) != 0) {
	  fprintf(stderr,"stagein_hsm error: %s\\n", sstrerror(serrno));
	  /* Avoid unnecessary messaged from the stageclr_link */
	  cleanup_mode = 1;
	  /* Let's be kind and remove the links */
	  /* Stager will otherwise remind them for a long time */
	  for (i = 0; i < nstpp_input; i++) {
		  stageclr_link((u_signed64) 0, NULL, 1, &(stpp_input[i]));
	  }
	  free(stcp_input);
	  free(stpp_input);
	  if (stcp_output != NULL) free(stcp_output); /* Should not be */
	  /* Utility function that converts stage serrno to a program exit code */
	  exit(rc_castor2shift(serrno));
  }

  /* Basically we have done prestaging */

  /* The recommend way to open the file is now rfio_open() on argv[] */
  
  /* We are done */
  /* Let's be kind and remove the links */
  /* Stager will otherwise remind them for a long time */
  for (i = 0; i < nstpp_input; i++) {
	  if (stageclr_link((u_signed64) 0, NULL, 1, &(stpp_input[i])) != 0) {
		  fprintf(stderr,"stageclr_link error: %s\\n", sstrerror(serrno));
	  }
  }

  /* Okay */
  free(stcp_input);
  free(stpp_input);
  if (stcp_output != NULL) free(stcp_output); /* Should not be */
  exit(0);
}

void cleanup(sig)
	int sig;
{
	int i;

	/* Say to stager daemon we have been interrupted - the eventual */
	/* I/O process will then be signalled on the hostname where is */
	/* running the dameon */
	stage_kill(sig);
	/* Avoid unnecessary messaged from the stageclr_link */
	cleanup_mode = 1;
	/* Let's be kind and remove the links */
	/* Stager will otherwise remind them for a long time */
	for (i = 0; i < nstpp_input; i++) {
		stageclr_link((u_signed64) 0, NULL, 1, &(stpp_input[i]));
	}
	exit(EXIT_FAILURE);
}

void log_callback(level,message)
	int level;
	char *message;
{
	if (cleanup_mode) return;

	if (level == MSG_ERR) {
		fprintf(stderr,"MSG_ERR ==> %s",message);
	} else {
		fprintf(stdout,"MSG_OUT ==> %s",message);
		fflush(stdout);
	}
}

void record_callback(stcp,stpp)
	struct stgcat_entry *stcp;
	struct stgpath_entry *stpp;
{
	/* Let's print a dump of the structures */
	if (stcp != NULL) print_stcp(stcp);
	if (stpp != NULL) print_stpp(stpp);
}
\s+2
.ft
.LP
.fi

.SH RETURN VALUE
0 on success, -1 on failure.

.SH ERRORS
If failure, the serrno variable might contain one of the following error codes:
.TP 1.9i
.B SENOMAPFND
Can't open mapping database (Windows only)
.TP
.B EFAULT
Bad address
.TP
.B EINVAL
Invalid argument
.TP
.B ESTGROUP
Invalid group
.TP
.B SECONNDROP
Connection closed by remote end
.TP
.B SECOMERR
Communication error
.TP
.B SEINTERNAL
Internal error
.TP
.B SEUSERUNKN
User unknown
.TP
.B ESTLINKNAME
User link name processing error
.TP
.B SEOPNOTSUP
Operation not supported (should not happen)
.TP
.B ESTMEM
Request too big
.TP
.B ENOENT
No such file or directory
.TP
.B EISDIR
Is a directory
.TP
.B SESYSERR
System error
.TP
.B ESTCLEARED
Request cleared
.TP
.B ESTKILLED
Request killed
.TP
.B ENOSPC
No space left on device
.TP
.B EBUSY
Device or resource busy (can happen if you want to open for modification an HSM file being migrated)
.TP
.B ESTLNKNSUP
Symbolic link not supported
.TP
.B ESTNACT
Stager not active (if you specify the STAGE_NORETRY flag - default is to retry forever)
.TP
.B SENOSHOST
Host not known

.SH NOTES
A poolname other than the default can be specified either with environment variable $STAGE_POOL, or an entry 'STG POOL' in /etc/shift.conf
.LP
It is highly recommended to use the RFIO interface, POSIX compliant, if you want to open one single file. RFIO interface will internally call the stagein_hsm interface.

.SH SEE ALSO
\fBstagein\fP(1), \fBstage_limits\fP(3), \fBCastor_limits\fP(3), \fBstage_setlog\fP(3), \fBstage_setcallback\fP(3), \fBstageclr_link\fP(3), \fBrc_castor2shift\fP(3), \fBstage_kill\fP(3), \fBprint_stcp\fP(3), \fBprint_stpp\fP(3), \fBstage_struct\fP(3), \fBstage_macros\fP(3), \fBstage_constants\fP(3)

.SH AUTHOR
\fBCASTOR\fP Team <castor.support@cern.ch>

