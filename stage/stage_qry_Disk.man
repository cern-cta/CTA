.\" $Id: stage_qry_Disk.man,v 1.1 2002/10/08 13:43:53 jdurand Exp $
.\"
.\" @(#)$RCSfile: stage_qry_Disk.man,v $ $Revision: 1.1 $ $Date: 2002/10/08 13:43:53 $ CERN IT-DS/HSM Jean-Damien Durand
.\" Copyright (C) 2002 by CERN/IT/DS/HSM
.\" All rights reserved
.\"
.TH STAGE_QRY_DISK "3" "$Date: 2002/10/08 13:43:53 $" "CASTOR" "Stage Library Functions"
.SH NAME
stage_qry_Disk \- Query the stager catalog about a DISK file
.SH SYNOPSIS
.BI "#include <" stage_api.h ">"
.sp
.BI "int stage_qry_Disk(u_signed64 " flags ,
.BI "char *" hostname ,
.BI "char *" poolname ,
.BI "char *" filename ,
.BI "int *" nstcp_output ,
.BI "struct stgcat_entry **" stcp_output ,
.BI "int *" nstpp_output ,
.BI "struct stgpath_entry **" stpp_output ");"

.SH DESCRIPTION
The \fBstage_qry_Disk\fP API method queries the stager catalog for a given disk
.I filename.
There are two ouputs: the default ttys (unless you use \fBstage_setlog\fP, see in the example below) and the output parameters, that are allocated on the fly (e.g. the user will have to free them if necessary/wanted). From structures point of view this correspond to values 'a' (allocated) or 'd' (disk) for the 
.BI t_or_d
member of stage structures, c.f. 
.BI "SEE ALSO"
section below.

.SH PARAMETERS
.TP 2.0i
.I flags
Flags that are driving the search in the stager catalog. It can be zero or a bit-wise of the following values:
.RS
.TP
.I STAGE_DUMP
A dump of the found catalog entries is written to the output.
.TP
.I STAGE_ALL
Search over all entries. Default is to restrict to your group.
.TP
.I STAGE_FILENAME
The full disk filename of found catalog entries is written to the output
.TP
.I STAGE_LINKNAME
Only the eventual links to found catalog entries in written to the output
.TP
.I STAGE_LONG
Gives more details for each file: the login name, the group name of the user who requested the initial stage operation, the creation and the date of last access.
.TP
.I STAGE_PATHNAME
Gives the internal path for each found catalog entry.
.TP
.I STAGE_SORTED
List of staged files sorted in ascending order of last access time weighted by file size: W = atime \- (86400 * log (size / 1024)). There are six fields per file: date of last access, time of last access, size in Mbytes, number of accesses, internal path and user path.
.TP
.I STAGE_USER
Restricts the query to files that belong to the requestor.
.TP
.I STAGE_EXTENDED
Adds  two  columns  to  the  output:  they give the request id and the internal pathname.
.TP
.I STAGE_NORETRY
Prevent retry in case of communication failure with the stager daemon. Can be set using environment variable $STAGE_NORETRY with a non-wero value, or an entry 'STG NORETRY' with a non-null value in /etc/shift.conf.
.RE
.TP
.I hostname
Gives explicitely the hostname where is the stager daemon. If it NULL, default value apply: either the environment variable STAGE_HOST, an entry 'STG HOST' in /etc/shift.conf file, or the default "stagepublic".
.TP
.I poolname
Restrict search to a given poolname. Can be NULL.
.TP
.I filename
Gives the explicit filename you want to query for.
.TP
.I nstcp_output
Filled with the number of found records.
.TP
.I stcp_output
Filled with the address of an array containg the found records. Up to the user to free it if necessary.
.TP
.I nstpp_output
Filled with the number of found records.
.TP
.I stpp_output
Filled with the address of an array containg the link records. Only if STAGE_LINKNAME is used. Up to the user to free it if necessary.

.SH EXAMPLE
.ft CW
.nf
.sp
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
#include <stage_api.h>
#include <serrno.h>
     
#define YOUR_FILE_NAME "/etc/shift.conf"
#define VERBOSE 0
      
void stcplog _PROTO((int, char *));
void stcpprint _PROTO((struct stgcat_entry *, struct stgpath_entry *));

int main(argc,argv)
     int argc;
     char **argv;
{
  int nstcp_output;
  struct stgcat_entry *stcp_output = NULL;
  int rc, i, isstaged = 0;
 
  if (stage_setlog(&stcplog) != 0) {
    fprintf(stderr,"### stage_setlog error (%s)\\n", sstrerror(serrno));
    exit(EXIT_FAILURE);
  }
 
  rc = stage_qry_Disk((u_signed64) 0,              /* Flags */
                    NULL,                        /* Hostname */
                    NULL,                        /* Poolname */
                    (argc > 1 ? argv[1] : YOUR_FILE_NAME), /* External filename */
                    &nstcp_output,               /* Nb stcp output */
                    &stcp_output,                /* Stcp output */
                    NULL,                        /* Nb stpp output */
                    NULL);                       /* Stpp output */
  if (rc != 0) {
    fprintf(stderr,"### stage_qry_Disk error (%s)\\n", sstrerror(serrno));
  } else {
    for (i = 0; i < nstcp_output; i++) {
#if VERBOSE
      stcpprint(stcp_output + i, NULL);
#endif
      if (ISSTAGED((&stcp_output[i]))) isstaged++;
    }
  }
  if (stcp_output != NULL) free (stcp_output);   /* User responsability ! */
  
  fprintf(stdout,"%s : Found %d entr%s with the STAGED status\\n",
          (argc > 1 ? argv[1] : YOUR_FILE_NAME),
          isstaged,
          (isstaged > 1) ? "ies" : "y");

  exit(isstaged ? 0 : 1);
}
 
void stcpprint(stcp,stpp)
     struct stgcat_entry *stcp;
     struct stgpath_entry *stpp;
{
  if (stcp != NULL) print_stcp(stcp);
  if (stpp != NULL) print_stpp(stpp);
}
 
void stcplog(level,msg)
     int level;
     char *msg;
{
#if VERBOSE
  fprintf(stdout, "%s", msg);
#endif
}
.ft
.LP
.fi

.SH RETURN VALUE
0 on success, -1 on failure.

.SH ERRORS
If failure, the serrno variable might contain one of the following error codes:
.TP 1.9i
.B SENOMAPFND
Can't open mapping database (Windows only)
.TP
.B EFAULT
Bad address
.TP
.B EINVAL
Invalid argument
.TP
.B ESTGROUP
Invalid group
.TP
.B SECONNDROP
Connection closed by remote end
.TP
.B SECOMERR
Communication error
.TP
.B SEINTERNAL
Internal error
.TP
.B SESYSERR
System error

.SH SEE ALSO
\fBstageqry\fP(1), \fBstage_setlog\fP(3), \fBprint_stcp\fP(3), \fBprint_stpp\fP(3), \fBstage_struct\fP(3), \fBstage_macros\fP(3)

.SH AUTHOR
\fBCASTOR\fP Team <castor.support@cern.ch>

