COMM       @(#)$RCSfile: Imakefile,v $ $Revision: 1.32 $ $Date: 2005/01/19 17:43:06 $ CERN IT-PDP/DM Jean-Philippe Baud
COMM
COMM  Copyright (C) 2000-2002 by CERN/IT/PDP/DM
COMM  All rights reserved
COMM

COMM 		Make CASTOR shared libraries           GENERIC

#include <Library.tmpl>

LIB = InstallLibDir

COMM Archive symbol table entry name
#if __osf__ && __alpha
SYMTABNAM = ________64ELEL_
#else
SYMTABNAM = __.SYMDEF
#endif

COMM Libraries to include in SharedLibraryTargetName(shift)
LIBRARIES0 = $(COMMONLIB) $(RFIOLIB) $(MSGLIB) $(NSLIB) $(STGLIB) $(VMGRLIB) $(UPVLIB) $(RHCLIENTLIB) $(SECURITYLIB) $(RTCOPYLIB) $(VDQMLIB) $(DLFLIB) $(TAPELIB) $(DBLIB) $(MONITORLIB) $(RMCLIB) $(EXPERTLIB) $(RESOURCEMONITORINGLIB)
LIBRARIES1 = $(RHORALIB)
SHLIBREQLIBS1 = $(SHLIBREQLIBS) -L$(ORACLE_HOME)/lib -locci -lclntsh -L.. -lshift

ALL0=SharedLibraryTargetName(shift)
#if BuildOraCpp
ALL1=SharedLibraryTargetName(castorCommonOra)
#endif

#if BuildSecurity

ALLSEC=SharedLibraryTargetName(Csec_plugin_ID)
INSTALLSEC=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_ID))
EXPORTSEC=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_ID))

#if UseGSI
ALLSEC+= SharedLibraryTargetName(Csec_plugin_GSI)
INSTALLSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_GSI))
EXPORTSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_GSI))

#endif

#if UseKRB5
ALLSEC+= SharedLibraryTargetName(Csec_plugin_KRB5)
INSTALLSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_KRB5))
EXPORTSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_KRB5))


#endif

#if UseKRB4
ALLSEC+= SharedLibraryTargetName(Csec_plugin_KRB4)
INSTALLSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_KRB4))
EXPORTSEC+=FileName($(LIB),SharedLibraryTargetName(Csec_plugin_KRB4))


#endif

#endif

all:    $(ALL0) $(ALL1) $(ALLSEC)

INSTALL0=FileName($(LIB),SharedLibraryTargetName(shift))
#if BuildOraCpp
INSTALL1=FileName($(LIB),SharedLibraryTargetName(castorCommonOra))
#endif

install: $(LIB) $(INSTALL0) $(INSTALL1) $(INSTALLSEC)

EXPORT0=$(EXPORTLIB)/SharedLibraryTargetName(shift)
#if BuildOraCpp
EXPORT1=$(EXPORTLIB)/SharedLibraryTargetName(castorCommonOra)
#endif
#if BuildProtoCppStager
EXPORT2=$(EXPORTLIB)/SharedLibraryTargetName(castorProto)
#endif

export: $(EXPORT0) $(EXPORT1) $(EXPORT2) $(EXPORTSEC)

exportman: 

exportshr: 

libshift.sl libshift.so:     $(LIBRARIES0)
	@echo " making $@ in `pwd`"
	@-rm -rf tmp
	@mkdir tmp
	for i in $(LIBRARIES0) ;\
	do (cd tmp; $(AR) x ../$$i; rm -f $(SYMTABNAM)) done
	(cd tmp; $(CXX) $(SHLIBLDFLAGS) -Wl,-soname,libshift.so.__MAJOR_CASTOR_VERSION__ -o ../$@ *.o $(SHLIBREQLIBS))
	@-rm -rf tmp

libcastorCommonOra.so: $(LIBRARIES1)
	@echo " making $@ in `pwd`"
	@-rm -rf tmp
	@mkdir tmp
	@for i in $(LIBRARIES1) ;\
	do (cd tmp; $(AR) x ../$$i; rm -f $(SYMTABNAM)) done
	@(cd tmp; $(CXX) $(SHLIBLDFLAGS) -Wl,-soname,libcastorCommonOra.so.__MAJOR_CASTOR_VERSION__ -o ../$@ *.o $(SHLIBREQLIBS1))
	@-rm -rf tmp

shift.dll:	$(LIBRARIES0)
	@echo  making $@ in CurDir
	link /dll /noentry /nologo /out:$@ $**

libcastorCommonOra.dll:	$(LIBRARIES1)
	@echo  making $@ in CurDir
	link /dll /noentry /nologo /out:$@ $**

MakeDir($(LIB),root,bin,0755)

InstallSharedLibrary(shift,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(LIB))
InstallSharedLibrary(castorCommonOra,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(LIB))
InstallSharedLibrary(castorProto,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(LIB))

InstallSharedLibrary(shift,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(EXPORTLIB))
InstallSharedLibrary(castorCommonOra,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(EXPORTLIB))
InstallSharedLibrary(castorProto,__MAJOR_CASTOR_VERSION__,__MINOR_CASTOR_VERSION__,$(EXPORTLIB))

install.man:

#if _WIN32
clean:
	@echo cleaning in CurDir
	-@RemoveFiles(FilesToClean)
#else
clean:
	@echo cleaning in CurDir
	-@RemoveFiles(FilesToClean)
	-@rm -rf tmp > /dev/null 2>&1
#endif
clobber:        clean

Makefiles:

MakeDepLibrary(common,common)

MakeDepLibrary(rfio,rfio)

MakeDepLibrary(msg,msg)

MakeDepLibrary(ns,ns)

MakeDepLibrary(stager,stager)

MakeDepLibrary(resourcemonitoring,resourcemonitoring)

MakeDepLibrary(vmgr,vmgr)

MakeDepLibrary(upv,upv)

MakeDepLibrary(castor,castorClient)

MakeDepLibrary(castor/proto,castorProto)

MakeDepLibrary(rtcopy,rtcpapi)

MakeDepLibrary(vdqm,vdqmapi)

MakeDepLibrary(dlf,dlf)

MakeDepLibrary(tape,tape)

MakeDepLibrary(castor/db/ora,castorCommonOra)

MakeDepLibrary(expert,expert)

MakeDepLibrary(db,db)

MakeDepLibrary(monitor,monitor)

MakeDepLibrary(rmc,rmc)

#if BuildSecurity
MakeDepLibrary(security,security)

MakeDepSharedLibrary(security,Csec_plugin_ID)

SharedLibraryTargetName(Csec_plugin_ID): DepSharedLibraryTargetName(security,Csec_plugin_ID)
		$(CP) DepSharedLibraryTargetName(security,Csec_plugin_ID) ../shlib	

#if UseGSI
MakeDepSharedLibrary(security,Csec_plugin_GSI)

SharedLibraryTargetName(Csec_plugin_GSI): DepSharedLibraryTargetName(security,Csec_plugin_GSI)
		$(CP) DepSharedLibraryTargetName(security,Csec_plugin_GSI) ../shlib	
#endif
#if UseKRB5
MakeDepSharedLibrary(security,Csec_plugin_KRB5)

SharedLibraryTargetName(Csec_plugin_KRB5): DepSharedLibraryTargetName(security,Csec_plugin_KRB5)
		$(CP) DepSharedLibraryTargetName(security,Csec_plugin_KRB5) ../shlib	

#endif
#if UseKRB4

MakeDepSharedLibrary(security,Csec_plugin_KRB4)

SharedLibraryTargetName(Csec_plugin_KRB4): DepSharedLibraryTargetName(security,Csec_plugin_KRB4)
		$(CP) DepSharedLibraryTargetName(security,Csec_plugin_KRB4) ../shlib	

#endif
#endif


FORCE:

