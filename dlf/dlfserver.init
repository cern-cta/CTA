#! /bin/sh
#
#/******************************************************************************
#                      dlfserver.init
#
# This file is part of the Castor project.
# See http://castor.web.cern.ch/castor
#
# Copyright (C) 2003  CERN
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# @(#)$RCSfile: dlfserver.init,v $ $Revision: 1.17 $ $Release$ $Date: 2007/11/22 11:02:02 $ $Author: waldron $
#
# chkconfig: 345 67 38
# description: Distributed Logging Facility Initialisation Script
#
# @author castor dev team
#*****************************************************************************/

# Source function library.
. /etc/rc.d/init.d/functions

# Variables
prog="dlfserver"
RETVAL=0

# Source sysconfig files
if [ -f /etc/sysconfig/castor ]; then
	. /etc/sysconfig/castor
fi
if [ -f /etc/sysconfig/$prog ]; then
	. /etc/sysconfig/$prog
fi

start() {
	# Run daemon
	echo -n $"Starting $prog: "

        # Check if daemon is already running
        if [ -e /var/lock/subsys/$prog ]; then
                if [ -n "`/sbin/pidof $prog`" ]; then
                        echo -n $"already running"
                        failure
                        echo
                        return 1
                fi
        fi

	daemon /usr/bin/$prog $DLFSERVER_OPTIONS

	# Write the pid to a file.
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		pid=`ps -eo pid,ppid,comm | egrep " 1 $prog\$" | awk '{print $1}'`
		rm -f /var/run/$prog.pid
		if [ -n "$pid" ]; then
		    echo $pid > /var/run/$prog.pid
			RETVAL=0
		else
			RETVAL=1
		fi
	fi

	[ $RETVAL -eq 0 ] && success $"$base startup" || failure $"$base startup"
	echo
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
	return $RETVAL
}

stop() {
	echo -n $"Stopping $prog: "
	killproc $prog
	
	RETVAL=$?
	echo
	[ -f /var/lock/subsys/$prog ] && rm -f /var/lock/subsys/$prog
	[ -f /var/run/$prog.pid ] && rm -f /var/run/$prog.pid
	return $RETVAL	
}

reload() {
	echo -n $"Reloading $prog: "
	killproc $prog -HUP
	RETVAL=$?
	echo
}

restart() {
	stop
        start 
}

# See how we were called
case "$1" in
	
	start)
		start
		;;
	stop)
		stop
		;;
	status)
		status $prog
		RETVAL=$?
		;;
	reload)
		reload
		;;
	restart)
		restart
		;;
	condrestart)
		[ -f /var/lock/subsys/$prog ] && restart || :
		;;
	*)
		echo $"Usage: $0 {start|stop|status|reload|restart|condrestart}"
		exit 1
esac

exit $RETVAL
