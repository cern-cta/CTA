#!/usr/bin/python
#/******************************************************************************
# *                      printdiskserver
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing data concerning the given disk server(s)'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [-f|--filesystems] <diskpool>|<datapool>|<diskServerName> [...]]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hvfd:', ['help', 'verbose', 'filesystems='])
except Exception, e:
    print e
    usage(1)

verbose = False
displayFS = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    elif f == '-f' or f == '--filesystems':
        displayFS = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
targets = None
if len(args) != 0:
    targets = set(args)

def sqlRowToPrintRow(sqlrow, displayFS):
    try:
        dsname, fsmountpoint, nbmountpoints, status, hwOnline, free, \
          minfree, maxfree, size, nbrd, nbwr, nbmigr, nbrec, diskpools, dsid, summary = sqlrow
        if displayFS:
            return (dsname or '', fsmountpoint or '',
                    status or '', hwOnline or '',
                    castor_tools.nbToDataAmount(free),
                    minfree, maxfree, castor_tools.printPercentage(free or 0, size or 0),
                    castor_tools.nbToDataAmount(size), nbrd, nbwr, nbmigr, nbrec,
                    ','.join(diskpools), dsid or '')
        else:
            return (dsname or '', nbmountpoints,
                    status or '', hwOnline or '',
                    castor_tools.nbToDataAmount(free),
                    minfree, maxfree, castor_tools.printPercentage(free or 0, size or 0),
                    castor_tools.nbToDataAmount(size), nbrd, nbwr, nbmigr, nbrec,
                    ','.join(diskpools), dsid or '')
    except ValueError:
        print 'No diskserver found'
        return None

def getFSRelatedItems(diskServerIds, diskPoolIds):
    # build statement for filesystem based pools/diskservers
    sqlStatement = '''
    SELECT CASE WHEN GROUPING(DiskServer.name) = 1
                THEN TO_CHAR(COUNT(UNIQUE DiskServer.name))
                ELSE CASE WHEN GROUPING(FileSystem.mountPoint) = 1
                          THEN DiskServer.name
                          ELSE ''
                     END
                END name,
           CASE WHEN GROUPING(DiskServer.name) = 1
                THEN TO_CHAR(COUNT(FileSystem.mountPoint))
                ELSE FileSystem.mountPoint
                END mountPoint,
           COUNT(FileSystem.mountPoint),
           CASE WHEN GROUPING(DiskServer.name) = 1 THEN ''
                ELSE CASE WHEN GROUPING(FileSystem.mountPoint) = 1
                          THEN MIN(decode(DrainingJob.id,
                                          NULL, getObjStatusName('DiskServer','status', DiskServer.status),
                                          'DISKSERVER_ACTIVEDRAIN'))
                          ELSE MIN(decode(DrainingJob.id,
                                          NULL, getObjStatusName('FileSystem','status', FileSystem.status),
                                          'FILESYSTEM_ACTIVEDRAIN'))
                     END
                END status,
           CASE WHEN GROUPING(DiskServer.name) = 1 THEN ''
                ELSE CASE WHEN MIN(Diskserver.hwOnline) = 1 THEN 'YES' ELSE 'NO' END
                END hwOnline,
           SUM(FileSystem.free),
           TO_CHAR(ROUND(100*MIN(FileSystem.minAllowedFreeSpace),2))||'%',
           TO_CHAR(ROUND(100*MAX(FileSystem.maxFreeSpace),2))||'%',
           SUM(FileSystem.totalSize), SUM(FileSystem.nbReadStreams), SUM(FileSystem.nbWriteStreams),
           SUM(FileSystem.nbMigratorStreams), SUM(FileSystem.nbRecallerStreams),
           CAST(COLLECT(DISTINCT DiskPool.name) AS strListTable) AS names,
           CASE WHEN GROUPING(DiskServer.name) = 1 THEN ''
                ELSE CASE WHEN GROUPING(FileSystem.mountPoint) = 1
                          THEN TO_CHAR(MIN(Diskserver.id))
                          ELSE TO_CHAR(MIN(FileSystem.id))
                     END
                END id,
           GROUPING(DiskServer.name)
      FROM DiskServer, FileSystem, DiskPool, DrainingJob
     WHERE DiskServer.id = FileSystem.diskServer(+)
       AND FileSystem.diskPool = DiskPool.id (+)
       AND FileSystem.id = DrainingJob.fileSystem (+)
       AND (DiskServer.dataPool IS NULL OR
            EXISTS (SELECT 1 FROM FileSystem WHERE diskserver=DiskServer.id))'''
    if diskServerIds or diskPoolIds:
        sqlStatement += 'AND ('
        if diskServerIds:
            sqlStatement += 'DiskServer.id IN (' + ', '.join([str(x) for x in diskServerIds]) + ')'
        if diskPoolIds:
            if diskServerIds:
                sqlStatement += ' OR '
            sqlStatement += 'FileSystem.diskPool IN (' + ', '.join([str(x) for x in diskPoolIds]) + ')'
        sqlStatement += ')'
    sqlStatement += '''
     GROUP BY GROUPING SETS ((DiskServer.name, FileSystem.mountPoint),
           (DiskServer.name), ())
     ORDER BY DiskServer.name, grouping(DiskServer.name), grouping(FileSystem.mountPoint) DESC'''
    stcur.execute(sqlStatement)    
    # get results
    return stcur.fetchall()

def getDataPoolRelatedData(diskServerIds, dataPoolIds):
    # build statement for diskServers in dataPools
    sqlStatement = '''
    SELECT DiskServer.name,
           getObjStatusName('DiskServer','status', Diskserver.status) status,
           CASE WHEN Diskserver.hwOnline = 1 THEN 'YES' ELSE 'NO' END hwOnline,
           CAST(COLLECT(DISTINCT DataPool.name) AS strListTable) AS names,
           Diskserver.id
      FROM DiskServer, DataPool
     WHERE DiskServer.dataPool = DataPool.id'''
    if diskServerIds or dataPoolIds:
        sqlStatement += ' AND ('
        if dataPoolIds:
            sqlStatement += 'DiskServer.dataPool IN (' + \
                            ', '.join([str(x) for x in dataPoolIds]) + ')'
        if diskServerIds:
            if dataPoolIds:
                sqlStatement += ' OR '
            sqlStatement += 'DiskServer.id IN (' + \
                            ', '.join([str(x) for x in diskServerIds]) + ')'
        sqlStatement += ')'
    sqlStatement += '''
     GROUP BY DiskServer.name, DiskServer.status, Diskserver.hwOnline, Diskserver.id
     ORDER BY DiskServer.name DESC'''
    stcur.execute(sqlStatement)
    # get results
    DSRows = stcur.fetchall()
    # Get pools details
    sqlStatement = '''SELECT SUM(free), SUM(totalSize),
                             CAST(COLLECT(name) AS strListTable) FROM DataPool'''
    if dataPoolIds:
        sqlStatement += ' WHERE id IN (' + ', '.join([str(x) for x in dataPoolIds]) + ') '
    stcur.execute(sqlStatement)
    dataPoolFree, dataPoolSpace, dataPools = stcur.fetchone()
    return DSRows, dataPoolFree, dataPoolSpace, dataPools

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    diskPoolIds = []
    dataPoolIds = []
    diskServerIds = []
    if targets:
        # check diskpools
        sqlStatement = 'SELECT id, name FROM DiskPool WHERE name = :dpname'
        diskPools = set([])
        for target in targets:
            stcur.execute(sqlStatement, dpname=target)
            row = stcur.fetchone()
            if row:
                diskPoolIds.append(row[0])
                diskPools.add(row[1])
        # check datapools
        sqlStatement = 'SELECT id, name FROM DataPool WHERE name = :dpname'
        dataPools = set([])
        for target in targets:
            stcur.execute(sqlStatement, dpname=target)
            row = stcur.fetchone()
            if row:
                dataPoolIds.append(row[0])
                dataPools.add(row[1])
        # check diskservers
        sqlStatement = 'SELECT id, name FROM DiskServer WHERE name = :dsname'
        diskServers = set([])
        for target in targets:
            stcur.execute(sqlStatement, dsname=target)
            row = stcur.fetchone()
            if row:
                diskServerIds.append(row[0])
                diskServers.add(row[1])
        unknownTargets = targets - diskPools - dataPools - diskServers
        if not diskPools and not dataPools and not diskServers:
            print 'None of the provided diskpools/datapools/diskservers could be found. Giving up'
            usage(1)
    # get filesystem related list
    FSRows = []
    if diskServerIds or diskPoolIds or not dataPoolIds:
        FSRows = getFSRelatedItems(diskServerIds, diskPoolIds)
    # get datapool related data
    DSRows = []
    if dataPoolIds or diskServerIds or not diskPoolIds:
        DSRows, dataPoolFree, dataPoolSpace, dataPools = getDataPoolRelatedData(diskServerIds, dataPoolIds)
    # loop over disk pools and print them    
    data = []
    summary = []
    if displayFS:
        titles = ('DSNAME', 'MOUNTPOINT', 'STATUS', 'ONLINE', 'FREE', 'MINFREE', 'MAXFREE',
                  '%FREE', 'SIZE', 'NBRD', 'NBWR', 'NBMIGR', 'NBREC', 'POOL', 'ID')
    else:
        titles = ('DSNAME', 'NBMOUNTPOINTS', 'STATUS', 'ONLINE', 'FREE', 'MINFREE', 'MAXFREE',
                  '%FREE', 'SIZE', 'NBRD', 'NBWR', 'NBMIGR', 'NBREC', 'POOL', 'ID')
    if FSRows:
        summary = FSRows[-1]
        if displayFS:
            data = [sqlRowToPrintRow(row, True) for row in FSRows[:-1]
                    if row[-1] or row[0] or row[1]]
        else:
            data = [sqlRowToPrintRow(row, False) for row in FSRows[:-1]
                    if (not row[1] and row[0]) or row[-1]]
    if DSRows:
        if summary:
            summary = [c for c in summary]
            summary[0] = str(int(summary[0])+len(DSRows))
            summary[5] += dataPoolFree
            summary[8] += dataPoolSpace
            summary[-3] += dataPools
        else:
            summary = ('', '', 0, '', '', dataPoolFree, '', '',
                       dataPoolSpace, 0, 0, 0, 0, dataPools, '', '')
        data.extend([(dsname, '', status, hwOnline, '-') + 
                      ('-', '-', '-', '-', '-', '-', '-', '-',
                      ','.join(datapools), dsid)
                     for dsname, status, hwOnline, datapools, dsid in DSRows])
    summary = sqlRowToPrintRow(summary, displayFS)
    data.append(summary)
    if FSRows or DSRows:
        castor_tools.prettyPrintTable(titles, data, hasSummary=True)
    # mention unknown targets
    if targets and unknownTargets:
        print 'WARNING : the following diskpools/datapools/diskservers do not exist : ' + ', '.join(unknownTargets)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
