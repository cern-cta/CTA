#!/usr/bin/python
#/******************************************************************************
# *                      modifyrecalluser
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author castor dev team
# *****************************************************************************/

'''allows to modify the mapping of a recall user in the castor stager'''

import sys, re, os, grp
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] (<userName>|<uid>) <newRecallGroup>\n' + \
          '        ' + sys.argv[0] + ' [-h|--help] (<userName>|<uid>)?:(<groupName>|<gid>) <newRecallGroup>\n'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
if len(args) < 2:
    print "Missing arguments"
    usage(1)
elif len(args) > 2:
    print "Too many arguments"
    usage(1)
try:
    uid, gid = castor_tools.parseUser(args[0])
except castor_tools.ParsingError, e:
    print e
    usage(1)
recallGroup = args[1]

try:
    # connect to stager
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    # check that the recall group exists
    stcur.execute('SELECT id FROM RecallGroup WHERE name=:name', name=recallGroup)
    rows = stcur.fetchall()
    if len(rows) == 0:
        print 'RecallGroup %s does not exist in the stager DB' % recallGroup
        print 'You may want to use enterRecallGroup to create it first'
        sys.exit(1)
    recallGroupId = rows[0][0]
    # get info on user running this command
    lasteditor = castor_tools.getCurrentUsername()
    # check that the entry exists and update it
    if uid != None:
        stcur.execute('''UPDATE RecallUser
                            SET recallGroup = :recallGroup,
                                lastEditor = :lasteditor,
                                lastEditionTime = gettime()
                          WHERE euid=:euid AND egid=:egid''',
                      recallGroup=recallGroupId, lasteditor=lasteditor, euid=uid, egid=gid)
        if stcur.rowcount == 0:
            print 'Could not find the specified RecallUser'
            sys.exit(1)
    else:
        stcur.execute('''UPDATE RecallUser
                            SET recallGroup = :recallGroup,
                                lastEditor = :lasteditor,
                                lastEditionTime = gettime()
                          WHERE euid IS NULL AND egid=:egid''',
                      recallGroup=recallGroupId, lasteditor=lasteditor, egid=gid)
        if stcur.rowcount == 0:
            print 'Could not find the specified RecallUser'
            print 'Note that you cannot modify several recall users in one go by only specifying their group'
            sys.exit(1)
    stconn.commit()
    print 'modified recall user successfully'
    # close DB connection
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
