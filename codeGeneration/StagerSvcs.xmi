<?xml version="1.0" encoding="UTF-8"?>
<XMI xmlns:UML="org.omg/standards/UML" verified="false" timestamp="" xmi.version="1.2" >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://uml.sf.net</XMI.exporter>
   <XMI.exporterVersion>1.2.90</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.model xmi.name="umbrelloHPUv7a" href="/tmp/kde-glp/umbrelloHPUv7a.tmp" />
  <XMI.metamodel xmi.name="UML" href="UML.xml" xmi.version="1.3" />
 </XMI.header>
 <XMI.content>
  <UML:Model>
   <UML:Stereotype visibility="public" xmi.id="115412" name="datatype" />
   <UML:Stereotype visibility="public" xmi.id="115421" name="interface" />
   <UML:Stereotype visibility="public" xmi.id="115687" name="typedef" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115411" name="int" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115413" name="char" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115414" name="bool" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115415" name="float" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115416" name="double" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115417" name="long" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115418" name="short" />
   <UML:DataType stereotype="115412" visibility="public" xmi.id="115419" name="string" />
   <UML:Class visibility="public" xmi.id="115440" name="OraCommonSvc" />
   <UML:Class visibility="public" xmi.id="115442" name="OraQuerySvc" />
   <UML:Class visibility="public" xmi.id="115445" name="OraStagerSvc" />
   <UML:Class visibility="public" xmi.id="115448" name="OraGCSvc" />
   <UML:Class visibility="public" xmi.id="115449" name="OraJobSvc" />
   <UML:Class visibility="public" xmi.id="115450" name="OraFSSvc" />
   <UML:Class visibility="public" xmi.id="115451" name="OraTapeSvc" />
   <UML:Class visibility="public" xmi.id="115460" name="OraVdqmSvc" />
   <UML:Package visibility="public" xmi.id="115467" name="castor" >
    <UML:Package visibility="public" xmi.id="115468" name="stager" >
     <UML:Interface stereotype="115421" comment="This class provides specific stager methods and includes
scheduler and error related methods" visibility="public" xmi.id="115422" isAbstract="true" name="IStagerSvc" >
      <UML:Operation comment="Selects the next SubRequest the stager should deal with.
Selects a SubRequest in START, RESTART or RETRY status
and move its status to SUBREQUEST_WAITSCHED to avoid
double processing.
The selection is restricted to SubRequest associated to
requests of a given set of types.
@param types the list of accepted types for the request
associated to the returned subrequest
@return the SubRequest to process
@exception Exception in case of error" visibility="public" xmi.id="115469" type="castor::stager::SubRequest*" isAbstract="true" name="subRequestToDo" >
       <UML:Parameter visibility="public" xmi.id="115470" value="" type="std::vector&lt; ObjectsIds >&amp;" name="types" />
      </UML:Operation>
      <UML:Operation comment="Selects the next SubRequest in FAILED status the stager
should deal with.
Selects a SubRequest in FAILED status and move its status
to FAILED_ANSWERING to avoid double processing.
@return the SubRequest to process
@exception Exception in case of error" visibility="public" xmi.id="115471" type="castor::stager::SubRequest*" isAbstract="true" name="subRequestFailedToDo" />
      <UML:Operation comment="Decides whether a SubRequest should be scheduled.
Looks at all diskCopies for the file a SubRequest
deals with and depending on them, decides whether
to schedule the SubRequest. In case it can be scheduled,
also returns a list of diskcopies available to the
subrequest.
The scheduling decision is taken this way :
  - if no diskCopy is found, return true (scheduling
for tape recall) and sources stays empty.
  - if some diskcopies are found but all in WAIT*
status, return false (no schedule) and link the SubRequest
to the one we're waiting on + set its status to
SUBREQUEST_WAITSUBREQ. Sources stays empty.
  - if some diskcopies are found in STAGED/STAGEOUT
status, return true and list them in sources.
@param subreq the SubRequest to consider
@param sources this is a list of DiskCopies that
can be used by the subrequest.
Note that the DiskCopies returned in sources must be
deallocated by the caller.
@return whether to schedule it
@exception Exception in case of error" visibility="public" xmi.id="115472" type="bool" isAbstract="true" name="isSubRequestToSchedule" >
       <UML:Parameter visibility="public" xmi.id="115473" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115474" value="" type="std::list&lt; castor :: stager :: DiskCopyForRecall * >&amp;" name="sources" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a CastorFile from the database based on its fileId
and name server. Creates a new one if none if found.
Caller is in charge of the deletion of the allocated object
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@param svcClass the service class of the castor file.
Used only in case of creation of a new castor file.
@param fileClass the file class of the castor file.
Used only in case of creation of a new castor file.
@param fileSize the size fo the castor file.
Used only in case of creation of a new castor file.
@return the CastorFile, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115475" type="castor::stager::CastorFile*" isAbstract="true" name="selectCastorFile" >
       <UML:Parameter visibility="public" xmi.id="115476" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115477" value="" type="const std::string" name="nsHost" />
       <UML:Parameter visibility="public" xmi.id="115478" value="" type="u_signed64" name="svcClass" />
       <UML:Parameter visibility="public" xmi.id="115479" value="" type="u_signed64" name="fileClass" />
       <UML:Parameter visibility="public" xmi.id="115480" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Updates a SubRequest status in the DB, including
the answered flag that is set to 1 and tells
whether the request to which it belongs still
has some other SubRequests that were not processed.
By not processed we mean that their &quot;answered&quot; flag
is not set AND their status is neither READY neither
FINISHED nor one of the FAILED* status.
The two operations are executed atomically.
The update is commited before returning.
This method should only be called when the calling
process is answering to the client. In other cases,
the updateRep method should be used.
@param subreq the SubRequest to update
@return whether there are still SubRequests in
SUBREQUEST_START status within the same request
@exception Exception in case of error" visibility="public" xmi.id="115481" type="bool" isAbstract="true" name="updateAndCheckSubRequest" >
       <UML:Parameter visibility="public" xmi.id="115482" value="" type="castor::stager::SubRequest*" name="subreq" />
      </UML:Operation>
      <UML:Operation comment="Recreates a castorFile.
Depending on the context, this method cleans up the
database when a castor file is recreated or gets
the unique DiskCopy of a castor file.
When called in the context of a Put inside a
PrepareToPut, the method returns the unique DiskCopy
associated to the castorFile. This DiskCopy can be
either in WAITFS, WAITFS_SCHEDULING or STAGEOUT
status and is linked to the SubRequest.
In all others cases, the method first
checks whether the recreation is possible.
A recreation is considered to be possible if
no TapeCopy of the given file is in TAPECOPY_SELECTED
status and no DiskCopy of the file is in either
WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or
WAITDISK2DISKCOPY status. When recreation is not
possible, a null pointer is returned.
Else, all DiskCopies for the given file are marked
INVALID (that is those not in DISKCOPY_FAILED and
DISKCOPY_DELETED status) and all TapeCopies are
deleted. A new DiskCopy is then created in
DISKCOPY_WAITFS status, linked to the given
SubRequest returned.
Note that everything is commited and that the caller
is responsible for the deletion of the returned
DiskCopy (if any)
@param castorFile the file to recreate
@param subreq the SubRequest recreating the file
@return the new DiskCopy in DISKCOPY_WAITFS status
or null if recreation is not possible
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115483" type="castor::stager::DiskCopyForRecall*" isAbstract="true" name="recreateCastorFile" >
       <UML:Parameter visibility="public" xmi.id="115484" value="" type="castor::stager::CastorFile*" name="castorFile" />
       <UML:Parameter visibility="public" xmi.id="115485" value="" type="castor::stager::SubRequest*" name="subreq" />
      </UML:Operation>
      <UML:Operation comment="Selects a machine and FileSystem for a given job.
@param fileSystems the list of allowed filesystems
according to job requirements (given by id). This
is the fileSystems' mountPoint, the corresponding
machines are given by parameter machines.
A null array means that any filesystem is eligible
@param machines the machines on which the filesystems
in parameter fileSystems reside.
A null array means that any machine is eligible. in such
a case, fileSystems has to be null.
@param minFree the minimum free space needed on each
filesystem to be selected. This is filesystem dependent
if filesystems are given (due to possible reservations
of the scheduler).
If no filesystem are given, this array must have
exactely one item, used for all filesystems.
@param fileSystemsNb the length of the arrays
fileSystems, machines and minFree when they are not
null (and if filesystems are given for minFree)
@mountPoint the selected fileSystem's mountPoint
@diskServer the diskServer on which the selected
fileSystem resides.
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115486" type="void" isAbstract="true" name="bestFileSystemForJob" >
       <UML:Parameter visibility="public" xmi.id="115487" value="" type="char**" name="fileSystems" />
       <UML:Parameter visibility="public" xmi.id="115488" value="" type="char**" name="machines" />
       <UML:Parameter visibility="public" xmi.id="115489" value="" type="u_signed64*" name="minFree" />
       <UML:Parameter visibility="public" xmi.id="115490" value="" type="unsigned int" name="fileSystemsNb" />
       <UML:Parameter visibility="public" xmi.id="115491" value="" type="std::string*" name="mountPoint" />
       <UML:Parameter visibility="public" xmi.id="115492" value="" type="std::string*" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Updates a filesystem state (e.g : weight,
fsdeviation) to take into account the opening of
a new job.
@param fileSystem the file system mount point
@param diskServer the name of the diskserver
where the filesystem resides
@param fileSize the (supposed) size of the file
to be written by the job
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115493" type="void" isAbstract="true" name="updateFileSystemForJob" >
       <UML:Parameter visibility="public" xmi.id="115494" value="" type="std::string" name="fileSystem" />
       <UML:Parameter visibility="public" xmi.id="115495" value="" type="std::string" name="diskServer" />
       <UML:Parameter visibility="public" xmi.id="115496" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Archives a SubRequest
The SubRequest and potentially the corresponding
Request will thus be removed from the DataBase
@param subReqId the id of the SubRequest to archive" visibility="public" xmi.id="115497" type="void" isAbstract="true" name="archiveSubReq" >
       <UML:Parameter visibility="public" xmi.id="115498" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Implements a single file stageRelease.
It throws a Busy exception in case the file is
used by any request or is waiting for migration.
Otherwise, it marks all the copies of the file
as candidate for the garbage collection.
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@exception in case of error or if the file is busy" visibility="public" xmi.id="115499" type="void" isAbstract="true" name="stageRelease" >
       <UML:Parameter visibility="public" xmi.id="115500" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115501" value="" type="const std::string" name="nsHost" />
      </UML:Operation>
      <UML:Operation comment="Implements a single file stageRm.
It throws a Busy exception in case the file is
beging migrated. Otherwise, it deletes all
running requests for the file and marks all
the copies of the file as candidate for the
garbage collection.
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@exception in case of error or if the file is busy" visibility="public" xmi.id="115502" type="void" isAbstract="true" name="stageRm" >
       <UML:Parameter visibility="public" xmi.id="115503" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115504" value="" type="const std::string" name="nsHost" />
      </UML:Operation>
     </UML:Interface>
     <UML:Interface stereotype="115421" comment="This class provides common methods useful to the stager to
deal with database queries" visibility="public" xmi.id="115420" isAbstract="true" name="ICommonSvc" >
      <UML:Operation comment="Retrieves a SvcClass from the database based on its name.
Caller is in charge of the deletion of the allocated object
@param name the name of the SvcClass
@return the SvcClass, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115506" type="castor::stager::SvcClass*" isAbstract="true" name="selectSvcClass" >
       <UML:Parameter visibility="public" xmi.id="115507" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a FileClass from the database based on its name.
Caller is in charge of the deletion of the allocated object
@param name the name of the FileClass
@return the FileClass, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115508" type="castor::stager::FileClass*" isAbstract="true" name="selectFileClass" >
       <UML:Parameter visibility="public" xmi.id="115509" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a FileSystem from the database based on its
mount point and diskServer name. Keeps a lock on it.
Caller is in charge of the deletion of the allocated
objects, including the DiskServer Object
@param mountPoint the mountPoint of the FileSystem
@param diskServer the name of the disk server hosting this file system
@return the FileSystem linked to its DiskServer, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115510" type="castor::stager::FileSystem*" isAbstract="true" name="selectFileSystem" >
       <UML:Parameter visibility="public" xmi.id="115511" value="" type="const std::string" name="mountPoint" />
       <UML:Parameter visibility="public" xmi.id="115512" value="" type="const std::string" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a tape from the database based on its vid,
side and tpmode. If no tape is found, creates one.
Note that this method creates a lock on the row of the
given tape and does not release it. It is the
responsability of the caller to commit the transaction.
The caller is also responsible for the deletion of the
allocated object
@param vid the vid of the tape
@param side the side of the tape
@param tpmode the tpmode of the tape
@return the tape. the return value can never be 0
@exception Exception in case of error (no tape found,
several tapes found, DB problem, etc...)" visibility="public" xmi.id="115513" type="castor::stager::Tape*" isAbstract="true" name="selectTape" >
       <UML:Parameter visibility="public" xmi.id="115514" value="" type="const std::string" name="vid" />
       <UML:Parameter visibility="public" xmi.id="115515" value="" type="const int" name="side" />
       <UML:Parameter visibility="public" xmi.id="115516" value="" type="const int" name="tpmode" />
      </UML:Operation>
      <UML:Operation comment="Selects the next request the stager should deal with.
Selects a Request in START status and move its status
PROCESSED to avoid double processing.
The selection is restricted to Request of a given set
of types.
@param types the list of accepted types for the request
@return the Request to process
@exception Exception in case of error" visibility="public" xmi.id="115517" type="castor::stager::Request*" isAbstract="true" name="requestToDo" >
       <UML:Parameter visibility="public" xmi.id="115518" value="" type="std::vector&lt; ObjectsIds >&amp;" name="types" />
      </UML:Operation>
     </UML:Interface>
     <UML:Interface stereotype="115421" comment="This class provides stager methods related to File System handling" visibility="public" xmi.id="115424" isAbstract="true" name="IFSSvc" >
      <UML:Operation comment="Retrieves a DiskPool from the database based on name.
Caller is in charge of the deletion of the allocated
memory.
@param name the name of the disk pool
@return the DiskPool object or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115519" type="castor::stager::DiskPool*" isAbstract="true" name="selectDiskPool" >
       <UML:Parameter visibility="public" xmi.id="115520" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a TapePool from the database based on name.
Caller is in charge of the deletion of the allocated
memory.
@param name the name of the tape pool
@return the TapePool object or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115521" type="castor::stager::TapePool*" isAbstract="true" name="selectTapePool" >
       <UML:Parameter visibility="public" xmi.id="115522" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a DiskServer from the database based on name.
Caller is in charge of the deletion of the allocated
memory.
@param name the name of the disk server
@return the DiskServer object or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115523" type="castor::stager::DiskServer*" isAbstract="true" name="selectDiskServer" >
       <UML:Parameter visibility="public" xmi.id="115524" value="" type="const std::string" name="name" />
      </UML:Operation>
     </UML:Interface>
     <UML:Interface stereotype="115421" comment="This class provides stager methods related to Garbage Collection" visibility="public" xmi.id="115425" isAbstract="true" name="IGCSvc" >
      <UML:Operation comment="List files to be deleted on a given diskServer.
These are the files corresponding to DiskCopies
in GCCANDIDATE status. This status is changed
to BEINGDELETED atomically.
@param diskServer the name of the DiskServer
involved
@return a list of files. The id of the DiskCopy
is given as well as the local path on the server.
Note that the returned vector should be deallocated
by the caller as well as its content" visibility="public" xmi.id="115525" type="std::vector&lt; castor :: stager :: GCLocalFile * >*" isAbstract="true" name="selectFiles2Delete" >
       <UML:Parameter visibility="public" xmi.id="115526" value="" type="std::string" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager of files effectively deleted.
The DiskCopy id is given. The corresponding
DiskCopies will be deleted from the catalog
as well as the CastorFile if there is no other
copy.
@param diskCopyIds the list of diskcopies deleted
given by their id" visibility="public" xmi.id="115527" type="void" isAbstract="true" name="filesDeleted" >
       <UML:Parameter visibility="public" xmi.id="115528" value="" type="std::vector&lt; u_signed64 * >&amp;" name="diskCopyIds" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager of files for which deletion failed.
The DiskCopy id is given. The corresponding
DiskCopies will marked FAILED in the catalog.
@param diskCopyIds the list of diskcopies for which
deletion failed given by their id" visibility="public" xmi.id="115529" type="void" isAbstract="true" name="filesDeletionFailed" >
       <UML:Parameter visibility="public" xmi.id="115530" value="" type="std::vector&lt; u_signed64 * >&amp;" name="diskCopyIds" />
      </UML:Operation>
     </UML:Interface>
     <UML:Interface stereotype="115421" comment="This class provides stager methods related to job handling" visibility="public" xmi.id="115426" isAbstract="true" name="IJobSvc" >
      <UML:Operation comment="Handles the start of a Get or Update job.
Schedules the corresponding SubRequest on a given
FileSystem and returns the DiskCopy to use for data
access.
Note that deallocation of the DiskCopy is the
responsability of the caller.
Depending on the available DiskCopies for the file
the SubRequest deals with, we have different cases :
 - no DiskCopy at all and file is not of size 0 :
a DiskCopy is created with status DISKCOPY_WAITTAPERECALL.
Null pointer is returned
 - no DiskCopy at all and file is of size 0 :
a DiskCopy is created with status DISKCOPY_WAIDISK2DISKCOPY.
This diskCopy is returned and the emptyFile content is
set to true.
 - one DiskCopy in DISKCOPY_WAITTAPERECALL, DISKCOPY_WAITFS
or DISKCOPY_WAITDISK2DISKCOPY status :
the SubRequest is linked to the one recalling and
put in SUBREQUEST_WAITSUBREQ status. Null pointer is
returned.
 - no valid (STAGE*, WAIT*) DiskCopy on the selected
FileSystem but some in status DISKCOPY_STAGEOUT or
DISKCOPY_STAGED on other FileSystems : a new DiskCopy
is created with status DISKCOPY_WAITDISK2DISKCOPY.
It is returned and the sources parameter is filed
with the DiskCopies found on the non selected FileSystems.
 - one DiskCopy on the selected FileSystem in
DISKCOPY_STAGEOUT or DISKCOPY_STAGED status :
the SubRequest is ready, the DiskCopy is returned and
sources remains empty.
@param subreq  the SubRequest to consider
@param fileSystem the selected FileSystem
@param sources this is a list of DiskCopies that
can be used as source of a Disk to Disk copy. This
list is never empty when diskCopy has status
DISKCOPY_DISK2DISKCOPY and always empty otherwise.
Note that the DiskCopies returned in sources must be
deallocated by the caller.
@param emptyFile whether the resulting diskCopy
deals with the recall of an empty file
@return the DiskCopy to use for the data access or
a null pointer if the data access will have to wait
and there is nothing more to be done. Even in case
of a non null pointer, the data access will have to
wait for a disk to disk copy if the returned DiskCopy
is in DISKCOPY_WAITDISKTODISKCOPY status. This
disk to disk copy is the responsability of the caller.
@exception Exception in case of error" visibility="public" xmi.id="115531" type="castor::stager::DiskCopy*" isAbstract="true" name="getUpdateStart" >
       <UML:Parameter visibility="public" xmi.id="115532" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115533" value="" type="castor::stager::FileSystem*" name="fileSystem" />
       <UML:Parameter visibility="public" xmi.id="115534" value="" type="std::list&lt; castor :: stager :: DiskCopyForRecall * >&amp;" name="sources" />
       <UML:Parameter visibility="public" xmi.id="115535" value="" type="bool*" name="emptyFile" />
      </UML:Operation>
      <UML:Operation comment="Handles the start of a Put job.
Links the DiskCopy associated to the SubRequest to
the given FileSystem and updates the DiskCopy status
to DISKCOPY_STAGEOUT.
Note that deallocation of the DiskCopy is the
responsability of the caller.
@param subreq  the SubRequest to consider
@param fileSystem the selected FileSystem
@return the DiskCopy to use for the data access
@exception Exception in case of error" visibility="public" xmi.id="115536" type="castor::stager::DiskCopy*" isAbstract="true" name="putStart" >
       <UML:Parameter visibility="public" xmi.id="115537" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115538" value="" type="castor::stager::FileSystem*" name="fileSystem" />
      </UML:Operation>
      <UML:Operation comment="Handles the start of a PutDone job.
Actually only returns the DiskCopy associated to the SubRequest
Note that deallocation of the DiskCopy is the
responsability of the caller.
If a null  DiskCopy is returned then the PutDone
was put in waiting mode and the caller should stop
processing it
@param subreqId the if of the SubRequest to consider
@return the DiskCopy to use for the data access or
0 if the PutDone should wait
@exception Exception in case of error" visibility="public" xmi.id="115539" type="castor::stager::DiskCopy*" isAbstract="true" name="putDoneStart" >
       <UML:Parameter visibility="public" xmi.id="115540" value="" type="u_signed64" name="subreqId" />
      </UML:Operation>
      <UML:Operation comment="Updates database after successful completion of a
disk to disk copy. This includes setting the DiskCopy
status to DISKCOPY_STAGED and setting the SubRequest
status to SUBREQUEST_READY.
Changes are commited
@param diskcopyId the id of the new DiskCopy
@param status the status of the new DiskCopy
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115541" type="void" isAbstract="true" name="disk2DiskCopyDone" >
       <UML:Parameter visibility="public" xmi.id="115542" value="" type="u_signed64" name="diskCopyId" />
       <UML:Parameter visibility="public" xmi.id="115543" value="" type="castor::stager::DiskCopyStatusCodes" name="status" />
      </UML:Operation>
      <UML:Operation comment="Prepares a file for migration, when needed.
This is called both when a stagePut is over and when a
putDone request is processed.
In the case of a stagePut that in part of a PrepareToPut,
it actually does not prepare the file for migration
but only updates its size in DB and name server.
Otherwise (stagePut with no prepare and putDone),
it also updates the filesystem free space and creates
the needed TapeCopies according to the FileClass of the
castorFile.
@param subreq The SubRequest handling the file to prepare
@param fileSize The actual size of the castor file
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115544" type="void" isAbstract="true" name="prepareForMigration" >
       <UML:Parameter visibility="public" xmi.id="115545" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115546" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Get or Update SubRequest
(without write) was finished successfully.
The SubRequest and potentially the corresponding
Request will thus be removed from the DataBase
@param subReqId the id of the finished SubRequest" visibility="public" xmi.id="115547" type="void" isAbstract="true" name="getUpdateDone" >
       <UML:Parameter visibility="public" xmi.id="115548" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Get or Update SubRequest
(without write) failed.
The SubRequest's status will thus be set to FAILED
@param subReqId the id of the failing SubRequest" visibility="public" xmi.id="115549" type="void" isAbstract="true" name="getUpdateFailed" >
       <UML:Parameter visibility="public" xmi.id="115550" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Put SubRequest failed.
The SubRequest's status will thus be set to FAILED
@param subReqId the id of the failing SubRequest" visibility="public" xmi.id="115551" type="void" isAbstract="true" name="putFailed" >
       <UML:Parameter visibility="public" xmi.id="115552" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
     </UML:Interface>
     <UML:Interface stereotype="115421" comment="This class provides methods related to tape handling" visibility="public" xmi.id="115423" isAbstract="true" name="ITapeSvc" >
      <UML:Operation comment="Check if there still are any segments waiting for a given tape.
Before a tape is physically mounted, the VidWorker process will
check if there still are Segments entries waiting for this tape.
If not, the tape request is cancelled. If there is at least one
matching entry, the matching catalog entries Tape status should be
updated to TAPE_WAITMOUNT before return.
TAPE_WAITMOUNT indicates that the tape request will continue
mounting the tape and the matching Segments entries should normally
wait for this tape to be mounted. This means that if the CASTOR
file has multiple tape copies, the tape requests for the other
copies should be cancelled unless there are outstanding requests
for other files that reside on that tape.
@param searchItem the tape information used for the search
@return >0 : number of waiting requests found. 0 : no requests found
@exception in case of error" visibility="public" xmi.id="115590" type="int" isAbstract="true" name="anySegmentsForTape" >
       <UML:Parameter visibility="public" xmi.id="115591" value="" type="castor::stager::Tape*" name="searchItem" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115592" type="std::vector&lt; castor :: stager :: Segment * >" isAbstract="true" name="segmentsForTape" >
       <UML:Parameter visibility="public" xmi.id="115593" value="" type="castor::stager::Tape*" name="searchItem" />
      </UML:Operation>
      <UML:Operation comment="Finds the best filesystem for a given segment.
Looks for a filesystem where to write the segment content
once it will be retrieved from tape. This file system
must have enough space and the one with the biggest weight
will be taken (if any).
If a filesystem is chosen, then the link with the only
DiskCopy available for the CastorFile the segment belongs
to is created.
@param segment the segment we are dealing with
@return The only DiskCopy available for the CastorFile the
segment belongs too. A DiskCopyForRecall is actually returned
that contains additionnal information. The Castorfile associated
is also created
@exception in case of error" visibility="public" xmi.id="115594" type="castor::stager::DiskCopyForRecall*" isAbstract="true" name="bestFileSystemForSegment" >
       <UML:Parameter visibility="public" xmi.id="115595" value="" type="castor::stager::Segment*" name="segment" />
      </UML:Operation>
      <UML:Operation comment="Check if there still is any tapeCopy waiting for a stream.
The matching TapeCopies entry must have the status
TAPECOPY_WAITINSTREAM. If there is at least one, the Stream
status is updated to STREAM_WAITMOUNT before return. This
indicates that the stream will continue mounting the tape.
@param searchItem the stream information used for the search
@return whether a Tapecopy is waiting
@exception in case of error" visibility="public" xmi.id="115596" type="bool" isAbstract="true" name="anyTapeCopyForStream" >
       <UML:Parameter visibility="public" xmi.id="115597" value="" type="castor::stager::Stream*" name="searchItem" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115598" type="castor::stager::TapeCopyForMigration*" isAbstract="true" name="bestTapeCopyForStream" >
       <UML:Parameter visibility="public" xmi.id="115599" value="" type="castor::stager::Stream*" name="searchItem" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115600" type="void" isAbstract="true" name="streamsForTapePool" >
       <UML:Parameter visibility="public" xmi.id="115601" value="" type="castor::stager::TapePool*" name="tapePool" />
      </UML:Operation>
      <UML:Operation comment="Updates the database when a file recall is successfully over.
This includes updating the DiskCopy status to DISKCOPY_STAGED
(note that it is guaranteed that there is a single
diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).
It also includes updating the status of the corresponding
SubRequest to SUBREQUEST_RESTART and updating the status of
the SubRequests waiting on this recall to SUBREQUEST_RESTART
@param tapeCopy the TapeCopy that was just recalled
@exception in case of error" visibility="public" xmi.id="115602" type="void" isAbstract="true" name="fileRecalled" >
       <UML:Parameter visibility="public" xmi.id="115603" value="" type="castor::stager::TapeCopy*" name="tapeCopy" />
      </UML:Operation>
      <UML:Operation comment="Updates the database when a file recall failed.
This includes updating the DiskCopy status to DISKCOPY_FAILED
(note that it is garanted that there is a single
diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).
It also includes updating the status of the corresponding
SubRequest to SUBREQUEST_FAILED and updating the status of
the SubRequests waiting on this recall to SUBREQUEST_FAILED
@param tapeCopy the TapeCopy that was just recalled
@exception in case of error" visibility="public" xmi.id="115604" type="void" isAbstract="true" name="fileRecallFailed" >
       <UML:Parameter visibility="public" xmi.id="115605" value="" type="castor::stager::TapeCopy*" name="tapeCopy" />
      </UML:Operation>
      <UML:Operation comment="Get an array of the tapes to be processed.
This method searches the request catalog for all tapes that are
in TAPE_PENDING status. It atomically updates the status to
TAPE_WAITVDQM and returns the corresponding Tape objects.
This means that a subsequent call to this method will not return
the same entries. Objects may be present n times in the returned
vector of tapes. The rtcpclientd will notice multiple identical
requests and only submit one of them to VDQM.
@return vector of tapes to be processed
@exception in case of error" visibility="public" xmi.id="115606" type="std::vector&lt; castor :: stager :: Tape * >" isAbstract="true" name="tapesToDo" />
      <UML:Operation comment="Get an array of the streams to be processed.
This method searches the stager catalog for all streams that are
in STREAM_PENDING status. It atomically updates the status to
STREAM_WAITDRIVE and returns the corresponding STREAM objects.
This means that a subsequent call to this method will not return
the same entries.
@return vector of streams to be processed
@exception in case of error" visibility="public" xmi.id="115607" type="std::vector&lt; castor :: stager :: Stream * >" isAbstract="true" name="streamsToDo" />
      <UML:Operation comment="Retrieves the TapeCopies from the database that have
status TAPECOPY_CREATED or TAPECOPY_TOBEMIGRATED and
have a castorFile linked to the right SvcClass.
Changes their status to TAPECOPY_WAITINSTREAMS.
Caller is in charge of the deletion of the allocated
memory.
@param svcClass the SvcClass we select on
@return a vector of matching TapeCopies
@exception Exception in case of error" visibility="public" xmi.id="115608" type="std::vector&lt; castor :: stager :: TapeCopy * >" isAbstract="true" name="selectTapeCopiesForMigration" >
       <UML:Parameter visibility="public" xmi.id="115609" value="" type="castor::stager::SvcClass*" name="svcClass" />
      </UML:Operation>
      <UML:Operation comment="resets a stream by either deleting it or setting
its status to STREAM_PENDING depending on whether
there are TapeCopies in status WAITINSTREAMS status.
Also deletes all links to TapeCopies for this stream
@param stream the stream to reset
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115610" type="void" isAbstract="true" name="resetStream" >
       <UML:Parameter visibility="public" xmi.id="115611" value="" type="castor::stager::Stream*" name="stream" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115612" type="std::vector&lt; castor :: stager :: Segment * >" isAbstract="true" name="failedSegments" />
     </UML:Interface>
     <UML:Class comment="This class provides specific stager methods and includes
scheduler and error related methods" visibility="public" xmi.id="115553" name="IStagerSvc" >
      <UML:Operation comment="Selects the next SubRequest the stager should deal with.
Selects a SubRequest in START, RESTART or RETRY status
and move its status to SUBREQUEST_WAITSCHED to avoid
double processing.
The selection is restricted to SubRequest associated to
requests of a given set of types.
@param types the list of accepted types for the request
associated to the returned subrequest
@return the SubRequest to process
@exception Exception in case of error" visibility="public" xmi.id="115554" type="castor::stager::SubRequest*" isAbstract="true" name="subRequestToDo" >
       <UML:Parameter visibility="public" xmi.id="115555" value="" type="std::vector&lt; ObjectsIds >&amp;" name="types" />
      </UML:Operation>
      <UML:Operation comment="Selects the next SubRequest in FAILED status the stager
should deal with.
Selects a SubRequest in FAILED status and move its status
to FAILED_ANSWERING to avoid double processing.
@return the SubRequest to process
@exception Exception in case of error" visibility="public" xmi.id="115556" type="castor::stager::SubRequest*" isAbstract="true" name="subRequestFailedToDo" />
      <UML:Operation comment="Decides whether a SubRequest should be scheduled.
Looks at all diskCopies for the file a SubRequest
deals with and depending on them, decides whether
to schedule the SubRequest. In case it can be scheduled,
also returns a list of diskcopies available to the
subrequest.
The scheduling decision is taken this way :
  - if no diskCopy is found, return true (scheduling
for tape recall) and sources stays empty.
  - if some diskcopies are found but all in WAIT*
status, return false (no schedule) and link the SubRequest
to the one we're waiting on + set its status to
SUBREQUEST_WAITSUBREQ. Sources stays empty.
  - if some diskcopies are found in STAGED/STAGEOUT
status, return true and list them in sources.
@param subreq the SubRequest to consider
@param sources this is a list of DiskCopies that
can be used by the subrequest.
Note that the DiskCopies returned in sources must be
deallocated by the caller.
@return whether to schedule it
@exception Exception in case of error" visibility="public" xmi.id="115557" type="bool" isAbstract="true" name="isSubRequestToSchedule" >
       <UML:Parameter visibility="public" xmi.id="115558" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115559" value="" type="std::list&lt; castor :: stager :: DiskCopyForRecall * >&amp;" name="sources" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a CastorFile from the database based on its fileId
and name server. Creates a new one if none if found.
Caller is in charge of the deletion of the allocated object
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@param svcClass the service class of the castor file.
Used only in case of creation of a new castor file.
@param fileClass the file class of the castor file.
Used only in case of creation of a new castor file.
@param fileSize the size fo the castor file.
Used only in case of creation of a new castor file.
@return the CastorFile, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115560" type="castor::stager::CastorFile*" isAbstract="true" name="selectCastorFile" >
       <UML:Parameter visibility="public" xmi.id="115561" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115562" value="" type="const std::string" name="nsHost" />
       <UML:Parameter visibility="public" xmi.id="115563" value="" type="u_signed64" name="svcClass" />
       <UML:Parameter visibility="public" xmi.id="115564" value="" type="u_signed64" name="fileClass" />
       <UML:Parameter visibility="public" xmi.id="115565" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Updates a SubRequest status in the DB, including
the answered flag that is set to 1 and tells
whether the request to which it belongs still
has some other SubRequests that were not processed.
By not processed we mean that their &quot;answered&quot; flag
is not set AND their status is neither READY neither
FINISHED nor one of the FAILED* status.
The two operations are executed atomically.
The update is commited before returning.
This method should only be called when the calling
process is answering to the client. In other cases,
the updateRep method should be used.
@param subreq the SubRequest to update
@return whether there are still SubRequests in
SUBREQUEST_START status within the same request
@exception Exception in case of error" visibility="public" xmi.id="115566" type="bool" isAbstract="true" name="updateAndCheckSubRequest" >
       <UML:Parameter visibility="public" xmi.id="115567" value="" type="castor::stager::SubRequest*" name="subreq" />
      </UML:Operation>
      <UML:Operation comment="Recreates a castorFile.
Depending on the context, this method cleans up the
database when a castor file is recreated or gets
the unique DiskCopy of a castor file.
When called in the context of a Put inside a
PrepareToPut, the method returns the unique DiskCopy
associated to the castorFile. This DiskCopy can be
either in WAITFS, WAITFS_SCHEDULING or STAGEOUT
status and is linked to the SubRequest.
In all others cases, the method first
checks whether the recreation is possible.
A recreation is considered to be possible if
no TapeCopy of the given file is in TAPECOPY_SELECTED
status and no DiskCopy of the file is in either
WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or
WAITDISK2DISKCOPY status. When recreation is not
possible, a null pointer is returned.
Else, all DiskCopies for the given file are marked
INVALID (that is those not in DISKCOPY_FAILED and
DISKCOPY_DELETED status) and all TapeCopies are
deleted. A new DiskCopy is then created in
DISKCOPY_WAITFS status, linked to the given
SubRequest returned.
Note that everything is commited and that the caller
is responsible for the deletion of the returned
DiskCopy (if any)
@param castorFile the file to recreate
@param subreq the SubRequest recreating the file
@return the new DiskCopy in DISKCOPY_WAITFS status
or null if recreation is not possible
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115568" type="castor::stager::DiskCopyForRecall*" isAbstract="true" name="recreateCastorFile" >
       <UML:Parameter visibility="public" xmi.id="115569" value="" type="castor::stager::CastorFile*" name="castorFile" />
       <UML:Parameter visibility="public" xmi.id="115570" value="" type="castor::stager::SubRequest*" name="subreq" />
      </UML:Operation>
      <UML:Operation comment="Selects a machine and FileSystem for a given job.
@param fileSystems the list of allowed filesystems
according to job requirements (given by id). This
is the fileSystems' mountPoint, the corresponding
machines are given by parameter machines.
A null array means that any filesystem is eligible
@param machines the machines on which the filesystems
in parameter fileSystems reside.
A null array means that any machine is eligible. in such
a case, fileSystems has to be null.
@param minFree the minimum free space needed on each
filesystem to be selected. This is filesystem dependent
if filesystems are given (due to possible reservations
of the scheduler).
If no filesystem are given, this array must have
exactely one item, used for all filesystems.
@param fileSystemsNb the length of the arrays
fileSystems, machines and minFree when they are not
null (and if filesystems are given for minFree)
@mountPoint the selected fileSystem's mountPoint
@diskServer the diskServer on which the selected
fileSystem resides.
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115571" type="void" isAbstract="true" name="bestFileSystemForJob" >
       <UML:Parameter visibility="public" xmi.id="115572" value="" type="char**" name="fileSystems" />
       <UML:Parameter visibility="public" xmi.id="115573" value="" type="char**" name="machines" />
       <UML:Parameter visibility="public" xmi.id="115574" value="" type="u_signed64*" name="minFree" />
       <UML:Parameter visibility="public" xmi.id="115575" value="" type="unsigned int" name="fileSystemsNb" />
       <UML:Parameter visibility="public" xmi.id="115576" value="" type="std::string*" name="mountPoint" />
       <UML:Parameter visibility="public" xmi.id="115577" value="" type="std::string*" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Updates a filesystem state (e.g : weight,
fsdeviation) to take into account the opening of
a new job.
@param fileSystem the file system mount point
@param diskServer the name of the diskserver
where the filesystem resides
@param fileSize the (supposed) size of the file
to be written by the job
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115578" type="void" isAbstract="true" name="updateFileSystemForJob" >
       <UML:Parameter visibility="public" xmi.id="115579" value="" type="std::string" name="fileSystem" />
       <UML:Parameter visibility="public" xmi.id="115580" value="" type="std::string" name="diskServer" />
       <UML:Parameter visibility="public" xmi.id="115581" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Archives a SubRequest
The SubRequest and potentially the corresponding
Request will thus be removed from the DataBase
@param subReqId the id of the SubRequest to archive" visibility="public" xmi.id="115582" type="void" isAbstract="true" name="archiveSubReq" >
       <UML:Parameter visibility="public" xmi.id="115583" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Implements a single file stageRelease.
It throws a Busy exception in case the file is
used by any request or is waiting for migration.
Otherwise, it marks all the copies of the file
as candidate for the garbage collection.
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@exception in case of error or if the file is busy" visibility="public" xmi.id="115584" type="void" isAbstract="true" name="stageRelease" >
       <UML:Parameter visibility="public" xmi.id="115585" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115586" value="" type="const std::string" name="nsHost" />
      </UML:Operation>
      <UML:Operation comment="Implements a single file stageRm.
It throws a Busy exception in case the file is
beging migrated. Otherwise, it deletes all
running requests for the file and marks all
the copies of the file as candidate for the
garbage collection.
@param fileId the fileId of the CastorFile
@param nsHost the name server to use
@exception in case of error or if the file is busy" visibility="public" xmi.id="115587" type="void" isAbstract="true" name="stageRm" >
       <UML:Parameter visibility="public" xmi.id="115588" value="" type="const u_signed64" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115589" value="" type="const std::string" name="nsHost" />
      </UML:Operation>
     </UML:Class>
     <UML:Class comment="Implementation of the IJobSvc for Remote stager" visibility="public" xmi.id="115438" name="RemoteJobSvc" >
      <UML:Operation comment="default constructor" visibility="public" xmi.id="115641" type="" name="RemoteJobSvc" >
       <UML:Parameter visibility="public" xmi.id="115642" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="default destructor" visibility="public" xmi.id="115643" type="" name="~ RemoteJobSvc" />
      <UML:Operation comment="Get the service id" visibility="public" xmi.id="115644" type="const unsigned int" name="id" />
      <UML:Operation comment="Get the service id" visibility="public" xmi.id="115645" type="const unsigned int" name="ID" ownerScope="classifier" />
      <UML:Operation comment="Handles the start of a Put job.
Links the DiskCopy associated to the SubRequest to
the given FileSystem and updates the DiskCopy status
to DISKCOPY_STAGEOUT.
Note that deallocation of the DiskCopy is the
responsability of the caller.
@param subreq  the SubRequest to consider
@param fileSystem the selected FileSystem
@return the DiskCopy to use for the data access
@exception Exception in case of error" visibility="public" xmi.id="115646" type="castor::stager::DiskCopy*" name="putStart" >
       <UML:Parameter visibility="public" xmi.id="115647" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115648" value="" type="castor::stager::FileSystem*" name="fileSystem" />
      </UML:Operation>
      <UML:Operation comment="Handles the start of a PutDone job.
Actually only returns the DiskCopy associated to the SubRequest
Note that deallocation of the DiskCopy is the
responsability of the caller.
@param subreqId the if of the SubRequest to consider
@return the DiskCopy to use for the data access
@exception Exception in case of error" visibility="public" xmi.id="115649" type="castor::stager::DiskCopy*" name="putDoneStart" >
       <UML:Parameter visibility="public" xmi.id="115650" value="" type="u_signed64" name="subreqId" />
      </UML:Operation>
      <UML:Operation comment="Updates database after successful completion of a
disk to disk copy. This includes setting the DiskCopy
status to DISKCOPY_STAGED and setting the SubRequest
status to SUBREQUEST_READY.
Changes are commited
@param diskcopyId the id of the new DiskCopy
@param status the status of the new DiskCopy
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115651" type="void" name="disk2DiskCopyDone" >
       <UML:Parameter visibility="public" xmi.id="115652" value="" type="u_signed64" name="diskCopyId" />
       <UML:Parameter visibility="public" xmi.id="115653" value="" type="castor::stager::DiskCopyStatusCodes" name="status" />
      </UML:Operation>
      <UML:Operation comment="Prepares a file for migration, when needed.
This is called both when a stagePut is over and when a
putDone request is processed.
In the case of a stagePut that in part of a PrepareToPut,
it actually does not prepare the file for migration
but only updates its size in DB and name server.
Otherwise (stagePut with no prepare and putDone),
it also updates the filesystem free space and creates
the needed TapeCopies according to the FileClass of the
castorFile.
@param subreq The SubRequest handling the file to prepare
@param fileSize The actual size of the castor file
@exception Exception throws an Exception in case of error" visibility="public" xmi.id="115654" type="void" name="prepareForMigration" >
       <UML:Parameter visibility="public" xmi.id="115655" value="" type="castor::stager::SubRequest*" name="subreq" />
       <UML:Parameter visibility="public" xmi.id="115656" value="" type="u_signed64" name="fileSize" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Get or Update SubRequest
(without write) was finished successfully.
The SubRequest and potentially the corresponding
Request will thus be removed from the DataBase
@param subReqId the id of the finished SubRequest" visibility="public" xmi.id="115657" type="void" name="getUpdateDone" >
       <UML:Parameter visibility="public" xmi.id="115658" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Get or Update SubRequest
(without write) failed.
The SubRequest's status will thus be set to FAILED
@param subReqId the id of the failing SubRequest" visibility="public" xmi.id="115659" type="void" name="getUpdateFailed" >
       <UML:Parameter visibility="public" xmi.id="115660" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager the a Put SubRequest failed.
The SubRequest's status will thus be set to FAILED
@param subReqId the id of the failing SubRequest" visibility="public" xmi.id="115661" type="void" name="putFailed" >
       <UML:Parameter visibility="public" xmi.id="115662" value="" type="u_signed64" name="subReqId" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115663" type="castor::stager::FileClass*" name="selectFileClass" >
       <UML:Parameter visibility="public" xmi.id="115664" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a FileSystem from the database based on its
mount point and diskServer name. Keeps a lock on it.
Caller is in charge of the deletion of the allocated
objects, including the DiskServer Object
@param mountPoint the mountPoint of the FileSystem
@param diskServer the name of the disk server hosting this file system
@return the FileSystem linked to its DiskServer, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115665" type="castor::stager::FileSystem*" name="selectFileSystem" >
       <UML:Parameter visibility="public" xmi.id="115666" value="" type="const std::string" name="mountPoint" />
       <UML:Parameter visibility="public" xmi.id="115667" value="" type="const std::string" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a tape from the database based on its vid,
side and tpmode. If no tape is found, creates one.
Note that this method creates a lock on the row of the
given tape and does not release it. It is the
responsability of the caller to commit the transaction.
The caller is also responsible for the deletion of the
allocated object
@param vid the vid of the tape
@param side the side of the tape
@param tpmode the tpmode of the tape
@return the tape. the return value can never be 0
@exception Exception in case of error (no tape found,
several tapes found, DB problem, etc...)" visibility="public" xmi.id="115668" type="castor::stager::Tape*" name="selectTape" >
       <UML:Parameter visibility="public" xmi.id="115669" value="" type="const std::string" name="vid" />
       <UML:Parameter visibility="public" xmi.id="115670" value="" type="const int" name="side" />
       <UML:Parameter visibility="public" xmi.id="115671" value="" type="const int" name="tpmode" />
      </UML:Operation>
      <UML:Operation comment="Selects the next request the stager should deal with.
Selects a Request in START status and move its status
PROCESSED to avoid double processing.
The selection is restricted to Request of a given set
of types.
@param types the list of accepted types for the request
@return the Request to process
@exception Exception in case of error" visibility="public" xmi.id="115672" type="castor::stager::Request*" name="requestToDo" >
       <UML:Parameter visibility="public" xmi.id="115673" value="" type="std::vector&lt; ObjectsIds >&amp;" name="types" />
      </UML:Operation>
      <UML:Operation visibility="protected" xmi.id="115674" type="int" name="getRemoteJobClientTimeout" />
     </UML:Class>
     <UML:Class comment="Implementation of the IStagerSvc for Oracle" visibility="public" xmi.id="115436" name="RemoteGCSvc" >
      <UML:Operation comment="default constructor" visibility="public" xmi.id="115618" type="" name="RemoteGCSvc" >
       <UML:Parameter visibility="public" xmi.id="115619" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="default destructor" visibility="public" xmi.id="115620" type="" name="~ RemoteGCSvc" />
      <UML:Operation comment="Get the service id" visibility="public" xmi.id="115621" type="const unsigned int" name="id" />
      <UML:Operation comment="Get the service id" visibility="public" xmi.id="115622" type="const unsigned int" name="ID" ownerScope="classifier" />
      <UML:Operation comment="List files to be deleted on a given diskServer.
These are the files corresponding to DiskCopies
in GCCANDIDATE status. This status is changed
to BEINGDELETED atomically.
@param diskServer the name of the DiskServer
involved
@return a list of files. The id of the DiskCopy
is given as well as the local path on the server.
Note that the returned vector should be deallocated
by the caller as well as its content" visibility="public" xmi.id="115623" type="std::vector&lt; castor :: stager :: GCLocalFile * >*" name="selectFiles2Delete" >
       <UML:Parameter visibility="public" xmi.id="115624" value="" type="std::string" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager of files effectively deleted.
The DiskCopy id is given. The corresponding
DiskCopies will be deleted from the catalog
as well as the CastorFile if there is no other
copy.
@param diskCopyIds the list of diskcopies deleted
given by their id" visibility="public" xmi.id="115625" type="void" name="filesDeleted" >
       <UML:Parameter visibility="public" xmi.id="115626" value="" type="std::vector&lt; u_signed64 * >&amp;" name="diskCopyIds" />
      </UML:Operation>
      <UML:Operation comment="Informs the stager of files for which deletion failed.
The DiskCopy id is given. The corresponding
DiskCopies will markes FAILED in the catalog.
@param diskCopyIds the list of diskcopies for which
deletion failed given by their id" visibility="public" xmi.id="115627" type="void" name="filesDeletionFailed" >
       <UML:Parameter visibility="public" xmi.id="115628" value="" type="std::vector&lt; u_signed64 * >&amp;" name="diskCopyIds" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115629" type="castor::stager::FileClass*" name="selectFileClass" >
       <UML:Parameter visibility="public" xmi.id="115630" value="" type="const std::string" name="name" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a FileSystem from the database based on its
mount point and diskServer name. Keeps a lock on it.
Caller is in charge of the deletion of the allocated
objects, including the DiskServer Object
@param mountPoint the mountPoint of the FileSystem
@param diskServer the name of the disk server hosting this file system
@return the FileSystem linked to its DiskServer, or 0 if none found
@exception Exception in case of error" visibility="public" xmi.id="115631" type="castor::stager::FileSystem*" name="selectFileSystem" >
       <UML:Parameter visibility="public" xmi.id="115632" value="" type="const std::string" name="mountPoint" />
       <UML:Parameter visibility="public" xmi.id="115633" value="" type="const std::string" name="diskServer" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a tape from the database based on its vid,
side and tpmode. If no tape is found, creates one.
Note that this method creates a lock on the row of the
given tape and does not release it. It is the
responsability of the caller to commit the transaction.
The caller is also responsible for the deletion of the
allocated object
@param vid the vid of the tape
@param side the side of the tape
@param tpmode the tpmode of the tape
@return the tape. the return value can never be 0
@exception Exception in case of error (no tape found,
several tapes found, DB problem, etc...)" visibility="public" xmi.id="115634" type="castor::stager::Tape*" name="selectTape" >
       <UML:Parameter visibility="public" xmi.id="115635" value="" type="const std::string" name="vid" />
       <UML:Parameter visibility="public" xmi.id="115636" value="" type="const int" name="side" />
       <UML:Parameter visibility="public" xmi.id="115637" value="" type="const int" name="tpmode" />
      </UML:Operation>
      <UML:Operation comment="Selects the next request the stager should deal with.
Selects a Request in START status and move its status
PROCESSED to avoid double processing.
The selection is restricted to Request of a given set
of types.
@param types the list of accepted types for the request
@return the Request to process
@exception Exception in case of error" visibility="public" xmi.id="115638" type="castor::stager::Request*" name="requestToDo" >
       <UML:Parameter visibility="public" xmi.id="115639" value="" type="std::vector&lt; ObjectsIds >&amp;" name="types" />
      </UML:Operation>
      <UML:Operation visibility="protected" xmi.id="115640" type="int" name="getRemoteGCClientTimeout" />
     </UML:Class>
    </UML:Package>
    <UML:Interface stereotype="115421" comment="base of all services" visibility="public" xmi.id="115463" isAbstract="true" name="IService" >
     <UML:Operation visibility="public" xmi.id="115613" type="" name="~ IService" />
     <UML:Operation comment="Get the service id" visibility="public" xmi.id="115614" type="const unsigned int" isAbstract="true" name="id" />
     <UML:Operation comment="Get the service name" visibility="public" xmi.id="115615" type="const std::string" isAbstract="true" name="name" />
     <UML:Operation comment="adds a reference to this service" visibility="public" xmi.id="115616" type="void" isAbstract="true" name="addRef" />
     <UML:Operation comment="removes a reference to the service and releases it
if the count goes to 0" visibility="public" xmi.id="115617" type="void" isAbstract="true" name="release" />
    </UML:Interface>
    <UML:Package visibility="public" xmi.id="115675" name="query" >
     <UML:Interface stereotype="115421" comment="This class provides methods usefull to the query
handler to with database queries" visibility="public" xmi.id="115427" isAbstract="true" name="IQuerySvc" >
      <UML:Operation comment="Gets all DiskCopies for a given file.
The caller is responsible for the deallocation of
the returned objects
@param fileId the fileId identifying the file
@param nsHost the name server host for this file
@param svcClassId the Id of the service class we're using
@return the list of DiskCopies available
@exception in case of error" visibility="public" xmi.id="115676" type="std::list&lt; castor :: stager :: DiskCopyInfo * >" isAbstract="true" name="diskCopies4File" >
       <UML:Parameter visibility="public" xmi.id="115677" value="" type="std::string" name="fileId" />
       <UML:Parameter visibility="public" xmi.id="115678" value="" type="std::string" name="nsHost" />
       <UML:Parameter visibility="public" xmi.id="115679" value="" type="u_signed64" name="svcClassId" />
      </UML:Operation>
      <UML:Operation comment="Gets all DiskCopies for a given request.
@param requestId the CASTOR ID of the request
@param svcClassId the Id of the service class we're using
@return the list of DiskCopies available
@exception in case of error" visibility="public" xmi.id="115680" type="std::list&lt; castor :: stager :: DiskCopyInfo * >" isAbstract="true" name="diskCopies4Request" >
       <UML:Parameter visibility="public" xmi.id="115681" value="" type="std::string" name="requestId" />
       <UML:Parameter visibility="public" xmi.id="115682" value="" type="u_signed64" name="svcClassId" />
      </UML:Operation>
      <UML:Operation comment="Gets all DiskCopies for a given usertag
@param usertag The usertag of the requests
@param svcClassId the Id of the service class we're using
@return the list of DiskCopies available
@exception in case of error" visibility="public" xmi.id="115683" type="std::list&lt; castor :: stager :: DiskCopyInfo * >" isAbstract="true" name="diskCopies4Usertag" >
       <UML:Parameter visibility="public" xmi.id="115684" value="" type="std::string" name="requestId" />
       <UML:Parameter visibility="public" xmi.id="115685" value="" type="u_signed64" name="svcClassId" />
      </UML:Operation>
     </UML:Interface>
    </UML:Package>
    <UML:Package visibility="public" xmi.id="115688" name="vdqm" >
     <UML:Interface stereotype="115421" comment="This class provides methods to deal with the VDQM service" visibility="public" xmi.id="115428" isAbstract="true" name="IVdqmSvc" >
      <UML:Operation comment="Checks, if there is an entry in the ExtendedDeviceGroup table,
which has exactly these parameters
@return true, if the entry exists
@exception in case of error" visibility="public" xmi.id="115689" type="bool" isAbstract="true" name="checkExtDevGroup" >
       <UML:Parameter visibility="public" xmi.id="115690" value="" type="const ExtendedDeviceGroup*" name="extDevGrp" />
      </UML:Operation>
      <UML:Operation comment="Retrieves a TapeServer from the database based on its serverName. 
If no tapeServer is found, creates one.
Note that this method creates a lock on the row of the
given tapeServer and does not release it. It is the
responsability of the caller to commit the transaction.
The caller is also responsible for the deletion of the
allocated object
@param serverName The name of the server
@return the tapeServer. the return value can never be 0
@exception Exception in case of error (no tape server found,
several tape servers found, DB problem, etc...)" visibility="public" xmi.id="115691" type="TapeServer*" isAbstract="true" name="selectTapeServer" >
       <UML:Parameter visibility="public" xmi.id="115692" value="" type="const std::string" name="serverName" />
      </UML:Operation>
      <UML:Operation comment="Checks, if there is already an entry for that tapeRequest. The entry
must have exactly the same ID.

@return 0 : The row number, 
        0 : The request is handled at the moment from a TapeDrive, 
        -1: if there is no entry for it.
@exception in case of error" visibility="public" xmi.id="115693" type="int" isAbstract="true" name="checkTapeRequest" >
       <UML:Parameter visibility="public" xmi.id="115694" value="" type="const TapeRequest*" name="tapeRequest" />
      </UML:Operation>
      <UML:Operation comment="Looks for the best fitting tape drive. If it is for example an
older tape, it will first look if an older drive is free, before
it chooses a newer one. This strategy should avoid, that the newer
drive, which are able to deal with several tape models, are blocked
if an request for a newer tape model arrives.
Please notice that caller is responsible for deleting the object.
@parameter the requested Extended Device Group for the tape
@return the free TapeDrive or NULL if there is none.
@exception in case of error" visibility="public" xmi.id="115695" type="TapeDrive*" isAbstract="true" name="selectFreeTapeDrive" >
       <UML:Parameter visibility="public" xmi.id="115696" value="" type="const ExtendedDeviceGroup*" name="extDevGrp" />
      </UML:Operation>
      <UML:Operation visibility="public" xmi.id="115697" type="TapeDrive*" isAbstract="true" name="selectTapeDrive" >
       <UML:Parameter visibility="public" xmi.id="115698" value="" type="const vdqmDrvReq_t*" name="driveRequest" />
       <UML:Parameter visibility="public" xmi.id="115699" value="" type="const TapeServer*" name="tapeServer" />
      </UML:Operation>
     </UML:Interface>
    </UML:Package>
   </UML:Package>
   <UML:Class stereotype="115687" visibility="public" xmi.id="115686" name="vdqmDrvReq_t" />
   <UML:Generalization child="115422" visibility="public" xmi.id="115429" parent="115420" />
   <UML:Generalization child="115427" visibility="public" xmi.id="115430" parent="115420" />
   <UML:Generalization child="115424" visibility="public" xmi.id="115431" parent="115420" />
   <UML:Generalization child="115425" visibility="public" xmi.id="115432" parent="115420" />
   <UML:Generalization child="115426" visibility="public" xmi.id="115433" parent="115420" />
   <UML:Generalization child="115423" visibility="public" xmi.id="115434" parent="115420" />
   <UML:Generalization child="115428" visibility="public" xmi.id="115435" parent="115420" />
   <UML:Generalization child="115436" visibility="public" xmi.id="115437" parent="115425" />
   <UML:Generalization child="115438" visibility="public" xmi.id="115439" parent="115426" />
   <UML:Generalization child="115440" visibility="public" xmi.id="115441" parent="115420" />
   <UML:Generalization child="115442" visibility="public" xmi.id="115443" parent="115440" />
   <UML:Generalization child="115442" visibility="public" xmi.id="115444" parent="115427" />
   <UML:Generalization child="115445" visibility="public" xmi.id="115446" parent="115440" />
   <UML:Generalization child="115445" visibility="public" xmi.id="115447" parent="115422" />
   <UML:Generalization child="115451" visibility="public" xmi.id="115452" parent="115440" />
   <UML:Generalization child="115451" visibility="public" xmi.id="115453" parent="115423" />
   <UML:Generalization child="115450" visibility="public" xmi.id="115454" parent="115440" />
   <UML:Generalization child="115450" visibility="public" xmi.id="115455" parent="115424" />
   <UML:Generalization child="115448" visibility="public" xmi.id="115456" parent="115440" />
   <UML:Generalization child="115449" visibility="public" xmi.id="115457" parent="115440" />
   <UML:Generalization child="115448" visibility="public" xmi.id="115458" parent="115425" />
   <UML:Generalization child="115449" visibility="public" xmi.id="115459" parent="115426" />
   <UML:Generalization child="115460" visibility="public" xmi.id="115461" parent="115440" />
   <UML:Generalization child="115460" visibility="public" xmi.id="115462" parent="115428" />
   <UML:Generalization child="115420" visibility="public" xmi.id="115464" parent="115463" />
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello" >
  <docsettings viewid="115410" documentation="" uniqueid="115699" />
  <diagrams>
   <diagram snapgrid="1" showattsig="1" fillcolor="#ffffc0" linewidth="0" zoom="75" showgrid="1" showopsig="1" usefillcolor="1" snapx="10" canvaswidth="1313" snapy="10" showatts="1" xmi.id="115410" documentation="" type="402" showops="1" showpackage="0" name="Services hierarchy" localid="30000" showstereotype="0" showscope="1" snapcsgrid="0" font="Nimbus Sans L,10,-1,5,50,0,0,0,0,0" linecolor="#ff0000" canvasheight="1085" >
    <widgets>
     <interfacewidget usesdiagramfillcolour="1" width="164" usesdiagramusefillcolour="1" x="588" linecolour="none" y="387" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="126" usefillcolor="1" isinstance="0" xmi.id="115428" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="187" usesdiagramusefillcolour="1" x="457" linecolour="none" y="57" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="126" usefillcolor="1" isinstance="0" xmi.id="115420" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="147" usesdiagramusefillcolour="1" x="307" linecolour="none" y="225" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="90" usefillcolor="1" isinstance="0" xmi.id="115424" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="149" usesdiagramusefillcolour="1" x="716" linecolour="none" y="235" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="90" usefillcolor="1" isinstance="0" xmi.id="115425" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="157" usesdiagramusefillcolour="1" x="972" linecolour="none" y="160" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="180" usefillcolor="1" isinstance="0" xmi.id="115426" showoperations="1" showpackage="0" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="164" usesdiagramusefillcolour="1" x="388" linecolour="none" y="435" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="90" usefillcolor="1" isinstance="0" xmi.id="115427" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="210" usesdiagramusefillcolour="1" x="5" linecolour="none" y="73" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="234" usefillcolor="1" isinstance="0" xmi.id="115422" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="219" usesdiagramusefillcolour="1" x="131" linecolour="none" y="325" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="270" usefillcolor="1" isinstance="0" xmi.id="115423" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="201" showattsigs="601" usesdiagramusefillcolour="1" x="800" linecolour="none" y="439" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="243" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115436" showoperations="1" showpackage="1" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="205" showattsigs="601" usesdiagramusefillcolour="1" x="1068" linecolour="none" y="413" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="315" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115438" showoperations="1" showpackage="1" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="112" showattsigs="601" usesdiagramusefillcolour="1" x="504" linecolour="none" y="722" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115440" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="92" showattsigs="601" usesdiagramusefillcolour="1" x="444" linecolour="none" y="982" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115442" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="95" showattsigs="601" usesdiagramusefillcolour="1" x="63" linecolour="none" y="862" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115445" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="85" showattsigs="601" usesdiagramusefillcolour="1" x="208" linecolour="none" y="932" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115451" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="72" showattsigs="601" usesdiagramusefillcolour="1" x="354" linecolour="none" y="882" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115450" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="74" showattsigs="601" usesdiagramusefillcolour="1" x="723" linecolour="none" y="922" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115448" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="78" showattsigs="601" usesdiagramusefillcolour="1" x="981" linecolour="none" y="872" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115449" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="92" showattsigs="601" usesdiagramusefillcolour="1" x="604" linecolour="none" y="962" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="36" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="115460" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Nimbus Sans L,10,-1,5,75,0,0,0,0,0" />
     <interfacewidget usesdiagramfillcolour="1" width="107" usesdiagramusefillcolour="1" x="712" linecolour="none" y="7" drawascircle="0" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="126" usefillcolor="1" isinstance="0" xmi.id="115463" showoperations="1" showpackage="1" showscope="1" font="Nimbus Sans L,10,-1,5,75,1,0,0,0,0" />
    </widgets>
    <messages/>
    <associations>
     <assocwidget totalcounta="2" indexa="1" totalcountb="2" indexb="1" widgetbid="115420" widgetaid="115422" xmi.id="115429" >
      <linepath>
       <startpoint startx="215" starty="190" />
       <endpoint endx="457" endy="120" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="6" indexb="3" widgetbid="115420" widgetaid="115427" xmi.id="115430" >
      <linepath>
       <startpoint startx="470" starty="435" />
       <endpoint endx="550" endy="183" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="6" indexb="1" widgetbid="115420" widgetaid="115424" xmi.id="115431" >
      <linepath>
       <startpoint startx="380" starty="225" />
       <endpoint endx="490" endy="183" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="4" indexb="3" widgetbid="115420" widgetaid="115425" xmi.id="115432" >
      <linepath>
       <startpoint startx="790" starty="235" />
       <endpoint endx="644" endy="150" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="4" indexb="2" widgetbid="115420" widgetaid="115426" xmi.id="115433" >
      <linepath>
       <startpoint startx="972" starty="250" />
       <endpoint endx="644" endy="120" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="6" indexb="2" widgetbid="115420" widgetaid="115423" xmi.id="115434" >
      <linepath>
       <startpoint startx="350" starty="460" />
       <endpoint endx="520" endy="183" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="6" indexb="5" widgetbid="115420" widgetaid="115428" xmi.id="115435" >
      <linepath>
       <startpoint startx="670" starty="387" />
       <endpoint endx="610" endy="183" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="3" indexb="2" widgetbid="115425" widgetaid="115436" xmi.id="115437" >
      <linepath>
       <startpoint startx="900" starty="439" />
       <endpoint endx="820" endy="325" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="3" indexb="2" widgetbid="115426" widgetaid="115438" xmi.id="115439" >
      <linepath>
       <startpoint startx="1170" starty="413" />
       <endpoint endx="1080" endy="340" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="6" indexb="4" widgetbid="115420" widgetaid="115440" xmi.id="115441" >
      <linepath>
       <startpoint startx="560" starty="722" />
       <endpoint endx="580" endy="183" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="2" totalcountb="7" indexb="3" widgetbid="115440" widgetaid="115442" xmi.id="115443" >
      <linepath>
       <startpoint startx="510" starty="982" />
       <endpoint endx="550" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="1" totalcountb="2" indexb="1" widgetbid="115427" widgetaid="115442" xmi.id="115444" >
      <linepath>
       <startpoint startx="470" starty="982" />
       <endpoint endx="470" endy="525" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="2" indexb="1" widgetbid="115440" widgetaid="115445" xmi.id="115446" >
      <linepath>
       <startpoint startx="158" starty="880" />
       <endpoint endx="504" endy="740" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="2" indexb="1" widgetbid="115422" widgetaid="115445" xmi.id="115447" >
      <linepath>
       <startpoint startx="110" starty="862" />
       <endpoint endx="110" endy="307" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="2" totalcountb="7" indexb="1" widgetbid="115440" widgetaid="115451" xmi.id="115452" >
      <linepath>
       <startpoint startx="260" starty="932" />
       <endpoint endx="520" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="1" totalcountb="2" indexb="1" widgetbid="115423" widgetaid="115451" xmi.id="115453" >
      <linepath>
       <startpoint startx="240" starty="932" />
       <endpoint endx="240" endy="595" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="2" totalcountb="7" indexb="2" widgetbid="115440" widgetaid="115450" xmi.id="115454" >
      <linepath>
       <startpoint startx="400" starty="882" />
       <endpoint endx="540" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="1" totalcountb="2" indexb="1" widgetbid="115424" widgetaid="115450" xmi.id="115455" >
      <linepath>
       <startpoint startx="380" starty="882" />
       <endpoint endx="380" endy="315" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="1" totalcountb="7" indexb="5" widgetbid="115440" widgetaid="115448" xmi.id="115456" >
      <linepath>
       <startpoint startx="750" starty="922" />
       <endpoint endx="580" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="7" indexb="6" widgetbid="115440" widgetaid="115449" xmi.id="115457" >
      <linepath>
       <startpoint startx="981" starty="890" />
       <endpoint endx="600" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="2" totalcountb="3" indexb="1" widgetbid="115425" widgetaid="115448" xmi.id="115458" >
      <linepath>
       <startpoint startx="770" starty="922" />
       <endpoint endx="770" endy="325" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="3" indexb="1" widgetbid="115426" widgetaid="115449" xmi.id="115459" >
      <linepath>
       <startpoint startx="1020" starty="872" />
       <endpoint endx="1020" endy="340" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="1" totalcountb="7" indexb="4" widgetbid="115440" widgetaid="115460" xmi.id="115461" >
      <linepath>
       <startpoint startx="630" starty="962" />
       <endpoint endx="570" endy="758" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="3" indexa="2" totalcountb="2" indexb="1" widgetbid="115428" widgetaid="115460" xmi.id="115462" >
      <linepath>
       <startpoint startx="670" starty="962" />
       <endpoint endx="670" endy="513" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="4" indexa="1" totalcountb="2" indexb="1" widgetbid="115463" widgetaid="115420" xmi.id="115464" >
      <linepath>
       <startpoint startx="644" starty="90" />
       <endpoint endx="712" endy="70" />
      </linepath>
     </assocwidget>
    </associations>
   </diagram>
  </diagrams>
  <listview>
   <listitem open="1" type="800" id="-1" label="Views" >
    <listitem open="1" type="801" id="-1" label="Logical View" >
     <listitem open="0" type="807" id="115410" label="Services hierarchy" />
     <listitem open="1" type="813" id="115440" />
     <listitem open="1" type="813" id="115450" />
     <listitem open="1" type="813" id="115448" />
     <listitem open="1" type="813" id="115449" />
     <listitem open="1" type="813" id="115442" />
     <listitem open="1" type="813" id="115445" />
     <listitem open="1" type="813" id="115451" />
     <listitem open="1" type="813" id="115460" />
     <listitem open="1" type="813" id="115686" />
     <listitem open="1" type="818" id="115467" >
      <listitem open="0" type="817" id="115463" >
       <listitem open="0" type="815" id="115616" />
       <listitem open="0" type="815" id="115614" />
       <listitem open="0" type="815" id="115615" />
       <listitem open="0" type="815" id="115617" />
       <listitem open="0" type="815" id="115613" />
      </listitem>
      <listitem open="1" type="818" id="115675" >
       <listitem open="0" type="817" id="115427" >
        <listitem open="0" type="815" id="115676" />
        <listitem open="0" type="815" id="115680" />
        <listitem open="0" type="815" id="115683" />
       </listitem>
      </listitem>
      <listitem open="1" type="818" id="115468" >
       <listitem open="0" type="813" id="115553" >
        <listitem open="0" type="815" id="115582" />
        <listitem open="0" type="815" id="115571" />
        <listitem open="0" type="815" id="115557" />
        <listitem open="0" type="815" id="115568" />
        <listitem open="0" type="815" id="115560" />
        <listitem open="0" type="815" id="115584" />
        <listitem open="0" type="815" id="115587" />
        <listitem open="0" type="815" id="115556" />
        <listitem open="0" type="815" id="115554" />
        <listitem open="0" type="815" id="115566" />
        <listitem open="0" type="815" id="115578" />
       </listitem>
       <listitem open="0" type="813" id="115436" >
        <listitem open="0" type="815" id="115622" />
        <listitem open="0" type="815" id="115618" />
        <listitem open="0" type="815" id="115625" />
        <listitem open="0" type="815" id="115627" />
        <listitem open="0" type="815" id="115640" />
        <listitem open="0" type="815" id="115621" />
        <listitem open="0" type="815" id="115638" />
        <listitem open="0" type="815" id="115629" />
        <listitem open="0" type="815" id="115631" />
        <listitem open="0" type="815" id="115623" />
        <listitem open="0" type="815" id="115634" />
        <listitem open="0" type="815" id="115620" />
       </listitem>
       <listitem open="0" type="813" id="115438" >
        <listitem open="0" type="815" id="115645" />
        <listitem open="0" type="815" id="115641" />
        <listitem open="0" type="815" id="115651" />
        <listitem open="0" type="815" id="115674" />
        <listitem open="0" type="815" id="115657" />
        <listitem open="0" type="815" id="115659" />
        <listitem open="0" type="815" id="115644" />
        <listitem open="0" type="815" id="115654" />
        <listitem open="0" type="815" id="115649" />
        <listitem open="0" type="815" id="115661" />
        <listitem open="0" type="815" id="115646" />
        <listitem open="0" type="815" id="115672" />
        <listitem open="0" type="815" id="115663" />
        <listitem open="0" type="815" id="115665" />
        <listitem open="0" type="815" id="115668" />
        <listitem open="0" type="815" id="115643" />
       </listitem>
       <listitem open="0" type="817" id="115420" >
        <listitem open="0" type="815" id="115517" />
        <listitem open="0" type="815" id="115508" />
        <listitem open="0" type="815" id="115510" />
        <listitem open="0" type="815" id="115506" />
        <listitem open="0" type="815" id="115513" />
       </listitem>
       <listitem open="0" type="817" id="115424" >
        <listitem open="0" type="815" id="115519" />
        <listitem open="0" type="815" id="115523" />
        <listitem open="0" type="815" id="115521" />
       </listitem>
       <listitem open="0" type="817" id="115425" >
        <listitem open="0" type="815" id="115527" />
        <listitem open="0" type="815" id="115529" />
        <listitem open="0" type="815" id="115525" />
       </listitem>
       <listitem open="0" type="817" id="115426" >
        <listitem open="0" type="815" id="115541" />
        <listitem open="0" type="815" id="115547" />
        <listitem open="0" type="815" id="115549" />
        <listitem open="0" type="815" id="115531" />
        <listitem open="0" type="815" id="115544" />
        <listitem open="0" type="815" id="115539" />
        <listitem open="0" type="815" id="115551" />
        <listitem open="0" type="815" id="115536" />
       </listitem>
       <listitem open="0" type="817" id="115422" >
        <listitem open="0" type="815" id="115497" />
        <listitem open="0" type="815" id="115486" />
        <listitem open="0" type="815" id="115472" />
        <listitem open="0" type="815" id="115483" />
        <listitem open="0" type="815" id="115475" />
        <listitem open="0" type="815" id="115499" />
        <listitem open="0" type="815" id="115502" />
        <listitem open="0" type="815" id="115471" />
        <listitem open="0" type="815" id="115469" />
        <listitem open="0" type="815" id="115481" />
        <listitem open="0" type="815" id="115493" />
       </listitem>
       <listitem open="0" type="817" id="115423" >
        <listitem open="0" type="815" id="115590" />
        <listitem open="0" type="815" id="115596" />
        <listitem open="0" type="815" id="115594" />
        <listitem open="0" type="815" id="115598" />
        <listitem open="0" type="815" id="115612" />
        <listitem open="0" type="815" id="115604" />
        <listitem open="0" type="815" id="115602" />
        <listitem open="0" type="815" id="115610" />
        <listitem open="0" type="815" id="115592" />
        <listitem open="0" type="815" id="115608" />
        <listitem open="0" type="815" id="115600" />
        <listitem open="0" type="815" id="115607" />
        <listitem open="0" type="815" id="115606" />
       </listitem>
      </listitem>
      <listitem open="0" type="818" id="115688" >
       <listitem open="0" type="817" id="115428" >
        <listitem open="0" type="815" id="115689" />
        <listitem open="0" type="815" id="115693" />
        <listitem open="0" type="815" id="115695" />
        <listitem open="0" type="815" id="115697" />
        <listitem open="0" type="815" id="115691" />
       </listitem>
      </listitem>
     </listitem>
     <listitem open="0" type="830" id="-1" label="Datatypes" >
      <listitem open="1" type="829" id="115414" />
      <listitem open="1" type="829" id="115413" />
      <listitem open="1" type="829" id="115416" />
      <listitem open="1" type="829" id="115415" />
      <listitem open="1" type="829" id="115411" />
      <listitem open="1" type="829" id="115417" />
      <listitem open="1" type="829" id="115418" />
      <listitem open="1" type="829" id="115419" />
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="-1" label="Use Case View" />
    <listitem open="1" type="821" id="-1" label="Component View" />
    <listitem open="1" type="827" id="-1" label="Deployment View" />
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Cpp" >
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115420" parent_class="115420" fileExt=".cpp" fileName="icommonsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;iservice.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115506" tag="operation_115506" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a SvcClass from the database based on its name.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param name the name of the SvcClass&amp;#010;@return the SvcClass, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115508" tag="operation_115508" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a FileClass from the database based on its name.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param name the name of the FileClass&amp;#010;@return the FileClass, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115510" tag="operation_115510" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115513" tag="operation_115513" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115517" tag="operation_115517" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      icommonsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115423" parent_class="115423" fileExt=".cpp" fileName="itapesvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115590" tag="operation_115590" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Check if there still are any segments waiting for a given tape.&amp;#010;Before a tape is physically mounted, the VidWorker process will&amp;#010;check if there still are Segments entries waiting for this tape.&amp;#010;If not, the tape request is cancelled. If there is at least one&amp;#010;matching entry, the matching catalog entries Tape status should be&amp;#010;updated to TAPE_WAITMOUNT before return.&amp;#010;TAPE_WAITMOUNT indicates that the tape request will continue&amp;#010;mounting the tape and the matching Segments entries should normally&amp;#010;wait for this tape to be mounted. This means that if the CASTOR&amp;#010;file has multiple tape copies, the tape requests for the other&amp;#010;copies should be cancelled unless there are outstanding requests&amp;#010;for other files that reside on that tape.&amp;#010;@param searchItem the tape information used for the search&amp;#010;@return >0 : number of waiting requests found. 0 : no requests found&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115592" tag="operation_115592" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115594" tag="operation_115594" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Finds the best filesystem for a given segment.&amp;#010;Looks for a filesystem where to write the segment content&amp;#010;once it will be retrieved from tape. This file system&amp;#010;must have enough space and the one with the biggest weight&amp;#010;will be taken (if any).&amp;#010;If a filesystem is chosen, then the link with the only&amp;#010;DiskCopy available for the CastorFile the segment belongs&amp;#010;to is created.&amp;#010;@param segment the segment we are dealing with&amp;#010;@return The only DiskCopy available for the CastorFile the&amp;#010;segment belongs too. A DiskCopyForRecall is actually returned&amp;#010;that contains additionnal information. The Castorfile associated&amp;#010;is also created&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115596" tag="operation_115596" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Check if there still is any tapeCopy waiting for a stream.&amp;#010;The matching TapeCopies entry must have the status&amp;#010;TAPECOPY_WAITINSTREAM. If there is at least one, the Stream&amp;#010;status is updated to STREAM_WAITMOUNT before return. This&amp;#010;indicates that the stream will continue mounting the tape.&amp;#010;@param searchItem the stream information used for the search&amp;#010;@return whether a Tapecopy is waiting&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115598" tag="operation_115598" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115600" tag="operation_115600" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115602" tag="operation_115602" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates the database when a file recall is successfully over.&amp;#010;This includes updating the DiskCopy status to DISKCOPY_STAGED&amp;#010;(note that it is guaranteed that there is a single&amp;#010;diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).&amp;#010;It also includes updating the status of the corresponding&amp;#010;SubRequest to SUBREQUEST_RESTART and updating the status of&amp;#010;the SubRequests waiting on this recall to SUBREQUEST_RESTART&amp;#010;@param tapeCopy the TapeCopy that was just recalled&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115604" tag="operation_115604" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates the database when a file recall failed.&amp;#010;This includes updating the DiskCopy status to DISKCOPY_FAILED&amp;#010;(note that it is garanted that there is a single&amp;#010;diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).&amp;#010;It also includes updating the status of the corresponding&amp;#010;SubRequest to SUBREQUEST_FAILED and updating the status of&amp;#010;the SubRequests waiting on this recall to SUBREQUEST_FAILED&amp;#010;@param tapeCopy the TapeCopy that was just recalled&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115606" tag="operation_115606" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get an array of the tapes to be processed.&amp;#010;This method searches the request catalog for all tapes that are&amp;#010;in TAPE_PENDING status. It atomically updates the status to&amp;#010;TAPE_WAITVDQM and returns the corresponding Tape objects.&amp;#010;This means that a subsequent call to this method will not return&amp;#010;the same entries. Objects may be present n times in the returned&amp;#010;vector of tapes. The rtcpclientd will notice multiple identical&amp;#010;requests and only submit one of them to VDQM.&amp;#010;@return vector of tapes to be processed&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115607" tag="operation_115607" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get an array of the streams to be processed.&amp;#010;This method searches the stager catalog for all streams that are&amp;#010;in STREAM_PENDING status. It atomically updates the status to&amp;#010;STREAM_WAITDRIVE and returns the corresponding STREAM objects.&amp;#010;This means that a subsequent call to this method will not return&amp;#010;the same entries.&amp;#010;@return vector of streams to be processed&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115608" tag="operation_115608" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves the TapeCopies from the database that have&amp;#010;status TAPECOPY_CREATED or TAPECOPY_TOBEMIGRATED and&amp;#010;have a castorFile linked to the right SvcClass.&amp;#010;Changes their status to TAPECOPY_WAITINSTREAMS.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param svcClass the SvcClass we select on&amp;#010;@return a vector of matching TapeCopies&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115610" tag="operation_115610" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="resets a stream by either deleting it or setting&amp;#010;its status to STREAM_PENDING depending on whether&amp;#010;there are TapeCopies in status WAITINSTREAMS status.&amp;#010;Also deletes all links to TapeCopies for this stream&amp;#010;@param stream the stream to reset&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115612" tag="operation_115612" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      itapesvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115424" parent_class="115424" fileExt=".cpp" fileName="ifssvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115519" tag="operation_115519" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a DiskPool from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the disk pool&amp;#010;@return the DiskPool object or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115521" tag="operation_115521" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a TapePool from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the tape pool&amp;#010;@return the TapePool object or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115523" tag="operation_115523" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a DiskServer from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the disk server&amp;#010;@return the DiskServer object or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ifssvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115425" parent_class="115425" fileExt=".cpp" fileName="igcsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115525" tag="operation_115525" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="List files to be deleted on a given diskServer.&amp;#010;These are the files corresponding to DiskCopies&amp;#010;in GCCANDIDATE status. This status is changed&amp;#010;to BEINGDELETED atomically.&amp;#010;@param diskServer the name of the DiskServer&amp;#010;involved&amp;#010;@return a list of files. The id of the DiskCopy&amp;#010;is given as well as the local path on the server.&amp;#010;Note that the returned vector should be deallocated&amp;#010;by the caller as well as its content" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115527" tag="operation_115527" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager of files effectively deleted.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will be deleted from the catalog&amp;#010;as well as the CastorFile if there is no other&amp;#010;copy.&amp;#010;@param diskCopyIds the list of diskcopies deleted&amp;#010;given by their id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115529" tag="operation_115529" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager of files for which deletion failed.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will marked FAILED in the catalog.&amp;#010;@param diskCopyIds the list of diskcopies for which&amp;#010;deletion failed given by their id" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      igcsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115426" parent_class="115426" fileExt=".cpp" fileName="ijobsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115531" tag="operation_115531" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Handles the start of a Get or Update job.&amp;#010;Schedules the corresponding SubRequest on a given&amp;#010;FileSystem and returns the DiskCopy to use for data&amp;#010;access.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;Depending on the available DiskCopies for the file&amp;#010;the SubRequest deals with, we have different cases :&amp;#010; - no DiskCopy at all and file is not of size 0 :&amp;#010;a DiskCopy is created with status DISKCOPY_WAITTAPERECALL.&amp;#010;Null pointer is returned&amp;#010; - no DiskCopy at all and file is of size 0 :&amp;#010;a DiskCopy is created with status DISKCOPY_WAIDISK2DISKCOPY.&amp;#010;This diskCopy is returned and the emptyFile content is&amp;#010;set to true.&amp;#010; - one DiskCopy in DISKCOPY_WAITTAPERECALL, DISKCOPY_WAITFS&amp;#010;or DISKCOPY_WAITDISK2DISKCOPY status :&amp;#010;the SubRequest is linked to the one recalling and&amp;#010;put in SUBREQUEST_WAITSUBREQ status. Null pointer is&amp;#010;returned.&amp;#010; - no valid (STAGE*, WAIT*) DiskCopy on the selected&amp;#010;FileSystem but some in status DISKCOPY_STAGEOUT or&amp;#010;DISKCOPY_STAGED on other FileSystems : a new DiskCopy&amp;#010;is created with status DISKCOPY_WAITDISK2DISKCOPY.&amp;#010;It is returned and the sources parameter is filed&amp;#010;with the DiskCopies found on the non selected FileSystems.&amp;#010; - one DiskCopy on the selected FileSystem in&amp;#010;DISKCOPY_STAGEOUT or DISKCOPY_STAGED status :&amp;#010;the SubRequest is ready, the DiskCopy is returned and&amp;#010;sources remains empty.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used as source of a Disk to Disk copy. This&amp;#010;list is never empty when diskCopy has status&amp;#010;DISKCOPY_DISK2DISKCOPY and always empty otherwise.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@param emptyFile whether the resulting diskCopy&amp;#010;deals with the recall of an empty file&amp;#010;@return the DiskCopy to use for the data access or&amp;#010;a null pointer if the data access will have to wait&amp;#010;and there is nothing more to be done. Even in case&amp;#010;of a non null pointer, the data access will have to&amp;#010;wait for a disk to disk copy if the returned DiskCopy&amp;#010;is in DISKCOPY_WAITDISKTODISKCOPY status. This&amp;#010;disk to disk copy is the responsability of the caller.&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115536" tag="operation_115536" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Handles the start of a Put job.&amp;#010;Links the DiskCopy associated to the SubRequest to&amp;#010;the given FileSystem and updates the DiskCopy status&amp;#010;to DISKCOPY_STAGEOUT.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115539" tag="operation_115539" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Handles the start of a PutDone job.&amp;#010;Actually only returns the DiskCopy associated to the SubRequest&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;If a null  DiskCopy is returned then the PutDone&amp;#010;was put in waiting mode and the caller should stop&amp;#010;processing it&amp;#010;@param subreqId the if of the SubRequest to consider&amp;#010;@return the DiskCopy to use for the data access or&amp;#010;0 if the PutDone should wait&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115541" tag="operation_115541" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates database after successful completion of a&amp;#010;disk to disk copy. This includes setting the DiskCopy&amp;#010;status to DISKCOPY_STAGED and setting the SubRequest&amp;#010;status to SUBREQUEST_READY.&amp;#010;Changes are commited&amp;#010;@param diskcopyId the id of the new DiskCopy&amp;#010;@param status the status of the new DiskCopy&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115544" tag="operation_115544" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Prepares a file for migration, when needed.&amp;#010;This is called both when a stagePut is over and when a&amp;#010;putDone request is processed.&amp;#010;In the case of a stagePut that in part of a PrepareToPut,&amp;#010;it actually does not prepare the file for migration&amp;#010;but only updates its size in DB and name server.&amp;#010;Otherwise (stagePut with no prepare and putDone),&amp;#010;it also updates the filesystem free space and creates&amp;#010;the needed TapeCopies according to the FileClass of the&amp;#010;castorFile.&amp;#010;@param subreq The SubRequest handling the file to prepare&amp;#010;@param fileSize The actual size of the castor file&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115547" tag="operation_115547" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) was finished successfully.&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the finished SubRequest" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115549" tag="operation_115549" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115551" tag="operation_115551" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Put SubRequest failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ijobsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::query" id="115427" parent_class="115427" fileExt=".cpp" fileName="iquerysvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115676" tag="operation_115676" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Gets all DiskCopies for a given file.&amp;#010;The caller is responsible for the deallocation of&amp;#010;the returned objects&amp;#010;@param fileId the fileId identifying the file&amp;#010;@param nsHost the name server host for this file&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115680" tag="operation_115680" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Gets all DiskCopies for a given request.&amp;#010;@param requestId the CASTOR ID of the request&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115683" tag="operation_115683" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Gets all DiskCopies for a given usertag&amp;#010;@param usertag The usertag of the requests&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      iquerysvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::vdqm" id="115428" parent_class="115428" fileExt=".cpp" fileName="ivdqmsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115689" tag="operation_115689" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Checks, if there is an entry in the ExtendedDeviceGroup table,&amp;#010;which has exactly these parameters&amp;#010;@return true, if the entry exists&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115691" tag="operation_115691" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a TapeServer from the database based on its serverName. &amp;#010;If no tapeServer is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tapeServer and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param serverName The name of the server&amp;#010;@return the tapeServer. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape server found,&amp;#010;several tape servers found, DB problem, etc...)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115693" tag="operation_115693" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Checks, if there is already an entry for that tapeRequest. The entry&amp;#010;must have exactly the same ID.&amp;#010;&amp;#010;@return 0 : The row number, &amp;#010;        0 : The request is handled at the moment from a TapeDrive, &amp;#010;        -1: if there is no entry for it.&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115695" tag="operation_115695" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Looks for the best fitting tape drive. If it is for example an&amp;#010;older tape, it will first look if an older drive is free, before&amp;#010;it chooses a newer one. This strategy should avoid, that the newer&amp;#010;drive, which are able to deal with several tape models, are blocked&amp;#010;if an request for a newer tape model arrives.&amp;#010;Please notice that caller is responsible for deleting the object.&amp;#010;@parameter the requested Extended Device Group for the tape&amp;#010;@return the free TapeDrive or NULL if there is none.&amp;#010;@exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115697" tag="operation_115697" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ivdqmsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115436" parent_class="115436" fileExt=".cpp" fileName="remotegcsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;igcsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115618" tag="operation_115618" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="default constructor" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115620" tag="operation_115620" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="default destructor" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115621" tag="operation_115621" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115622" tag="operation_115622" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115623" tag="operation_115623" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="List files to be deleted on a given diskServer.&amp;#010;These are the files corresponding to DiskCopies&amp;#010;in GCCANDIDATE status. This status is changed&amp;#010;to BEINGDELETED atomically.&amp;#010;@param diskServer the name of the DiskServer&amp;#010;involved&amp;#010;@return a list of files. The id of the DiskCopy&amp;#010;is given as well as the local path on the server.&amp;#010;Note that the returned vector should be deallocated&amp;#010;by the caller as well as its content" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115625" tag="operation_115625" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager of files effectively deleted.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will be deleted from the catalog&amp;#010;as well as the CastorFile if there is no other&amp;#010;copy.&amp;#010;@param diskCopyIds the list of diskcopies deleted&amp;#010;given by their id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115627" tag="operation_115627" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager of files for which deletion failed.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will markes FAILED in the catalog.&amp;#010;@param diskCopyIds the list of diskcopies for which&amp;#010;deletion failed given by their id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115629" tag="operation_115629" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115631" tag="operation_115631" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115634" tag="operation_115634" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115638" tag="operation_115638" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115640" tag="operation_115640" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      remotegcsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115438" parent_class="115438" fileExt=".cpp" fileName="remotejobsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;ijobsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115641" tag="operation_115641" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="default constructor" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115643" tag="operation_115643" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="default destructor" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115644" tag="operation_115644" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115645" tag="operation_115645" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115646" tag="operation_115646" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Handles the start of a Put job.&amp;#010;Links the DiskCopy associated to the SubRequest to&amp;#010;the given FileSystem and updates the DiskCopy status&amp;#010;to DISKCOPY_STAGEOUT.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115649" tag="operation_115649" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Handles the start of a PutDone job.&amp;#010;Actually only returns the DiskCopy associated to the SubRequest&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreqId the if of the SubRequest to consider&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115651" tag="operation_115651" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates database after successful completion of a&amp;#010;disk to disk copy. This includes setting the DiskCopy&amp;#010;status to DISKCOPY_STAGED and setting the SubRequest&amp;#010;status to SUBREQUEST_READY.&amp;#010;Changes are commited&amp;#010;@param diskcopyId the id of the new DiskCopy&amp;#010;@param status the status of the new DiskCopy&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115654" tag="operation_115654" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Prepares a file for migration, when needed.&amp;#010;This is called both when a stagePut is over and when a&amp;#010;putDone request is processed.&amp;#010;In the case of a stagePut that in part of a PrepareToPut,&amp;#010;it actually does not prepare the file for migration&amp;#010;but only updates its size in DB and name server.&amp;#010;Otherwise (stagePut with no prepare and putDone),&amp;#010;it also updates the filesystem free space and creates&amp;#010;the needed TapeCopies according to the FileClass of the&amp;#010;castorFile.&amp;#010;@param subreq The SubRequest handling the file to prepare&amp;#010;@param fileSize The actual size of the castor file&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115657" tag="operation_115657" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) was finished successfully.&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the finished SubRequest" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115659" tag="operation_115659" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115661" tag="operation_115661" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Informs the stager the a Put SubRequest failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115663" tag="operation_115663" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115665" tag="operation_115665" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115668" tag="operation_115668" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115672" tag="operation_115672" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115674" tag="operation_115674" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      remotejobsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115440" parent_class="115440" fileExt=".cpp" fileName="oracommonsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oracommonsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115442" parent_class="115442" fileExt=".cpp" fileName="oraquerysvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;iquerysvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oraquerysvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115445" parent_class="115445" fileExt=".cpp" fileName="orastagersvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;istagersvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orastagersvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115448" parent_class="115448" fileExt=".cpp" fileName="oragcsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;igcsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oragcsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115449" parent_class="115449" fileExt=".cpp" fileName="orajobsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ijobsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orajobsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115450" parent_class="115450" fileExt=".cpp" fileName="orafssvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ifssvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orafssvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115451" parent_class="115451" fileExt=".cpp" fileName="oratapesvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;itapesvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oratapesvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115460" parent_class="115460" fileExt=".cpp" fileName="oravdqmsvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ivdqmsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oravdqmsvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor" id="115463" parent_class="115463" fileExt=".cpp" fileName="iservice" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115613" tag="operation_115613" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115614" tag="operation_115614" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service id" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115615" tag="operation_115615" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Get the service name" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115616" tag="operation_115616" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="adds a reference to this service" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115617" tag="operation_115617" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="removes a reference to the service and releases it&amp;#010;if the count goes to 0" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      iservice.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115422" parent_class="115422" fileExt=".cpp" fileName="istagersvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115469" tag="operation_115469" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next SubRequest the stager should deal with.&amp;#010;Selects a SubRequest in START, RESTART or RETRY status&amp;#010;and move its status to SUBREQUEST_WAITSCHED to avoid&amp;#010;double processing.&amp;#010;The selection is restricted to SubRequest associated to&amp;#010;requests of a given set of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;associated to the returned subrequest&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115471" tag="operation_115471" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next SubRequest in FAILED status the stager&amp;#010;should deal with.&amp;#010;Selects a SubRequest in FAILED status and move its status&amp;#010;to FAILED_ANSWERING to avoid double processing.&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115472" tag="operation_115472" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Decides whether a SubRequest should be scheduled.&amp;#010;Looks at all diskCopies for the file a SubRequest&amp;#010;deals with and depending on them, decides whether&amp;#010;to schedule the SubRequest. In case it can be scheduled,&amp;#010;also returns a list of diskcopies available to the&amp;#010;subrequest.&amp;#010;The scheduling decision is taken this way :&amp;#010;  - if no diskCopy is found, return true (scheduling&amp;#010;for tape recall) and sources stays empty.&amp;#010;  - if some diskcopies are found but all in WAIT*&amp;#010;status, return false (no schedule) and link the SubRequest&amp;#010;to the one we're waiting on + set its status to&amp;#010;SUBREQUEST_WAITSUBREQ. Sources stays empty.&amp;#010;  - if some diskcopies are found in STAGED/STAGEOUT&amp;#010;status, return true and list them in sources.&amp;#010;@param subreq the SubRequest to consider&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used by the subrequest.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@return whether to schedule it&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115475" tag="operation_115475" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a CastorFile from the database based on its fileId&amp;#010;and name server. Creates a new one if none if found.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@param svcClass the service class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileClass the file class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileSize the size fo the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@return the CastorFile, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115481" tag="operation_115481" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates a SubRequest status in the DB, including&amp;#010;the answered flag that is set to 1 and tells&amp;#010;whether the request to which it belongs still&amp;#010;has some other SubRequests that were not processed.&amp;#010;By not processed we mean that their &quot;answered&quot; flag&amp;#010;is not set AND their status is neither READY neither&amp;#010;FINISHED nor one of the FAILED* status.&amp;#010;The two operations are executed atomically.&amp;#010;The update is commited before returning.&amp;#010;This method should only be called when the calling&amp;#010;process is answering to the client. In other cases,&amp;#010;the updateRep method should be used.&amp;#010;@param subreq the SubRequest to update&amp;#010;@return whether there are still SubRequests in&amp;#010;SUBREQUEST_START status within the same request&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115483" tag="operation_115483" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Recreates a castorFile.&amp;#010;Depending on the context, this method cleans up the&amp;#010;database when a castor file is recreated or gets&amp;#010;the unique DiskCopy of a castor file.&amp;#010;When called in the context of a Put inside a&amp;#010;PrepareToPut, the method returns the unique DiskCopy&amp;#010;associated to the castorFile. This DiskCopy can be&amp;#010;either in WAITFS, WAITFS_SCHEDULING or STAGEOUT&amp;#010;status and is linked to the SubRequest.&amp;#010;In all others cases, the method first&amp;#010;checks whether the recreation is possible.&amp;#010;A recreation is considered to be possible if&amp;#010;no TapeCopy of the given file is in TAPECOPY_SELECTED&amp;#010;status and no DiskCopy of the file is in either&amp;#010;WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or&amp;#010;WAITDISK2DISKCOPY status. When recreation is not&amp;#010;possible, a null pointer is returned.&amp;#010;Else, all DiskCopies for the given file are marked&amp;#010;INVALID (that is those not in DISKCOPY_FAILED and&amp;#010;DISKCOPY_DELETED status) and all TapeCopies are&amp;#010;deleted. A new DiskCopy is then created in&amp;#010;DISKCOPY_WAITFS status, linked to the given&amp;#010;SubRequest returned.&amp;#010;Note that everything is commited and that the caller&amp;#010;is responsible for the deletion of the returned&amp;#010;DiskCopy (if any)&amp;#010;@param castorFile the file to recreate&amp;#010;@param subreq the SubRequest recreating the file&amp;#010;@return the new DiskCopy in DISKCOPY_WAITFS status&amp;#010;or null if recreation is not possible&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115486" tag="operation_115486" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects a machine and FileSystem for a given job.&amp;#010;@param fileSystems the list of allowed filesystems&amp;#010;according to job requirements (given by id). This&amp;#010;is the fileSystems' mountPoint, the corresponding&amp;#010;machines are given by parameter machines.&amp;#010;A null array means that any filesystem is eligible&amp;#010;@param machines the machines on which the filesystems&amp;#010;in parameter fileSystems reside.&amp;#010;A null array means that any machine is eligible. in such&amp;#010;a case, fileSystems has to be null.&amp;#010;@param minFree the minimum free space needed on each&amp;#010;filesystem to be selected. This is filesystem dependent&amp;#010;if filesystems are given (due to possible reservations&amp;#010;of the scheduler).&amp;#010;If no filesystem are given, this array must have&amp;#010;exactely one item, used for all filesystems.&amp;#010;@param fileSystemsNb the length of the arrays&amp;#010;fileSystems, machines and minFree when they are not&amp;#010;null (and if filesystems are given for minFree)&amp;#010;@mountPoint the selected fileSystem's mountPoint&amp;#010;@diskServer the diskServer on which the selected&amp;#010;fileSystem resides.&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115493" tag="operation_115493" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates a filesystem state (e.g : weight,&amp;#010;fsdeviation) to take into account the opening of&amp;#010;a new job.&amp;#010;@param fileSystem the file system mount point&amp;#010;@param diskServer the name of the diskserver&amp;#010;where the filesystem resides&amp;#010;@param fileSize the (supposed) size of the file&amp;#010;to be written by the job&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115497" tag="operation_115497" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Archives a SubRequest&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the SubRequest to archive" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115499" tag="operation_115499" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Implements a single file stageRelease.&amp;#010;It throws a Busy exception in case the file is&amp;#010;used by any request or is waiting for migration.&amp;#010;Otherwise, it marks all the copies of the file&amp;#010;as candidate for the garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115502" tag="operation_115502" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Implements a single file stageRm.&amp;#010;It throws a Busy exception in case the file is&amp;#010;beging migrated. Otherwise, it deletes all&amp;#010;running requests for the file and marks all&amp;#010;the copies of the file as candidate for the&amp;#010;garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      istagersvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <codedocument writeOutCode="false" package="" id="Makefile_DOC" fileExt="" fileName="Makefile" >
     <textblocks/>
     <header>
      <codecomment tag="" />
     </header>
    </codedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="115553" parent_class="115553" fileExt=".cpp" fileName="istagersvc" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="115554" tag="operation_115554" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next SubRequest the stager should deal with.&amp;#010;Selects a SubRequest in START, RESTART or RETRY status&amp;#010;and move its status to SUBREQUEST_WAITSCHED to avoid&amp;#010;double processing.&amp;#010;The selection is restricted to SubRequest associated to&amp;#010;requests of a given set of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;associated to the returned subrequest&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115556" tag="operation_115556" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects the next SubRequest in FAILED status the stager&amp;#010;should deal with.&amp;#010;Selects a SubRequest in FAILED status and move its status&amp;#010;to FAILED_ANSWERING to avoid double processing.&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115557" tag="operation_115557" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Decides whether a SubRequest should be scheduled.&amp;#010;Looks at all diskCopies for the file a SubRequest&amp;#010;deals with and depending on them, decides whether&amp;#010;to schedule the SubRequest. In case it can be scheduled,&amp;#010;also returns a list of diskcopies available to the&amp;#010;subrequest.&amp;#010;The scheduling decision is taken this way :&amp;#010;  - if no diskCopy is found, return true (scheduling&amp;#010;for tape recall) and sources stays empty.&amp;#010;  - if some diskcopies are found but all in WAIT*&amp;#010;status, return false (no schedule) and link the SubRequest&amp;#010;to the one we're waiting on + set its status to&amp;#010;SUBREQUEST_WAITSUBREQ. Sources stays empty.&amp;#010;  - if some diskcopies are found in STAGED/STAGEOUT&amp;#010;status, return true and list them in sources.&amp;#010;@param subreq the SubRequest to consider&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used by the subrequest.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@return whether to schedule it&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115560" tag="operation_115560" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Retrieves a CastorFile from the database based on its fileId&amp;#010;and name server. Creates a new one if none if found.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@param svcClass the service class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileClass the file class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileSize the size fo the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@return the CastorFile, or 0 if none found&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115566" tag="operation_115566" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates a SubRequest status in the DB, including&amp;#010;the answered flag that is set to 1 and tells&amp;#010;whether the request to which it belongs still&amp;#010;has some other SubRequests that were not processed.&amp;#010;By not processed we mean that their &quot;answered&quot; flag&amp;#010;is not set AND their status is neither READY neither&amp;#010;FINISHED nor one of the FAILED* status.&amp;#010;The two operations are executed atomically.&amp;#010;The update is commited before returning.&amp;#010;This method should only be called when the calling&amp;#010;process is answering to the client. In other cases,&amp;#010;the updateRep method should be used.&amp;#010;@param subreq the SubRequest to update&amp;#010;@return whether there are still SubRequests in&amp;#010;SUBREQUEST_START status within the same request&amp;#010;@exception Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115568" tag="operation_115568" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Recreates a castorFile.&amp;#010;Depending on the context, this method cleans up the&amp;#010;database when a castor file is recreated or gets&amp;#010;the unique DiskCopy of a castor file.&amp;#010;When called in the context of a Put inside a&amp;#010;PrepareToPut, the method returns the unique DiskCopy&amp;#010;associated to the castorFile. This DiskCopy can be&amp;#010;either in WAITFS, WAITFS_SCHEDULING or STAGEOUT&amp;#010;status and is linked to the SubRequest.&amp;#010;In all others cases, the method first&amp;#010;checks whether the recreation is possible.&amp;#010;A recreation is considered to be possible if&amp;#010;no TapeCopy of the given file is in TAPECOPY_SELECTED&amp;#010;status and no DiskCopy of the file is in either&amp;#010;WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or&amp;#010;WAITDISK2DISKCOPY status. When recreation is not&amp;#010;possible, a null pointer is returned.&amp;#010;Else, all DiskCopies for the given file are marked&amp;#010;INVALID (that is those not in DISKCOPY_FAILED and&amp;#010;DISKCOPY_DELETED status) and all TapeCopies are&amp;#010;deleted. A new DiskCopy is then created in&amp;#010;DISKCOPY_WAITFS status, linked to the given&amp;#010;SubRequest returned.&amp;#010;Note that everything is commited and that the caller&amp;#010;is responsible for the deletion of the returned&amp;#010;DiskCopy (if any)&amp;#010;@param castorFile the file to recreate&amp;#010;@param subreq the SubRequest recreating the file&amp;#010;@return the new DiskCopy in DISKCOPY_WAITFS status&amp;#010;or null if recreation is not possible&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115571" tag="operation_115571" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Selects a machine and FileSystem for a given job.&amp;#010;@param fileSystems the list of allowed filesystems&amp;#010;according to job requirements (given by id). This&amp;#010;is the fileSystems' mountPoint, the corresponding&amp;#010;machines are given by parameter machines.&amp;#010;A null array means that any filesystem is eligible&amp;#010;@param machines the machines on which the filesystems&amp;#010;in parameter fileSystems reside.&amp;#010;A null array means that any machine is eligible. in such&amp;#010;a case, fileSystems has to be null.&amp;#010;@param minFree the minimum free space needed on each&amp;#010;filesystem to be selected. This is filesystem dependent&amp;#010;if filesystems are given (due to possible reservations&amp;#010;of the scheduler).&amp;#010;If no filesystem are given, this array must have&amp;#010;exactely one item, used for all filesystems.&amp;#010;@param fileSystemsNb the length of the arrays&amp;#010;fileSystems, machines and minFree when they are not&amp;#010;null (and if filesystems are given for minFree)&amp;#010;@mountPoint the selected fileSystem's mountPoint&amp;#010;@diskServer the diskServer on which the selected&amp;#010;fileSystem resides.&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115578" tag="operation_115578" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Updates a filesystem state (e.g : weight,&amp;#010;fsdeviation) to take into account the opening of&amp;#010;a new job.&amp;#010;@param fileSystem the file system mount point&amp;#010;@param diskServer the name of the diskserver&amp;#010;where the filesystem resides&amp;#010;@param fileSize the (supposed) size of the file&amp;#010;to be written by the job&amp;#010;@exception Exception throws an Exception in case of error" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115582" tag="operation_115582" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Archives a SubRequest&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the SubRequest to archive" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115584" tag="operation_115584" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Implements a single file stageRelease.&amp;#010;It throws a Busy exception in case the file is&amp;#010;used by any request or is waiting for migration.&amp;#010;Otherwise, it marks all the copies of the file&amp;#010;as candidate for the garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
         </header>
        </codeoperation>
        <codeoperation parent_id="115587" tag="operation_115587" canDelete="false" writeOutText="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Implements a single file stageRm.&amp;#010;It throws a Busy exception in case the file is&amp;#010;beging migrated. Otherwise, it deletes all&amp;#010;running requests for the file and marks all&amp;#010;the copies of the file as candidate for the&amp;#010;garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      istagersvc.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="115686" parent_class="115686" fileExt=".cpp" fileName="vdqmdrvreq_t" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;string&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      vdqmdrvreq_t.cpp&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115420" parent_class="115420" fileExt=".h" fileName="icommonsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ICOMMONSVC_H&amp;#010;#define ICOMMONSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;iservice.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using castor::stager::ICommonSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115420" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface ICommonSvc&amp;#010;This class provides common methods useful to the stager to&amp;#010;deal with database queries" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="ICommonSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115506" tag="operation_115506" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a SvcClass from the database based on its name.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param name the name of the SvcClass&amp;#010;@return the SvcClass, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115508" tag="operation_115508" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a FileClass from the database based on its name.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param name the name of the FileClass&amp;#010;@return the FileClass, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115510" tag="operation_115510" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115513" tag="operation_115513" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115517" tag="operation_115517" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ICOMMONSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      icommonsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115423" parent_class="115423" fileExt=".h" fileName="itapesvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ITAPESVC_H&amp;#010;#define ITAPESVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115423" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface ITapeSvc&amp;#010;This class provides methods related to tape handling" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="ITapeSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115590" tag="operation_115590" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Check if there still are any segments waiting for a given tape.&amp;#010;Before a tape is physically mounted, the VidWorker process will&amp;#010;check if there still are Segments entries waiting for this tape.&amp;#010;If not, the tape request is cancelled. If there is at least one&amp;#010;matching entry, the matching catalog entries Tape status should be&amp;#010;updated to TAPE_WAITMOUNT before return.&amp;#010;TAPE_WAITMOUNT indicates that the tape request will continue&amp;#010;mounting the tape and the matching Segments entries should normally&amp;#010;wait for this tape to be mounted. This means that if the CASTOR&amp;#010;file has multiple tape copies, the tape requests for the other&amp;#010;copies should be cancelled unless there are outstanding requests&amp;#010;for other files that reside on that tape.&amp;#010;@param searchItem the tape information used for the search&amp;#010;@return >0 : number of waiting requests found. 0 : no requests found&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115592" tag="operation_115592" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param searchItem " />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115594" tag="operation_115594" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Finds the best filesystem for a given segment.&amp;#010;Looks for a filesystem where to write the segment content&amp;#010;once it will be retrieved from tape. This file system&amp;#010;must have enough space and the one with the biggest weight&amp;#010;will be taken (if any).&amp;#010;If a filesystem is chosen, then the link with the only&amp;#010;DiskCopy available for the CastorFile the segment belongs&amp;#010;to is created.&amp;#010;@param segment the segment we are dealing with&amp;#010;@return The only DiskCopy available for the CastorFile the&amp;#010;segment belongs too. A DiskCopyForRecall is actually returned&amp;#010;that contains additionnal information. The Castorfile associated&amp;#010;is also created&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115596" tag="operation_115596" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Check if there still is any tapeCopy waiting for a stream.&amp;#010;The matching TapeCopies entry must have the status&amp;#010;TAPECOPY_WAITINSTREAM. If there is at least one, the Stream&amp;#010;status is updated to STREAM_WAITMOUNT before return. This&amp;#010;indicates that the stream will continue mounting the tape.&amp;#010;@param searchItem the stream information used for the search&amp;#010;@return whether a Tapecopy is waiting&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115598" tag="operation_115598" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param searchItem " />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115600" tag="operation_115600" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param tapePool " />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115602" tag="operation_115602" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates the database when a file recall is successfully over.&amp;#010;This includes updating the DiskCopy status to DISKCOPY_STAGED&amp;#010;(note that it is guaranteed that there is a single&amp;#010;diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).&amp;#010;It also includes updating the status of the corresponding&amp;#010;SubRequest to SUBREQUEST_RESTART and updating the status of&amp;#010;the SubRequests waiting on this recall to SUBREQUEST_RESTART&amp;#010;@param tapeCopy the TapeCopy that was just recalled&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115604" tag="operation_115604" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates the database when a file recall failed.&amp;#010;This includes updating the DiskCopy status to DISKCOPY_FAILED&amp;#010;(note that it is garanted that there is a single&amp;#010;diskcopy in status DISKCOPY_WAITTAPERECALL for this TapeCopy).&amp;#010;It also includes updating the status of the corresponding&amp;#010;SubRequest to SUBREQUEST_FAILED and updating the status of&amp;#010;the SubRequests waiting on this recall to SUBREQUEST_FAILED&amp;#010;@param tapeCopy the TapeCopy that was just recalled&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115606" tag="operation_115606" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get an array of the tapes to be processed.&amp;#010;This method searches the request catalog for all tapes that are&amp;#010;in TAPE_PENDING status. It atomically updates the status to&amp;#010;TAPE_WAITVDQM and returns the corresponding Tape objects.&amp;#010;This means that a subsequent call to this method will not return&amp;#010;the same entries. Objects may be present n times in the returned&amp;#010;vector of tapes. The rtcpclientd will notice multiple identical&amp;#010;requests and only submit one of them to VDQM.&amp;#010;@return vector of tapes to be processed&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115607" tag="operation_115607" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get an array of the streams to be processed.&amp;#010;This method searches the stager catalog for all streams that are&amp;#010;in STREAM_PENDING status. It atomically updates the status to&amp;#010;STREAM_WAITDRIVE and returns the corresponding STREAM objects.&amp;#010;This means that a subsequent call to this method will not return&amp;#010;the same entries.&amp;#010;@return vector of streams to be processed&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115608" tag="operation_115608" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves the TapeCopies from the database that have&amp;#010;status TAPECOPY_CREATED or TAPECOPY_TOBEMIGRATED and&amp;#010;have a castorFile linked to the right SvcClass.&amp;#010;Changes their status to TAPECOPY_WAITINSTREAMS.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param svcClass the SvcClass we select on&amp;#010;@return a vector of matching TapeCopies&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115610" tag="operation_115610" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="resets a stream by either deleting it or setting&amp;#010;its status to STREAM_PENDING depending on whether&amp;#010;there are TapeCopies in status WAITINSTREAMS status.&amp;#010;Also deletes all links to TapeCopies for this stream&amp;#010;@param stream the stream to reset&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115612" tag="operation_115612" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ITAPESVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      itapesvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115424" parent_class="115424" fileExt=".h" fileName="ifssvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IFSSVC_H&amp;#010;#define IFSSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115424" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IFSSvc&amp;#010;This class provides stager methods related to File System handling" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IFSSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115519" tag="operation_115519" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a DiskPool from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the disk pool&amp;#010;@return the DiskPool object or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115521" tag="operation_115521" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a TapePool from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the tape pool&amp;#010;@return the TapePool object or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115523" tag="operation_115523" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a DiskServer from the database based on name.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;memory.&amp;#010;@param name the name of the disk server&amp;#010;@return the DiskServer object or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IFSSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ifssvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115425" parent_class="115425" fileExt=".h" fileName="igcsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IGCSVC_H&amp;#010;#define IGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115425" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IGCSvc&amp;#010;This class provides stager methods related to Garbage Collection" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IGCSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115525" tag="operation_115525" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="List files to be deleted on a given diskServer.&amp;#010;These are the files corresponding to DiskCopies&amp;#010;in GCCANDIDATE status. This status is changed&amp;#010;to BEINGDELETED atomically.&amp;#010;@param diskServer the name of the DiskServer&amp;#010;involved&amp;#010;@return a list of files. The id of the DiskCopy&amp;#010;is given as well as the local path on the server.&amp;#010;Note that the returned vector should be deallocated&amp;#010;by the caller as well as its content" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115527" tag="operation_115527" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager of files effectively deleted.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will be deleted from the catalog&amp;#010;as well as the CastorFile if there is no other&amp;#010;copy.&amp;#010;@param diskCopyIds the list of diskcopies deleted&amp;#010;given by their id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115529" tag="operation_115529" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager of files for which deletion failed.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will marked FAILED in the catalog.&amp;#010;@param diskCopyIds the list of diskcopies for which&amp;#010;deletion failed given by their id" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      igcsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115426" parent_class="115426" fileExt=".h" fileName="ijobsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IJOBSVC_H&amp;#010;#define IJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115426" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IJobSvc&amp;#010;This class provides stager methods related to job handling" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IJobSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115531" tag="operation_115531" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Handles the start of a Get or Update job.&amp;#010;Schedules the corresponding SubRequest on a given&amp;#010;FileSystem and returns the DiskCopy to use for data&amp;#010;access.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;Depending on the available DiskCopies for the file&amp;#010;the SubRequest deals with, we have different cases :&amp;#010; - no DiskCopy at all and file is not of size 0 :&amp;#010;a DiskCopy is created with status DISKCOPY_WAITTAPERECALL.&amp;#010;Null pointer is returned&amp;#010; - no DiskCopy at all and file is of size 0 :&amp;#010;a DiskCopy is created with status DISKCOPY_WAIDISK2DISKCOPY.&amp;#010;This diskCopy is returned and the emptyFile content is&amp;#010;set to true.&amp;#010; - one DiskCopy in DISKCOPY_WAITTAPERECALL, DISKCOPY_WAITFS&amp;#010;or DISKCOPY_WAITDISK2DISKCOPY status :&amp;#010;the SubRequest is linked to the one recalling and&amp;#010;put in SUBREQUEST_WAITSUBREQ status. Null pointer is&amp;#010;returned.&amp;#010; - no valid (STAGE*, WAIT*) DiskCopy on the selected&amp;#010;FileSystem but some in status DISKCOPY_STAGEOUT or&amp;#010;DISKCOPY_STAGED on other FileSystems : a new DiskCopy&amp;#010;is created with status DISKCOPY_WAITDISK2DISKCOPY.&amp;#010;It is returned and the sources parameter is filed&amp;#010;with the DiskCopies found on the non selected FileSystems.&amp;#010; - one DiskCopy on the selected FileSystem in&amp;#010;DISKCOPY_STAGEOUT or DISKCOPY_STAGED status :&amp;#010;the SubRequest is ready, the DiskCopy is returned and&amp;#010;sources remains empty.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used as source of a Disk to Disk copy. This&amp;#010;list is never empty when diskCopy has status&amp;#010;DISKCOPY_DISK2DISKCOPY and always empty otherwise.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@param emptyFile whether the resulting diskCopy&amp;#010;deals with the recall of an empty file&amp;#010;@return the DiskCopy to use for the data access or&amp;#010;a null pointer if the data access will have to wait&amp;#010;and there is nothing more to be done. Even in case&amp;#010;of a non null pointer, the data access will have to&amp;#010;wait for a disk to disk copy if the returned DiskCopy&amp;#010;is in DISKCOPY_WAITDISKTODISKCOPY status. This&amp;#010;disk to disk copy is the responsability of the caller.&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115536" tag="operation_115536" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Handles the start of a Put job.&amp;#010;Links the DiskCopy associated to the SubRequest to&amp;#010;the given FileSystem and updates the DiskCopy status&amp;#010;to DISKCOPY_STAGEOUT.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115539" tag="operation_115539" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Handles the start of a PutDone job.&amp;#010;Actually only returns the DiskCopy associated to the SubRequest&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;If a null  DiskCopy is returned then the PutDone&amp;#010;was put in waiting mode and the caller should stop&amp;#010;processing it&amp;#010;@param subreqId the if of the SubRequest to consider&amp;#010;@return the DiskCopy to use for the data access or&amp;#010;0 if the PutDone should wait&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115541" tag="operation_115541" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates database after successful completion of a&amp;#010;disk to disk copy. This includes setting the DiskCopy&amp;#010;status to DISKCOPY_STAGED and setting the SubRequest&amp;#010;status to SUBREQUEST_READY.&amp;#010;Changes are commited&amp;#010;@param diskcopyId the id of the new DiskCopy&amp;#010;@param status the status of the new DiskCopy&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115544" tag="operation_115544" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Prepares a file for migration, when needed.&amp;#010;This is called both when a stagePut is over and when a&amp;#010;putDone request is processed.&amp;#010;In the case of a stagePut that in part of a PrepareToPut,&amp;#010;it actually does not prepare the file for migration&amp;#010;but only updates its size in DB and name server.&amp;#010;Otherwise (stagePut with no prepare and putDone),&amp;#010;it also updates the filesystem free space and creates&amp;#010;the needed TapeCopies according to the FileClass of the&amp;#010;castorFile.&amp;#010;@param subreq The SubRequest handling the file to prepare&amp;#010;@param fileSize The actual size of the castor file&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115547" tag="operation_115547" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) was finished successfully.&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the finished SubRequest" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115549" tag="operation_115549" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115551" tag="operation_115551" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Put SubRequest failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ijobsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::query" id="cppheader115427" parent_class="115427" fileExt=".h" fileName="iquerysvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IQUERYSVC_H&amp;#010;#define IQUERYSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using castor::query::IQuerySvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115427" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IQuerySvc&amp;#010;This class provides methods usefull to the query&amp;#010;handler to with database queries" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IQuerySvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115676" tag="operation_115676" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Gets all DiskCopies for a given file.&amp;#010;The caller is responsible for the deallocation of&amp;#010;the returned objects&amp;#010;@param fileId the fileId identifying the file&amp;#010;@param nsHost the name server host for this file&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115680" tag="operation_115680" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Gets all DiskCopies for a given request.&amp;#010;@param requestId the CASTOR ID of the request&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115683" tag="operation_115683" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Gets all DiskCopies for a given usertag&amp;#010;@param usertag The usertag of the requests&amp;#010;@param svcClassId the Id of the service class we're using&amp;#010;@return the list of DiskCopies available&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IQUERYSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      iquerysvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::vdqm" id="cppheader115428" parent_class="115428" fileExt=".h" fileName="ivdqmsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IVDQMSVC_H&amp;#010;#define IVDQMSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using castor::vdqm::IVdqmSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115428" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IVdqmSvc&amp;#010;This class provides methods to deal with the VDQM service" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IVdqmSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115689" tag="operation_115689" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Checks, if there is an entry in the ExtendedDeviceGroup table,&amp;#010;which has exactly these parameters&amp;#010;@return true, if the entry exists&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115691" tag="operation_115691" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a TapeServer from the database based on its serverName. &amp;#010;If no tapeServer is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tapeServer and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param serverName The name of the server&amp;#010;@return the tapeServer. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape server found,&amp;#010;several tape servers found, DB problem, etc...)" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115693" tag="operation_115693" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Checks, if there is already an entry for that tapeRequest. The entry&amp;#010;must have exactly the same ID.&amp;#010;&amp;#010;@return 0 : The row number, &amp;#010;        0 : The request is handled at the moment from a TapeDrive, &amp;#010;        -1: if there is no entry for it.&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115695" tag="operation_115695" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Looks for the best fitting tape drive. If it is for example an&amp;#010;older tape, it will first look if an older drive is free, before&amp;#010;it chooses a newer one. This strategy should avoid, that the newer&amp;#010;drive, which are able to deal with several tape models, are blocked&amp;#010;if an request for a newer tape model arrives.&amp;#010;Please notice that caller is responsible for deleting the object.&amp;#010;@parameter the requested Extended Device Group for the tape&amp;#010;@return the free TapeDrive or NULL if there is none.&amp;#010;@exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115697" tag="operation_115697" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param driveRequest &amp;#010;@param tapeServer " />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IVDQMSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      ivdqmsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115436" parent_class="115436" fileExt=".h" fileName="remotegcsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef REMOTEGCSVC_H&amp;#010;#define REMOTEGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;igcsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115436" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class RemoteGCSvc&amp;#010;Implementation of the IStagerSvc for Oracle" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="RemoteGCSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115618" tag="operation_115618" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="default constructor" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115620" tag="operation_115620" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="default destructor" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115621" tag="operation_115621" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115622" tag="operation_115622" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115623" tag="operation_115623" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="List files to be deleted on a given diskServer.&amp;#010;These are the files corresponding to DiskCopies&amp;#010;in GCCANDIDATE status. This status is changed&amp;#010;to BEINGDELETED atomically.&amp;#010;@param diskServer the name of the DiskServer&amp;#010;involved&amp;#010;@return a list of files. The id of the DiskCopy&amp;#010;is given as well as the local path on the server.&amp;#010;Note that the returned vector should be deallocated&amp;#010;by the caller as well as its content" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115625" tag="operation_115625" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager of files effectively deleted.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will be deleted from the catalog&amp;#010;as well as the CastorFile if there is no other&amp;#010;copy.&amp;#010;@param diskCopyIds the list of diskcopies deleted&amp;#010;given by their id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115627" tag="operation_115627" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager of files for which deletion failed.&amp;#010;The DiskCopy id is given. The corresponding&amp;#010;DiskCopies will markes FAILED in the catalog.&amp;#010;@param diskCopyIds the list of diskcopies for which&amp;#010;deletion failed given by their id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115629" tag="operation_115629" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param name " />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115631" tag="operation_115631" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115634" tag="operation_115634" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115638" tag="operation_115638" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115640" tag="operation_115640" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //REMOTEGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      remotegcsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115438" parent_class="115438" fileExt=".h" fileName="remotejobsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef REMOTEJOBSVC_H&amp;#010;#define REMOTEJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;ijobsvc.h&quot;&amp;#010;#include &quot;int.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115438" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class RemoteJobSvc&amp;#010;Implementation of the IJobSvc for Remote stager" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="RemoteJobSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115641" tag="operation_115641" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="default constructor" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115643" tag="operation_115643" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="default destructor" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115644" tag="operation_115644" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115645" tag="operation_115645" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115646" tag="operation_115646" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Handles the start of a Put job.&amp;#010;Links the DiskCopy associated to the SubRequest to&amp;#010;the given FileSystem and updates the DiskCopy status&amp;#010;to DISKCOPY_STAGEOUT.&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreq  the SubRequest to consider&amp;#010;@param fileSystem the selected FileSystem&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115649" tag="operation_115649" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Handles the start of a PutDone job.&amp;#010;Actually only returns the DiskCopy associated to the SubRequest&amp;#010;Note that deallocation of the DiskCopy is the&amp;#010;responsability of the caller.&amp;#010;@param subreqId the if of the SubRequest to consider&amp;#010;@return the DiskCopy to use for the data access&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115651" tag="operation_115651" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates database after successful completion of a&amp;#010;disk to disk copy. This includes setting the DiskCopy&amp;#010;status to DISKCOPY_STAGED and setting the SubRequest&amp;#010;status to SUBREQUEST_READY.&amp;#010;Changes are commited&amp;#010;@param diskcopyId the id of the new DiskCopy&amp;#010;@param status the status of the new DiskCopy&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115654" tag="operation_115654" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Prepares a file for migration, when needed.&amp;#010;This is called both when a stagePut is over and when a&amp;#010;putDone request is processed.&amp;#010;In the case of a stagePut that in part of a PrepareToPut,&amp;#010;it actually does not prepare the file for migration&amp;#010;but only updates its size in DB and name server.&amp;#010;Otherwise (stagePut with no prepare and putDone),&amp;#010;it also updates the filesystem free space and creates&amp;#010;the needed TapeCopies according to the FileClass of the&amp;#010;castorFile.&amp;#010;@param subreq The SubRequest handling the file to prepare&amp;#010;@param fileSize The actual size of the castor file&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115657" tag="operation_115657" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) was finished successfully.&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the finished SubRequest" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115659" tag="operation_115659" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Get or Update SubRequest&amp;#010;(without write) failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115661" tag="operation_115661" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Informs the stager the a Put SubRequest failed.&amp;#010;The SubRequest's status will thus be set to FAILED&amp;#010;@param subReqId the id of the failing SubRequest" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115663" tag="operation_115663" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param name " />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115665" tag="operation_115665" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a FileSystem from the database based on its&amp;#010;mount point and diskServer name. Keeps a lock on it.&amp;#010;Caller is in charge of the deletion of the allocated&amp;#010;objects, including the DiskServer Object&amp;#010;@param mountPoint the mountPoint of the FileSystem&amp;#010;@param diskServer the name of the disk server hosting this file system&amp;#010;@return the FileSystem linked to its DiskServer, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115668" tag="operation_115668" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a tape from the database based on its vid,&amp;#010;side and tpmode. If no tape is found, creates one.&amp;#010;Note that this method creates a lock on the row of the&amp;#010;given tape and does not release it. It is the&amp;#010;responsability of the caller to commit the transaction.&amp;#010;The caller is also responsible for the deletion of the&amp;#010;allocated object&amp;#010;@param vid the vid of the tape&amp;#010;@param side the side of the tape&amp;#010;@param tpmode the tpmode of the tape&amp;#010;@return the tape. the return value can never be 0&amp;#010;@exception Exception in case of error (no tape found,&amp;#010;several tapes found, DB problem, etc...)" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115672" tag="operation_115672" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next request the stager should deal with.&amp;#010;Selects a Request in START status and move its status&amp;#010;PROCESSED to avoid double processing.&amp;#010;The selection is restricted to Request of a given set&amp;#010;of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;@return the Request to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115674" tag="operation_115674" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //REMOTEJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      remotejobsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115440" parent_class="115440" fileExt=".h" fileName="oracommonsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORACOMMONSVC_H&amp;#010;#define ORACOMMONSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraCommonSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115440" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraCommonSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraCommonSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORACOMMONSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oracommonsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115442" parent_class="115442" fileExt=".h" fileName="oraquerysvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORAQUERYSVC_H&amp;#010;#define ORAQUERYSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;iquerysvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraQuerySvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115442" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraQuerySvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraQuerySvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORAQUERYSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oraquerysvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115445" parent_class="115445" fileExt=".h" fileName="orastagersvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORASTAGERSVC_H&amp;#010;#define ORASTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;istagersvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraStagerSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115445" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraStagerSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraStagerSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORASTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orastagersvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115448" parent_class="115448" fileExt=".h" fileName="oragcsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORAGCSVC_H&amp;#010;#define ORAGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;igcsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraGCSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115448" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraGCSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraGCSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORAGCSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oragcsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115449" parent_class="115449" fileExt=".h" fileName="orajobsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORAJOBSVC_H&amp;#010;#define ORAJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ijobsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraJobSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115449" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraJobSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraJobSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORAJOBSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orajobsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115450" parent_class="115450" fileExt=".h" fileName="orafssvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORAFSSVC_H&amp;#010;#define ORAFSSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ifssvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraFSSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115450" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraFSSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraFSSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORAFSSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      orafssvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115451" parent_class="115451" fileExt=".h" fileName="oratapesvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORATAPESVC_H&amp;#010;#define ORATAPESVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;itapesvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraTapeSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115451" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraTapeSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraTapeSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORATAPESVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oratapesvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115460" parent_class="115460" fileExt=".h" fileName="oravdqmsvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ORAVDQMSVC_H&amp;#010;#define ORAVDQMSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;oracommonsvc.h&quot;&amp;#010;#include &quot;ivdqmsvc.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" text="using ::OraVdqmSvc;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115460" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class OraVdqmSvc&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="OraVdqmSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ORAVDQMSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      oravdqmsvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor" id="cppheader115463" parent_class="115463" fileExt=".h" fileName="iservice" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ISERVICE_H&amp;#010;#define ISERVICE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115463" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IService&amp;#010;base of all services" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IService ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115613" tag="operation_115613" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115614" tag="operation_115614" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service id" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115615" tag="operation_115615" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Get the service name" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115616" tag="operation_115616" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="adds a reference to this service" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115617" tag="operation_115617" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="removes a reference to the service and releases it&amp;#010;if the count goes to 0" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ISERVICE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      iservice.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115422" parent_class="115422" fileExt=".h" fileName="istagersvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ISTAGERSVC_H&amp;#010;#define ISTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;icommonsvc.h&quot;&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <cppheaderclassdeclarationblock parent_id="115422" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Interface IStagerSvc&amp;#010;This class provides specific stager methods and includes&amp;#010;scheduler and error related methods" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IStagerSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115469" tag="operation_115469" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next SubRequest the stager should deal with.&amp;#010;Selects a SubRequest in START, RESTART or RETRY status&amp;#010;and move its status to SUBREQUEST_WAITSCHED to avoid&amp;#010;double processing.&amp;#010;The selection is restricted to SubRequest associated to&amp;#010;requests of a given set of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;associated to the returned subrequest&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115471" tag="operation_115471" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next SubRequest in FAILED status the stager&amp;#010;should deal with.&amp;#010;Selects a SubRequest in FAILED status and move its status&amp;#010;to FAILED_ANSWERING to avoid double processing.&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115472" tag="operation_115472" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Decides whether a SubRequest should be scheduled.&amp;#010;Looks at all diskCopies for the file a SubRequest&amp;#010;deals with and depending on them, decides whether&amp;#010;to schedule the SubRequest. In case it can be scheduled,&amp;#010;also returns a list of diskcopies available to the&amp;#010;subrequest.&amp;#010;The scheduling decision is taken this way :&amp;#010;  - if no diskCopy is found, return true (scheduling&amp;#010;for tape recall) and sources stays empty.&amp;#010;  - if some diskcopies are found but all in WAIT*&amp;#010;status, return false (no schedule) and link the SubRequest&amp;#010;to the one we're waiting on + set its status to&amp;#010;SUBREQUEST_WAITSUBREQ. Sources stays empty.&amp;#010;  - if some diskcopies are found in STAGED/STAGEOUT&amp;#010;status, return true and list them in sources.&amp;#010;@param subreq the SubRequest to consider&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used by the subrequest.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@return whether to schedule it&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115475" tag="operation_115475" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a CastorFile from the database based on its fileId&amp;#010;and name server. Creates a new one if none if found.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@param svcClass the service class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileClass the file class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileSize the size fo the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@return the CastorFile, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115481" tag="operation_115481" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates a SubRequest status in the DB, including&amp;#010;the answered flag that is set to 1 and tells&amp;#010;whether the request to which it belongs still&amp;#010;has some other SubRequests that were not processed.&amp;#010;By not processed we mean that their &quot;answered&quot; flag&amp;#010;is not set AND their status is neither READY neither&amp;#010;FINISHED nor one of the FAILED* status.&amp;#010;The two operations are executed atomically.&amp;#010;The update is commited before returning.&amp;#010;This method should only be called when the calling&amp;#010;process is answering to the client. In other cases,&amp;#010;the updateRep method should be used.&amp;#010;@param subreq the SubRequest to update&amp;#010;@return whether there are still SubRequests in&amp;#010;SUBREQUEST_START status within the same request&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115483" tag="operation_115483" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Recreates a castorFile.&amp;#010;Depending on the context, this method cleans up the&amp;#010;database when a castor file is recreated or gets&amp;#010;the unique DiskCopy of a castor file.&amp;#010;When called in the context of a Put inside a&amp;#010;PrepareToPut, the method returns the unique DiskCopy&amp;#010;associated to the castorFile. This DiskCopy can be&amp;#010;either in WAITFS, WAITFS_SCHEDULING or STAGEOUT&amp;#010;status and is linked to the SubRequest.&amp;#010;In all others cases, the method first&amp;#010;checks whether the recreation is possible.&amp;#010;A recreation is considered to be possible if&amp;#010;no TapeCopy of the given file is in TAPECOPY_SELECTED&amp;#010;status and no DiskCopy of the file is in either&amp;#010;WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or&amp;#010;WAITDISK2DISKCOPY status. When recreation is not&amp;#010;possible, a null pointer is returned.&amp;#010;Else, all DiskCopies for the given file are marked&amp;#010;INVALID (that is those not in DISKCOPY_FAILED and&amp;#010;DISKCOPY_DELETED status) and all TapeCopies are&amp;#010;deleted. A new DiskCopy is then created in&amp;#010;DISKCOPY_WAITFS status, linked to the given&amp;#010;SubRequest returned.&amp;#010;Note that everything is commited and that the caller&amp;#010;is responsible for the deletion of the returned&amp;#010;DiskCopy (if any)&amp;#010;@param castorFile the file to recreate&amp;#010;@param subreq the SubRequest recreating the file&amp;#010;@return the new DiskCopy in DISKCOPY_WAITFS status&amp;#010;or null if recreation is not possible&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115486" tag="operation_115486" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects a machine and FileSystem for a given job.&amp;#010;@param fileSystems the list of allowed filesystems&amp;#010;according to job requirements (given by id). This&amp;#010;is the fileSystems' mountPoint, the corresponding&amp;#010;machines are given by parameter machines.&amp;#010;A null array means that any filesystem is eligible&amp;#010;@param machines the machines on which the filesystems&amp;#010;in parameter fileSystems reside.&amp;#010;A null array means that any machine is eligible. in such&amp;#010;a case, fileSystems has to be null.&amp;#010;@param minFree the minimum free space needed on each&amp;#010;filesystem to be selected. This is filesystem dependent&amp;#010;if filesystems are given (due to possible reservations&amp;#010;of the scheduler).&amp;#010;If no filesystem are given, this array must have&amp;#010;exactely one item, used for all filesystems.&amp;#010;@param fileSystemsNb the length of the arrays&amp;#010;fileSystems, machines and minFree when they are not&amp;#010;null (and if filesystems are given for minFree)&amp;#010;@mountPoint the selected fileSystem's mountPoint&amp;#010;@diskServer the diskServer on which the selected&amp;#010;fileSystem resides.&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115493" tag="operation_115493" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates a filesystem state (e.g : weight,&amp;#010;fsdeviation) to take into account the opening of&amp;#010;a new job.&amp;#010;@param fileSystem the file system mount point&amp;#010;@param diskServer the name of the diskserver&amp;#010;where the filesystem resides&amp;#010;@param fileSize the (supposed) size of the file&amp;#010;to be written by the job&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115497" tag="operation_115497" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Archives a SubRequest&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the SubRequest to archive" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115499" tag="operation_115499" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Implements a single file stageRelease.&amp;#010;It throws a Busy exception in case the file is&amp;#010;used by any request or is waiting for migration.&amp;#010;Otherwise, it marks all the copies of the file&amp;#010;as candidate for the garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115502" tag="operation_115502" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Implements a single file stageRm.&amp;#010;It throws a Busy exception in case the file is&amp;#010;beging migrated. Otherwise, it deletes all&amp;#010;running requests for the file and marks all&amp;#010;the copies of the file as candidate for the&amp;#010;garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ISTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      istagersvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="castor::stager" id="cppheader115553" parent_class="115553" fileExt=".h" fileName="istagersvc" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ISTAGERSVC_H&amp;#010;#define ISTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;bool.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115553" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class IStagerSvc&amp;#010;This class provides specific stager methods and includes&amp;#010;scheduler and error related methods" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="IStagerSvc ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation parent_id="115554" tag="operation_115554" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next SubRequest the stager should deal with.&amp;#010;Selects a SubRequest in START, RESTART or RETRY status&amp;#010;and move its status to SUBREQUEST_WAITSCHED to avoid&amp;#010;double processing.&amp;#010;The selection is restricted to SubRequest associated to&amp;#010;requests of a given set of types.&amp;#010;@param types the list of accepted types for the request&amp;#010;associated to the returned subrequest&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115556" tag="operation_115556" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects the next SubRequest in FAILED status the stager&amp;#010;should deal with.&amp;#010;Selects a SubRequest in FAILED status and move its status&amp;#010;to FAILED_ANSWERING to avoid double processing.&amp;#010;@return the SubRequest to process&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115557" tag="operation_115557" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Decides whether a SubRequest should be scheduled.&amp;#010;Looks at all diskCopies for the file a SubRequest&amp;#010;deals with and depending on them, decides whether&amp;#010;to schedule the SubRequest. In case it can be scheduled,&amp;#010;also returns a list of diskcopies available to the&amp;#010;subrequest.&amp;#010;The scheduling decision is taken this way :&amp;#010;  - if no diskCopy is found, return true (scheduling&amp;#010;for tape recall) and sources stays empty.&amp;#010;  - if some diskcopies are found but all in WAIT*&amp;#010;status, return false (no schedule) and link the SubRequest&amp;#010;to the one we're waiting on + set its status to&amp;#010;SUBREQUEST_WAITSUBREQ. Sources stays empty.&amp;#010;  - if some diskcopies are found in STAGED/STAGEOUT&amp;#010;status, return true and list them in sources.&amp;#010;@param subreq the SubRequest to consider&amp;#010;@param sources this is a list of DiskCopies that&amp;#010;can be used by the subrequest.&amp;#010;Note that the DiskCopies returned in sources must be&amp;#010;deallocated by the caller.&amp;#010;@return whether to schedule it&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115560" tag="operation_115560" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Retrieves a CastorFile from the database based on its fileId&amp;#010;and name server. Creates a new one if none if found.&amp;#010;Caller is in charge of the deletion of the allocated object&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@param svcClass the service class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileClass the file class of the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@param fileSize the size fo the castor file.&amp;#010;Used only in case of creation of a new castor file.&amp;#010;@return the CastorFile, or 0 if none found&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115566" tag="operation_115566" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates a SubRequest status in the DB, including&amp;#010;the answered flag that is set to 1 and tells&amp;#010;whether the request to which it belongs still&amp;#010;has some other SubRequests that were not processed.&amp;#010;By not processed we mean that their &quot;answered&quot; flag&amp;#010;is not set AND their status is neither READY neither&amp;#010;FINISHED nor one of the FAILED* status.&amp;#010;The two operations are executed atomically.&amp;#010;The update is commited before returning.&amp;#010;This method should only be called when the calling&amp;#010;process is answering to the client. In other cases,&amp;#010;the updateRep method should be used.&amp;#010;@param subreq the SubRequest to update&amp;#010;@return whether there are still SubRequests in&amp;#010;SUBREQUEST_START status within the same request&amp;#010;@exception Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115568" tag="operation_115568" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Recreates a castorFile.&amp;#010;Depending on the context, this method cleans up the&amp;#010;database when a castor file is recreated or gets&amp;#010;the unique DiskCopy of a castor file.&amp;#010;When called in the context of a Put inside a&amp;#010;PrepareToPut, the method returns the unique DiskCopy&amp;#010;associated to the castorFile. This DiskCopy can be&amp;#010;either in WAITFS, WAITFS_SCHEDULING or STAGEOUT&amp;#010;status and is linked to the SubRequest.&amp;#010;In all others cases, the method first&amp;#010;checks whether the recreation is possible.&amp;#010;A recreation is considered to be possible if&amp;#010;no TapeCopy of the given file is in TAPECOPY_SELECTED&amp;#010;status and no DiskCopy of the file is in either&amp;#010;WAITFS, WAITFS_SCHEDULING, WAITTAPERECALL or&amp;#010;WAITDISK2DISKCOPY status. When recreation is not&amp;#010;possible, a null pointer is returned.&amp;#010;Else, all DiskCopies for the given file are marked&amp;#010;INVALID (that is those not in DISKCOPY_FAILED and&amp;#010;DISKCOPY_DELETED status) and all TapeCopies are&amp;#010;deleted. A new DiskCopy is then created in&amp;#010;DISKCOPY_WAITFS status, linked to the given&amp;#010;SubRequest returned.&amp;#010;Note that everything is commited and that the caller&amp;#010;is responsible for the deletion of the returned&amp;#010;DiskCopy (if any)&amp;#010;@param castorFile the file to recreate&amp;#010;@param subreq the SubRequest recreating the file&amp;#010;@return the new DiskCopy in DISKCOPY_WAITFS status&amp;#010;or null if recreation is not possible&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115571" tag="operation_115571" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Selects a machine and FileSystem for a given job.&amp;#010;@param fileSystems the list of allowed filesystems&amp;#010;according to job requirements (given by id). This&amp;#010;is the fileSystems' mountPoint, the corresponding&amp;#010;machines are given by parameter machines.&amp;#010;A null array means that any filesystem is eligible&amp;#010;@param machines the machines on which the filesystems&amp;#010;in parameter fileSystems reside.&amp;#010;A null array means that any machine is eligible. in such&amp;#010;a case, fileSystems has to be null.&amp;#010;@param minFree the minimum free space needed on each&amp;#010;filesystem to be selected. This is filesystem dependent&amp;#010;if filesystems are given (due to possible reservations&amp;#010;of the scheduler).&amp;#010;If no filesystem are given, this array must have&amp;#010;exactely one item, used for all filesystems.&amp;#010;@param fileSystemsNb the length of the arrays&amp;#010;fileSystems, machines and minFree when they are not&amp;#010;null (and if filesystems are given for minFree)&amp;#010;@mountPoint the selected fileSystem's mountPoint&amp;#010;@diskServer the diskServer on which the selected&amp;#010;fileSystem resides.&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115578" tag="operation_115578" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Updates a filesystem state (e.g : weight,&amp;#010;fsdeviation) to take into account the opening of&amp;#010;a new job.&amp;#010;@param fileSystem the file system mount point&amp;#010;@param diskServer the name of the diskserver&amp;#010;where the filesystem resides&amp;#010;@param fileSize the (supposed) size of the file&amp;#010;to be written by the job&amp;#010;@exception Exception throws an Exception in case of error" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115582" tag="operation_115582" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Archives a SubRequest&amp;#010;The SubRequest and potentially the corresponding&amp;#010;Request will thus be removed from the DataBase&amp;#010;@param subReqId the id of the SubRequest to archive" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115584" tag="operation_115584" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Implements a single file stageRelease.&amp;#010;It throws a Busy exception in case the file is&amp;#010;used by any request or is waiting for migration.&amp;#010;Otherwise, it marks all the copies of the file&amp;#010;as candidate for the garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
                 </header>
                </codeoperation>
                <codeoperation parent_id="115587" tag="operation_115587" canDelete="false" indentLevel="1" role_id="-1" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Implements a single file stageRm.&amp;#010;It throws a Busy exception in case the file is&amp;#010;beging migrated. Otherwise, it deletes all&amp;#010;running requests for the file and marks all&amp;#010;the copies of the file as candidate for the&amp;#010;garbage collection.&amp;#010;@param fileId the fileId of the CastorFile&amp;#010;@param nsHost the name server to use&amp;#010;@exception in case of error or if the file is busy" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ISTAGERSVC_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      istagersvc.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader115686" parent_class="115686" fileExt=".h" fileName="vdqmdrvreq_t" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef VDQMDRVREQ_T_H&amp;#010;#define VDQMDRVREQ_T_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock parent_id="115686" tag="classDeclarationBlock" canDelete="false" role_id="-1" >
         <header>
          <cppcodedocumentation tag="" text="Class vdqmDrvReq_t&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" writeOutText="false" indentLevel="1" text="vdqmDrvReq_t ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" canDelete="false" indentLevel="1" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" canDelete="false" indentLevel="1" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" canDelete="false" indentLevel="1" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //VDQMDRVREQ_T_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/******************************************************************************&amp;#010; *                      vdqmdrvreq_t.h&amp;#010; *&amp;#010; * This file is part of the Castor project.&amp;#010; * See http://castor.web.cern.ch/castor&amp;#010; *&amp;#010; * Copyright (C) 2003  CERN&amp;#010; * This program is free software; you can redistribute it and/or&amp;#010; * modify it under the terms of the GNU General Public License&amp;#010; * as published by the Free Software Foundation; either version 2&amp;#010; * of the License, or (at your option) any later version.&amp;#010; * This program is distributed in the hope that it will be useful,&amp;#010; * but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#010; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#010; * GNU General Public License for more details.&amp;#010; * You should have received a copy of the GNU General Public License&amp;#010; * along with this program; if not, write to the Free Software&amp;#010; * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.&amp;#010; *&amp;#010; * @(#)$RCSfile: StagerSvcs.xmi,v $ $Revision: 1.1 $ $Release$ $Date: 2005/07/04 16:53:20 $ $Author: itglp $&amp;#010; *&amp;#010; * &amp;#010; *&amp;#010; * @author Castor Dev team, castor-dev@cern.ch&amp;#010; *****************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
