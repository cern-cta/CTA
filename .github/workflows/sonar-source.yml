name: Sonar Source Analysis

on:
  push:
    branches:
      - main
      - 336-add-sonarcloud-static-analysis-to-the-gitlab-ci-like-is-done-for-cppcheck
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-20.04
    container:
      image: centos:7
    
    env:
      XROOTD_VERSION: 4
      SCHED_TYPE: objectstore
      ORACLE_SUPPORT: ON
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
      - name: Install dependencies
        run: |
          yum -y update
          yum -y install centos-release-scl epel-release yum-plugin-priorities yum-plugin-versionlock
          yum -y install devtoolset-11 cmake3 make rpm-build git unzip ninja-build which
          yum -y remove git*
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo-1.10-1.x86_64.rpm
          yum -y install git
          curl -sL https://rpm.nodesource.com/setup_16.x | bash -
          yum -y install nodejs
          node -v
          ls /etc/yum.repos.d
          rm -f /etc/yum.repos.d/nodesource*
          curl -L -O https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh
          chmod +x cmake-3.26.4-linux-x86_64.sh
          ./cmake-3.26.4-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Download CTA
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Install CTA dependencies
        run: |
          export CMAKE_OPTIONS
          export CTA_VERSION
          export CTA_BUILD_ID=${GITHUB_RUN_ID}git${GITHUB_SHA:0:8}
          cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum.repos.d-public/*.repo /etc/yum.repos.d/
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            export TAG_VERSION=$(echo ${GITHUB_REF_NAME} | sed -e 's/^v//;s/-.*$//')
            export TAG_RELEASE=$(echo ${GITHUB_REF_NAME} | sed -e 's/^[^-]*-//')
          fi
          major_version=$(echo ${TAG_VERSION} | cut -d. -f1)
          if [[ ${major_version} == 5 ]]; then
            echo "Setting to compile with XRootD version 5"
            XROOTD_VERSION=5
          fi
          if [[ ${XROOTD_VERSION} -eq 5 ]]; then
            echo "Using XRootD version 5"
            ./continuousintegration/docker/ctafrontend/cc7/opt/run/bin/cta-versionlock --file ./continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list config xrootd5
            yum-config-manager --enable cta-ci-xrootd5
          else
            echo "Using XRootD version 4"
          fi
          CTA_VERSION=$XROOTD_VERSION
          if [[ ${SCHED_TYPE} != "objectstore" ]]; then
            echo "Using specified scheduler database type $SCHED_TYPE"
            sched_opt="-DCTA_USE_$(echo ${SCHED_TYPE} | tr '[:lower:]' '[:upper:]'):Bool=true"
            sched_version=$(echo ${SCHED_TYPE} | cut -c 1-3)
            CTA_VERSION="${CTA_VERSION}${sched_version}"
            CMAKE_OPTIONS+="-DSKIP_UNIT_TESTS:STRING=1 ${sched_opt} "
          fi
          if [[ ${ORACLE_SUPPORT} != "ON" ]]; then
            echo "Disabling Oracle Support"
            CMAKE_OPTIONS+="-DDISABLE_ORACLE_SUPPORT:BOOL=ON"
          fi
          git config --global --add safe.directory $(pwd)
          git submodule update --init --recursive
          mkdir build_srpm
          cd build_srpm
          echo "CMAKE_OPTIONS=${CMAKE_OPTIONS}" >> "$GITHUB_ENV"
          echo "CTA_VERSION=${CTA_VERSION}" >> "$GITHUB_ENV"
          echo "CTA_BUILD_ID=${CTA_BUILD_ID}" >> "$GITHUB_ENV"
          source /opt/rh/devtoolset-11/enable
          cmake -DPackageOnly:Bool=true -DVCS_VERSION=${CTA_BUILD_ID} ${CMAKE_OPTIONS} ..
          make cta_srpm

      - name: Run build-wrapper
        run: |
          cd xrootd-ssi-protobuf-interface && export XROOTD_SSI_PROTOBUF_INTERFACE_VERSION=$(git describe --tags --abbrev=0) && cd ..
          cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
          yum-builddep --nogpgcheck -y build_srpm/RPM/SRPMS/*
          mkdir build_rpm
          cd build_rpm
          echo CTA_BUILD_ID=$CTA_BUILD_ID
          echo CTA_VERSION=$CTA_VERSION
          echo CMAKE_OPTIONS=${CMAKE_OPTIONS}
          source /opt/rh/devtoolset-11/enable
          cmake -DVCS_VERSION=${CTA_BUILD_ID} ${CMAKE_OPTIONS} ..
          build-wrapper-linux-x86-64 --out-dir ../${{ env.BUILD_WRAPPER_OUT_DIR }} make

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -X --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
