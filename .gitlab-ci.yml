stages:
  - setup
  - analysis
  - build
  - build:image
  - test
  - system-test
  - release:changelog
  - release:internal
  - release:external

variables:

  # Pipeline Type. Supported types:
  #   - DEFAULT: runs static analysis, compiles the software and tests it.
  #   - SYSTEM_TEST_ONLY: runs the system tests against the latest (or a provided) ctageneric image.
  #   - REGR_AGAINST_CTA_MAIN: test custom dependency versions (EOS/XRootD) against CTA main.
  #   - REGR_AGAINST_CTA_VERSION: test custom dependency versions (EOS/XRootD) against the latest tagged CTA version.
  #   - IMAGE_FROM_CTA_VERSION: generate a docker image from a set of CTA RPMS avaiable in repos and run the tests.
  PIPELINE_TYPE:
    description: "What kind of pipeline to run. Use IMAGE_FROM_CTA_VERSION if you want to build a new Docker image based of existing CTA RPMs"
    value: "DEFAULT"
    options:
      - "DEFAULT"
      - "SYSTEM_TEST_ONLY"
      - "REGR_AGAINST_CTA_MAIN"
      - "REGR_AGAINST_CTA_VERSION"
      - "IMAGE_FROM_CTA_VERSION"

  # Custom variables for image building and run environment packages
  CUSTOM_EOS_VERSION:
    description: "Custom EOS version to use running."
    value: ""
  CUSTOM_XROOTD_VERSION:
    description: "Custom XRootD version to use for building and running."
    value: ""
  CUSTOM_CTA_VERSION:
    description: "Custom CTA version to build a docker image from and test with. Must exist in the CTA testing repo. Should only be used when the PIPELINE_TYPE != DEFAULT."
    value: ""
  CUSTOM_SYSTEM_TEST_IMAGE_TAG:
    description: "Custom image tag to run the systemtests against. If left empty, the latest image tag from main will be used. Should only be used when the PIPELINE_TYPE = SYSTEM_TEST_ONLY."
    value: ""

  PLATFORM:
    description: "Specifies the platform to build, test and (possibly) release on"
    value: "el9"
    options:
      - "el9"

  USE_INTERNAL_REPOS:
    description: "Whether to use the internal yum repos instead of the public yum repos."
    value: "TRUE"
    options:
      - "TRUE"
      - "FALSE"

  # Building Configuration
  BUILD_CTA_VERSION: 5
  BUILD_GENERATOR:
    description: "Specifies the build generated for building the CTA RPMs"
    value: "Unix Makefiles"
    options:
      - "Unix Makefiles"
      - "Ninja"
  CMAKE_BUILD_TYPE:
    description: "Specifies the build type used to compile the CTA RPMs"
    value: "Debug"
    options:
      - "Release"
      - "Debug"
      - "RelWithDebInfo"
      - "MinSizeRel"

  # CTA Configuration
  SCHEDULER_TYPE:
    description: "Specifies what scheduler should be used to build CTA and run the tests"
    value: "objectstore"
    options:
      - "pgsched"
      - "objectstore"
  ORACLE_SUPPORT:
    description: "Whether to build the CTA RPMs with Oracle support or not"
    value: "TRUE"
    options:
      - "TRUE"
      - "FALSE"

  # Tests
  BASH_LOGGING_ENABLED: 1

  SKIP_UNIT_TESTS:
    description: "Skips the CTA unit tests. Should only be disabled if there is a very good reason to do so."
    value: "FALSE"
    options:
      - "TRUE"
      - "FALSE"

  VALGRIND_DB_UNIT_TESTS:
    description: "Whether to run the DataBase unit tests with valgrind."
    value: "FALSE"
    options:
      - "TRUE"
      - "FALSE"

  KEEP_STRESS_TEST_NAMESPACE:
    description: "Keep the stress-test namespace alive after it has been created to allow for manual debugging. In this case, the namespace must be manually deleted at some point."
    value: "FALSE"
    options:
      - "TRUE"
      - "FALSE"

  # Pass a file here (must be absolute or relative to the orchestration directory, e.g. presets/dev...)
  CUSTOM_CTA_VALUES_FILE:
    description: "Path to a values.yaml file to be passed to the CTA Helm chart."
    value: ""
    options:
      - ""
      - "presets/dev-cta-xrd-values.yaml"
      - "presets/dev-cta-grpc-values.yaml"
  CUSTOM_EOS_VALUES_FILE:
    description: "Path to a values.yaml file to be passed to the EOS Helm chart."
    value: ""
    options:
      - ""
      - "presets/dev-eos-values.yaml"
      - "presets/dev-eos-grpc-values.yaml"

  # Meta CI
  CTA_BUILD_ID: ${CI_PIPELINE_ID}git${CI_COMMIT_SHORT_SHA}
  CTA_PIPELINE_NAME: "$CI_COMMIT_TITLE -- Pipeline: $PIPELINE_TYPE, Scheduler: $SCHEDULER_TYPE, Oracle support: $ORACLE_SUPPORT"

  # Git CI Configuration
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_DEPTH: 1 # Enforce a shallow clone of the main repo
  GIT_SUBMODULE_DEPTH: 0 # Full clone of the submodules

  # Job output configuration
  FF_TIMESTAMPS: true

  # Images
  IMAGE_ANALYSIS: gitlab-registry.cern.ch/cta/public_registry/container_registry/cta-ci-analysis:2025-06-17-12242237.el9
  IMAGE_BUILD: gitlab-registry.cern.ch/cta/public_registry/container_registry/cta-ci-build:2025-06-17-12242237.el9
  IMAGE_TEST: gitlab-registry.cern.ch/cta/public_registry/container_registry/cta-ci-test:2025-06-17-12242237.el9
  IMAGE_RELEASE: gitlab-registry.cern.ch/cta/public_registry/container_registry/cta-ci-release:2025-06-17-12242237.el9
  IMAGE_GITLAB_RELEASE_CLI: registry.gitlab.com/gitlab-org/release-cli:latest
  IMAGE_DOCKER_IMAGE_BUILDER: gcr.io/kaniko-project/executor:debug

default:
  interruptible: true

workflow:
  name: $CTA_PIPELINE_NAME
  auto_cancel:
    on_job_failure: all
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger"
      auto_cancel:
        on_job_failure: none
    # Note that the web pipeline source could also concern tagged pipelines
    # but these are already covered by the first rule
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web"
      changes:
        compare_to: "refs/heads/$CI_DEFAULT_BRANCH"
        paths:
          - '**/*'
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

include:
  - local: .gitlab/ci/*.gitlab-ci.yml
