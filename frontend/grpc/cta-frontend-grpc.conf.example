# @project      The CERN Tape Archive (CTA)
# @copyright    Copyright Â© 2024 CERN
# @license      This program is free software, distributed under the terms of the GNU General Public
#               Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING". You can
#               redistribute it and/or modify it under the terms of the GPL Version 3, or (at your
#               option) any later version.
#
#               This program is distributed in the hope that it will be useful, but WITHOUT ANY
#               WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#               PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
#               In applying this licence, CERN does not waive the privileges and immunities
#               granted to it by virtue of its status as an Intergovernmental Organization or
#               submit itself to any jurisdiction.

####################################
# Experimental feature flags
####################################
cta.experimental.telemetry.enabled false

# Disable admin authorization check for gRPC calls
# WARNING: Setting this to true disables security checks - use only for testing/development
# cta.experimental.grpc.bypass_admin_auth_check.enabled false

# The gRPC admin command implementation is experimental and enabling this option allows the gRPC frontend to serve admin commands.
# If the option is disabled, all cta-admin calls made with grpc will fail with error "CTA admin commands are disabled by configuration flag"
# cta.experimental.grpc.cta_admin_commands.enabled false

####################################
# GENERAL OPTIONS (required)
####################################
# This options will be included in every log line of the frontend.
#
# Unique string to identify CTA's instance the frontend is serving (i.e: production, preproduction).
# Each of these instances should be associated with a specific CTA catalogue instance.
cta.instance_name CI_local

# Unique string to identify the backend scheduler resources. As an exmple, it can be structured as:
# "[ceph|postgres|vfs][User|Repack]".
cta.schedulerdb.scheduler_backend_name vfsCI

# CTA ObjectStore options
# Scheduler endpoint
#cta.objectstore.backendpath /path/to/local/objectstore

# CTA Scheduler DB - thread options
cta.schedulerdb.numberofthreads 500
cta.schedulerdb.threadstacksize_mb 1

# Maximum file size (in GB) that the CTA Frontend will accept for archiving
# cta.archivefile.max_size_gb 1000

# Disallow 0-length files
# cta.archivefile.zero_length_files_forbidden on
# Tapepools exempted from this check (if enabled)
# cta.archivefile.zero_length_files_forbidden_vo_exception_list vo1 vo2 vo3

# CTA Repack buffer URL
# cta.repack.repack_buffer_url root://ctaeos//eos/ctaeos/repack

# cta.repack.repack_max_files_to_select 100

# CTA Verification Mount Policy
# cta.verification.mount_policy verification


# CTA Frontend log URL
cta.log.url file:/var/log/cta/cta-frontend.log

# CTA Logger log level
# Valid log levels are EMERG, ALERT, CRIT, ERR, WARNING, NOTICE (==USERERR), INFO, DEBUG
# cta.log.level DEBUG

# CTA Logger log format
# Valid formats are default, json
# cta.log.format json

# CTA Log header
# cta.log.log_header true


####################################
#  TLS related variables. Only used when TLS is true
####################################
# Use TLS (previously the command-line option --tls)
#grpc.tls.enabled true/false
#  TLS service key file
#grpc.tls.server_key_path /path/to/key
#
#  TLS service certificate file
#grpc.tls.server_cert_path /path/to/cert
#
#  TLS CA chain file
#grpc.tls.chain_cert_path /path/to/CA/chain
#

####################################
# JWT Authentication related variables
####################################
# Use JWT auth
# grpc.jwt.enabled true/false (cannot be true if grpc.tls.enabled is false)
#
# URI of JWKS endpoint
# grpc.jwks.uri http://auth-keycloak:8080/realms/master/protocol/openid-connect/certs
#

# Cache parameters for fetching / caching the public keys used to sign JWT tokens
# refresh interval in seconds
# grpc.jwks.cache.refresh_interval_secs 600
#
# public key caching interval (can be different from the cache refresh interval, if not set it means no expiration)
# grpc.jwks.cache.timeout_secs 600

# gRPC number of threads
#grpc.numberofthreads nthreads


####################################
# CTA Scheduler DB cache timeout options
####################################
# cta.schedulerdb.tape_cache_max_age_secs 600
# cta.schedulerdb.retrieve_queue_cache_max_age_secs 10

# CTA Scheduler DB - enable requests for user or repack
# cta.schedulerdb.disable_repack_requests false
# cta.schedulerdb.disable_user_requests false

# CTA Catalogue options
cta.catalogue.numberofconnections 10

# Missing tape file copies minimum age.
# Set it to prevent false flagging of multi-copy files in the process of being archived tapes.
# Default 24 hours
cta.catalogue.missing_file_copies_min_age_secs 86400

####################################
# Variables used by cta-frontend-async-grpc
####################################
# The port the gRPC frontend is listening to
#grpc.port 17017

# The ca-cert file path
#grpc.ssl.root /path/to/ca/cert

# Ssl Key file
#grpc.ssl.key /path/to/ssl/key

# Ssl certificate file
#grpc.ssl.cert /path/to/ssl/cert

# keytab file
#grpc.keytab /path/to/keytab

####################################
# Telemetry
####################################
# Used to control cardinality.
# If set to false, each restart of a process will generate a new unique ID for the `service.instance.id`.
# If set to true, `service.instance.id` remains constant across restarts.
cta.telemetry.retain_instance_id_on_restart false

# Metrics backend to use. Possible options are NOOP, OTLP_HTTP, OTLP_GRPC, STDOUT, FILE
# Default is NOOP, meaning no metrics are collected/exported
cta.telemetry.metrics.backend NOOP

# Amount of time in milliseconds between exports
cta.telemetry.metrics.export.interval 15000
# timeout for a single export
cta.telemetry.metrics.export.timeout 3000

# Service location of the OTLP collector in case the OTLP backend is used
# cta.telemetry.metrics.export.otlp.endpoint endpoint:port

# File location containing "username:password" (not base64 encoded) to set up basic auth for push metrics over HTTP
# Adds the header "authorization: Basic <base64(username:password)>"
# cta.telemetry.metrics.export.otlp.basic_auth_file /path/to/base64/encoded/username/password

# File location to write to in case the FILE backend is used
# cta.telemetry.metrics.export.file.endpoint path
