#!/usr/bin/python
#/******************************************************************************
# *                      printSvcClass
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the given service class(es)'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [-a|--all] [SvcClassName[:...]]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hva', ['help', 'all', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
displayAll = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    elif f == '-a' or f == '--all':
        displayAll = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
fileClasses = set([])
if len(args) != 0:
    if displayAll:
        print "No argument should be given when -a/--all is used"
        usage(1)
    else:
        fileClasses = set(args[0].split(':'))
else:
    if not displayAll:
        print "Missing arguments"
        usage(1)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlstatement = '''
    SELECT SvcClass.name, defaultfilesize, nbDrives, failjobswhennospace, streamPolicy, gcPolicy, maxReplicaNb, FileClass.name, replicateonclose, migratorPolicy, recallerPolicy, disk1behavior, SvcClass.id, DiskPools.names, TapePools.names
      FROM SvcClass, FileClass,
           (SELECT DiskPool2SvcClass.child AS svcClassId, collect(DiskPool.name) AS names
              FROM DiskPool2SvcClass, DiskPool
             WHERE DiskPool.id = DiskPool2SvcClass.parent
             GROUP BY child) DiskPools,
           (SELECT SvcClass2TapePool.parent AS svcClassId, collect(TapePool.name) AS names
              FROM SvcClass2TapePool, TapePool
             WHERE TapePool.id = SvcClass2TapePool.child
             GROUP BY parent) TapePools
     WHERE SvcClass.id = DiskPools.svcClassId(+)
       AND SvcClass.id = TapePools.svcClassId(+)
       AND SvcClass.forcedFileClass = FileClass.id(+)'''
    if not displayAll:
        sqlstatement = sqlstatement + "AND SvcClass.name IN ('" + "', '".join(fileClasses) + "')"
    # get results
    stcur.execute(sqlstatement)
    rows = stcur.fetchall()
    existingSvcClasses = set([row[0] for row in rows])
    unknownSvcClasses = fileClasses - existingSvcClasses
    # loop over svcclasses and print them
    if existingSvcClasses:
        maxNameLen = max([4]+[len(row[0]) for row in rows if row[0]])
        maxFileClassNameLen = max([15]+[len(row[7]) for row in rows if row[7]])
        maxStreamPolicyLen = max([12]+[len(row[4]) for row in rows if row[4]])
        maxGcPolicyLen = max([8]+[len(row[5]) for row in rows if row[5]])
        maxMigratorPolicyLen = max([14]+[len(row[9]) for row in rows if row[9]])
        maxRecallPolicyLen = max([14]+[len(row[10]) for row in rows if row[10]])
        maxIdLen = max([2] + [len(str(row[12])) for row in rows])
        maxDiskPoolsLen = max([9]+[len(','.join(row[13])) for row in rows if row[13]])
        maxTapePoolsLen = max([9]+[len(','.join(row[14])) for row in rows if row[14]])
        print '%*s DEFAULTFILESIZE NBDRIVES FAILJOBSWHENNOSPACE MAXREPLICANB %*s REPLICATEONCLOSE DISK1BEHAVIOR %*s %*s %*s %*s %*s %*s %*s' % \
              (maxNameLen, 'NAME', maxFileClassNameLen, 'FORCEDFILECLASS', \
               maxStreamPolicyLen, 'STREAMPOLICY', maxGcPolicyLen, 'GCPOLICY', \
               maxMigratorPolicyLen, 'MIGRATORPOLICY', maxRecallPolicyLen, 'RECALLERPOLICY', \
               maxDiskPoolsLen, 'DISKPOOLS', maxTapePoolsLen, 'TAPEPOOLS', maxIdLen, 'ID')
        print '-' * (97 + maxNameLen + maxFileClassNameLen + maxStreamPolicyLen + \
                     maxGcPolicyLen + maxMigratorPolicyLen + maxRecallPolicyLen + \
                     maxDiskPoolsLen + maxTapePoolsLen + maxIdLen)
        for name, defaultfilesize, nbDrives, failjobswhennospace, streamPolicy, gcPolicy, \
            maxReplicaNb, forcedFileClass, replicateonclose, migratorPolicy, recallerPolicy, \
            disk1behavior, scId, diskPools, tapePools in rows:
            if not forcedFileClass:
                forcedFileClass = '-'
            if not streamPolicy:
                streamPolicy = '-'
            if not gcPolicy:
                gcPolicy = '-'
            if not migratorPolicy:
                migratorPolicy = '-'
            if not recallerPolicy:
                recallerPolicy = '-'
            if diskPools:
              diskPoolsStr = ','.join(diskPools)
            else:
              diskPoolsStr = '-'
            if tapePools:
              tapePoolsStr = ','.join(tapePools)
            else:
              tapePoolsStr = '-'
            print '%*s %15d %8d %19s %12d %*s %16s %13s %*s %*s %*s %*s %*s %*s %*d' % \
                  (maxNameLen, name, defaultfilesize, nbDrives, bool(failjobswhennospace), \
                   maxReplicaNb, maxFileClassNameLen, forcedFileClass, bool(replicateonclose), \
                   bool(disk1behavior), maxStreamPolicyLen, streamPolicy, maxGcPolicyLen, gcPolicy, \
                   maxMigratorPolicyLen, migratorPolicy, maxRecallPolicyLen, recallerPolicy, \
                   maxDiskPoolsLen, diskPoolsStr, maxTapePoolsLen, tapePoolsStr, maxIdLen, scId)
    # check unknown svcclasses
    if unknownSvcClasses:
        print 'WARNING : the following service classes do not exist : ' + ', '.join(unknownSvcClasses)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
