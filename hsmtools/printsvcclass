#!/usr/bin/python
#/******************************************************************************
# *                      printsvcclass
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the given service class(es)'''

import sys
import getopt, time
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] <SvcClassName> [...]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
svcClasses = None
if len(args) != 0:
    svcClasses = set(args)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlstatement = '''
    SELECT SvcClass.name, SvcClass.defaultfilesize, SvcClass.failjobswhennospace, SvcClass.gcPolicy,
           SvcClass.maxReplicaNb, FileClass.name, SvcClass.replicateonclose,
           SvcClass.disk1behavior, SvcClass.id, DiskPools.names, SvcClass.lastEditor, SvcClass.lastEditionTime
      FROM SvcClass, FileClass,
           (SELECT DiskPool2SvcClass.child AS svcClassId, cast(collect(DiskPool.name) AS strListTable) AS names
              FROM DiskPool2SvcClass, DiskPool
             WHERE DiskPool.id = DiskPool2SvcClass.parent
             GROUP BY child) DiskPools
     WHERE SvcClass.id = DiskPools.svcClassId(+)
       AND SvcClass.forcedFileClass = FileClass.id(+)'''
    if svcClasses:
        sqlstatement += " AND SvcClass.name IN ('" + "', '".join(svcClasses) + "')"
    sqlstatement += " ORDER BY SvcClass.name ASC"
    # get results
    stcur.execute(sqlstatement)
    rows = stcur.fetchall()
    existingSvcClasses = set([row[0] for row in rows])
    if svcClasses:
        unknownSvcClasses = svcClasses - existingSvcClasses
    # loop over svcclasses and print them
    if existingSvcClasses:
        titles = ('NAME', 'DEFAULTFILESIZE', 'FAILJOBSWHENNOSPACE', 'MAXREPLICANB',
                  'FORCEDFILECLASS', 'REPLICATEONCLOSE', 'DISK1BEHAVIOR', 'GCPOLICY',
                  'DISKPOOLS', 'ID', 'LASTEDITOR', 'LASTEDITION')
        data = []
        for name, defaultfilesize, failjobswhennospace, gcPolicy, maxReplicaNb, \
                forcedFileClass, replicateonclose, disk1behavior, scId, diskPools, \
                lastEditor, lastEdition in rows:
            if diskPools:
                data.append((name, castor_tools.nbToDataAmount(defaultfilesize), bool(failjobswhennospace),
                             maxReplicaNb, forcedFileClass or '-', bool(replicateonclose),
                             bool(disk1behavior), gcPolicy, ','.join(diskPools),
                             scId, lastEditor, castor_tools.secsToDate(lastEdition)))
            else:
                data.append((name, castor_tools.nbToDataAmount(defaultfilesize), bool(failjobswhennospace),
                             maxReplicaNb, forcedFileClass or '-', bool(replicateonclose),
                             bool(disk1behavior), gcPolicy, '-',
                             scId, lastEditor, castor_tools.secsToDate(lastEdition)))

        castor_tools.prettyPrintTable(titles, data)
    # check unknown svcclasses
    if svcClasses and unknownSvcClasses:
        print 'WARNING : the following service classes do not exist : ' + ', '.join(unknownSvcClasses)
    # close DB connection
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
