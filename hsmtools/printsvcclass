#!/usr/bin/python
#/******************************************************************************
# *                      printsvcclass
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the given service class(es)'''

import sys
import getopt, time
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] <SvcClassName> [...]'
    sys.exit(exitCode)

def secsToDate(s):
    '''converts number of seconds since the epoch into readable date'''
    return time.strftime('%d-%b-%Y %H:%M:%S', time.localtime(s))

def nbToDataAmount(n):
    '''converts a number into a readable amount of data'''
    ext = ['', 'KiB', 'MiB', 'GiB', 'TiB']
    magn = 0
    while n / 1024 > 5:
        magn += 1
        n = n / 1024
    return str(n) + ext[magn]

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
fileClasses = None
if len(args) != 0:
    fileClasses = set(args)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlstatement = '''
    SELECT SvcClass.name, SvcClass.defaultfilesize, SvcClass.failjobswhennospace, SvcClass.gcPolicy,
           SvcClass.maxReplicaNb, FileClass.name, SvcClass.replicateonclose, SvcClass.recallerPolicy,
           SvcClass.disk1behavior, SvcClass.id, DiskPools.names, SvcClass.lastEditor, SvcClass.lastEditionTime
      FROM SvcClass, FileClass,
           (SELECT DiskPool2SvcClass.child AS svcClassId, cast(collect(DiskPool.name) AS strListTable) AS names
              FROM DiskPool2SvcClass, DiskPool
             WHERE DiskPool.id = DiskPool2SvcClass.parent
             GROUP BY child) DiskPools
     WHERE SvcClass.id = DiskPools.svcClassId(+)
       AND SvcClass.forcedFileClass = FileClass.id(+)'''
    if fileClasses:
        sqlstatement = sqlstatement + " AND SvcClass.name IN ('" + "', '".join(fileClasses) + "')"
    # get results
    stcur.execute(sqlstatement)
    rows = stcur.fetchall()
    existingSvcClasses = set([row[0] for row in rows])
    if fileClasses:
        unknownSvcClasses = fileClasses - existingSvcClasses
    # loop over svcclasses and print them
    if existingSvcClasses:
        titles = ('NAME', 'DEFAULTFILESIZE', 'FAILJOBSWHENNOSPACE', 'MAXREPLICANB', 'FORCEDFILECLASS', 'REPLICATEONCLOSE',
                  'DISK1BEHAVIOR', 'GCPOLICY', 'RECALLERPOLICY', 'DISKPOOLS', 'ID', 'LASTEDITOR', 'LASTEDITION')
        data = [(name, nbToDataAmount(defaultfilesize), bool(failjobswhennospace), maxReplicaNb,
                forcedFileClass if forcedFileClass else '-', bool(replicateonclose), bool(disk1behavior), gcPolicy,
                recallerPolicy if recallerPolicy else '-', ','.join(diskPools) if diskPools else '-', scId, lastEditor,
                secsToDate(lastEdition))
                for name, defaultfilesize, failjobswhennospace, gcPolicy, maxReplicaNb, forcedFileClass,
                    replicateonclose, recallerPolicy, disk1behavior, scId, diskPools, lastEditor, lastEdition in rows]

        castor_tools.prettyPrintTable(titles, data)
    # check unknown svcclasses
    if fileClasses and unknownSvcClasses:
        print 'WARNING : the following service classes do not exist : ' + ', '.join(unknownSvcClasses)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
