#!/usr/bin/python
#/******************************************************************************
# *                      printrecallstatus
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the summary of stager-queued, vdqm queued and ongoing recalls'''

import sys, pwd, grp
import getopt, time
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    if f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlStatement = '''
        with recalltapes as (select rt.vid vid, vts.poolname poolname from (select unique vid from recalljob) rt
               left outer join Vmgr_tape_side@remotens vts on vts.vid= rt.vid)
        select /*+ USE_NL(cf rj)  */ rt.poolname tapepool, count(*) files,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid)) files_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2)) files_recalling,
        sum (rj.filesize) total_size,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid) * rj.filesize) size_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2) * rj.filesize) size_recalling,
        (select count(*) from recalltapes rt2 where rt2.poolname = rt.poolname) tapes,
        (select count(*) from recallmount rm inner join recalltapes rt2 on rt2.vid = rm.vid where rt2.poolname = rt.poolname) tapes_queued,
        (select count(*) from recallmount rm inner join recalltapes rt2 on rt2.vid = rm.vid where rt2.poolname = rt.poolname and rm.status = 2) tapes_recalling,
        round( min(gettime() - rj.creationtime)/3600/24,2) min_age_days, 
        round(max(gettime() - rj.creationtime)/3600/24,2) max_age_days/*, cf.fileid*/
         from recalljob rj
         left outer join castorfile cf on cf.id = rj.castorfile
         left outer join recalltapes rt on rt.vid = rj.vid
        group by rt.poolname
        order by case when sum((select count(*) from recallmount rm where rm.vid = rj.vid)) != 0 then 1 else 0 end desc,
        round(max(gettime() - rj.creationtime)/3600/24,2) desc, round(min(gettime() - rj.creationtime)/3600/24,2) desc'''
    stcur.execute(sqlStatement)
    # get results
    rows = stcur.fetchall()
    # Compute column widths (dry-run print)
    columnTitles = ['TAPEPOOL', 'FILES', 'FILES_QUEUED', 'FILES_RECALLING', 'TOTAL_SIZE',
                       'SIZE_QUEUED', 'SIZE_RECALLING', 'TAPES', 'TAPES_QUEUED', 'TAPES_RECALLING', 
                       'MIN_AGE_DAYS', 'MAX_AGE_DAYS']
    columnFormats = ['%*s', '%*d', '%*d', '%*d', '%*d', '%*d', '%*d', '%*d', '%*d', '%*d', '%*.2f', '%*.2f']
    columnWidths = []
    for k in range(0, len(columnTitles)):
        columnWidths.append(max([len(columnTitles[k])]+[len(columnFormats[k] % (1, row[k])) for row in rows]))
    # Print header
    for k in range(0, len(columnTitles)):
        print '%*s' % ( columnWidths[k], columnTitles[k] ),
    print
    print '-' * (sum(columnWidths) +  len(columnWidths) -1)
    # Print data
    for row in rows:
        for k in range(0, len(columnTitles)):
               print columnFormats[k] % ( columnWidths[k], row[k] ),
        print
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
