#!/usr/bin/python
#/******************************************************************************
# *                      printrecallstatus
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the summary of stager-queued, vdqm queued and ongoing recalls'''

import sys, pwd, grp
import getopt, time
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    if f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlStatement = '''
      SELECT /*+ USE_NL(cf rj)  */
        (select name from recallgroup where id = rj.recallgroup) recallgroup,
        count(*) files,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid)) files_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2)) files_recalling,
        sum (rj.filesize) total_size,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid) * rj.filesize) size_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2) * rj.filesize) size_recalling,
        (select count(distinct rj2.vid) from recalljob rj2 where rj2.recallgroup = rj.recallgroup) tapes,
        (select count(distinct rm.vid) from recallmount rm inner join recalljob rj2 on rj2.vid = rm.vid where rj2.recallgroup = rj.recallgroup) tapes_queued,
        (select count(distinct rm.vid) from recallmount rm inner join recalljob rj2 on rj2.vid = rm.vid where rj2.recallgroup = rj.recallgroup and rm.status = 2) tapes_recalling,
        min(gettime() - rj.creationtime) min_age,
        max(gettime() - rj.creationtime) max_age /*, cf.fileid*/
      FROM RecallJob rj
        LEFT OUTER JOIN CastorFile cf on cf.id = rj.castorfile
      GROUP BY rj.recallgroup
      ORDER BY case when sum((select count(*) from recallmount rm where rm.vid = rj.vid)) != 0 then 1 else 0 end desc,
               recallgroup asc
    '''
    stcur.execute(sqlStatement)
    # get results
    rows = stcur.fetchall()
    # get the totals
    sqlStatementTot = '''
      SELECT /*+ USE_NL(cf rj)  */
        'ALL' recallgroup,
        count(*) files,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid)) files_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2)) files_recalling,
        sum (rj.filesize) total_size,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid) * rj.filesize) size_queued,
        sum((select count(*) from recallmount rm where rm.vid = rj.vid and rm.status = 2) * rj.filesize) size_recalling,
        (select count(distinct rj2.vid) from recalljob rj2) tapes,
        (select count(distinct rm.vid) from recallmount rm inner join recalljob rj2 on rj2.vid = rm.vid) tapes_queued,
        (select count(distinct rm.vid) from recallmount rm inner join recalljob rj2 on rj2.vid = rm.vid where rm.status = 2) tapes_recalling,
        min(gettime() - rj.creationtime) min_age,
        max(gettime() - rj.creationtime) max_age /*, cf.fileid*/
      FROM Recalljob rj
         LEFT OUTER JOIN CastorFile cf on cf.id = rj.castorfile
      GROUP BY 'x'
    '''  # GROUP BY 'x' is a workaround needed because of the extra inner select count() statements
    stcur.execute(sqlStatementTot)
    # get results
    rowsTot = stcur.fetchall()
    # Replace NULLs with zeros in rowsTot (happens when queue is empty)
    for k in range(0,len(rowsTot)):
        if rowsTot[k] == None:
                rowsTot[0][k] = 0;
    # Compute column widths (dry-run print)
    columnTitles = ['RECALLGROUP', 'FILES', 'FILES_QUEUED', 'FILES_RECALLING', 'TOTAL_SIZE',
                       'SIZE_QUEUED', 'SIZE_RECALLING', 'TAPES', 'TAPES_QUEUED', 'TAPES_RECALLING',
                       'MIN_AGE', 'MAX_AGE']
    stringData = [];
    if len(rows):
        rows.extend(rowsTot);
        # Format the rows into strings
        stringData = [(recallgroup, files, filesQueued, filesRecalling, castor_tools.nbToDataAmount(totalSize),
                       castor_tools.nbToDataAmount(sizeQueued), castor_tools.nbToDataAmount(sizeRecalling), tapes,
                       tapesQueued, tapesRecalling, castor_tools.nbToAge(int(minAge)), castor_tools.nbToAge(int(maxAge)))
                      for recallgroup, files, filesQueued, filesRecalling, totalSize, sizeQueued, sizeRecalling,
                          tapes, tapesQueued, tapesRecalling, minAge, maxAge in rows];
    else:
        stringData = [ ('ALL', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0.00', '0.00') ];
    castor_tools.prettyPrintTable(columnTitles, stringData, True);
    # close DB connection
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
