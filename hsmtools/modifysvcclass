#!/usr/bin/python
#/******************************************************************************
# *                      modifysvcclass
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author castor dev team
# *****************************************************************************/

'''allows to modify an existing service class in the castor stager'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] ' + \
          '[--defaultfilesize <defaultFileSize>] [--maxreplicanb <maxReplicaNb>] ' + \
          '[--failjobswhennospace <[yes|no]>] [--disk1behavior <[yes|no]>] ' + \
          '[--forcedfileclass <forcedFileClass>] [--replicateonclose <[yes|no]>] ' + \
          '[--gcpolicy <gcPolicyName>] ' + \
          '[--addpools <poolName>:[...]] [--removepools <poolName>:[...]] <svcClassName>'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv',
                                  ['help', 'verbose', 'defaultfilesize=', 'maxreplicanb=',
                                   'failjobswhennospace=', 'disk1behavior=', 'forcedfileclass=',
                                   'replicateonclose=', 'gcpolicy=',
                                   'addpools=', 'removepools='])
except Exception, e:
    print e
    usage(1)
verbose = False
defaultfilesize = None
maxreplicanb = None
failjobswhennospace = None
disk1behavior = None
forcedfileclass = None
forcedfileclassset = False
replicateonclose = None
gcpolicy = None
addpools = None
removepools = None
try:
    for f, v in options:
        if f == '-h' or f == '--help':
            usage(0)
        elif f == '-v' or f == '--verbose':
            verbose = True
        elif f == '--defaultfilesize':
            defaultfilesize = castor_tools.parseDataAmount('defaultfilesize', v)
        elif f == '--maxreplicanb':
            maxreplicanb = castor_tools.parsePositiveNonNullInt('maxreplicanb', v)
        elif f == '--failjobswhennospace':
            failjobswhennospace = castor_tools.parseBool('failjobswhennospace', v)
        elif f == '--disk1behavior':
            disk1behavior = castor_tools.parseBool('disk1behavior', v)
        elif f == '--forcedfileclass':
            forcedfileclass = v
            forcedfileclassset = True
        elif f == '--replicateonclose':
            replicateonclose = castor_tools.parseBool('replicateonclose', v)
        elif f == '--gcpolicy':
            gcpolicy = v
        elif f == '--addpools':
            addpools = set(v.split(':'))
        elif f == '--removepools':
            removepools = set(v.split(':'))
        else:
            print "unknown option : " + f
            usage(1)
except castor_tools.ParsingError, e:
    print e
    usage(1)

# Deal with arguments
if len(args) == 0:
    print "Missing arguments"
    usage(1)
elif len(args) > 1:
    print "Too many arguments"
    usage(1)
else:
    svcclassname = args[0]

# check we have something to do
if defaultfilesize == None and maxreplicanb == None and failjobswhennospace == None and \
   disk1behavior == None and forcedfileclass == None and replicateonclose == None and gcpolicy == None and \
   addpools == None and removepools == None:
    print 'Nothing to modify. Did you forget some argument ?'
    usage(1)

try:
    # connect to stager
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    # check that the service class exists
    stcur.execute('SELECT id FROM SvcClass WHERE name=:name', name=svcclassname)
    rows = stcur.fetchall()
    if len(rows) == 0:
        print 'SvcClass %s does not exist in the stager DB' % svcclassname
        print 'Please use entersvcclass if you would like to create it'
        print 'Giving up'
        sys.exit(1)
    svcClassId = rows[0][0]
    # deal with standard columns
    if defaultfilesize != None:
        stcur.execute('UPDATE SvcClass SET defaultfilesize=:value WHERE id = :svcClassId',
                      value=defaultfilesize, svcClassId=svcClassId)
    if maxreplicanb != None:
        stcur.execute('UPDATE SvcClass SET maxreplicanb=:value WHERE id = :svcClassId',
                      value=maxreplicanb, svcClassId=svcClassId)
    if failjobswhennospace != None:
        stcur.execute('UPDATE SvcClass SET failjobswhennospace=:value WHERE id = :svcClassId',
                      value=failjobswhennospace, svcClassId=svcClassId)
    if disk1behavior != None:
        stcur.execute('UPDATE SvcClass SET disk1behavior=:value WHERE id = :svcClassId',
                      value=disk1behavior, svcClassId=svcClassId)
    if replicateonclose != None:
        stcur.execute('UPDATE SvcClass SET replicateonclose=:value WHERE id = :svcClassId',
                      value=replicateonclose, svcClassId=svcClassId)
    if gcpolicy != None:
        # check that the service class exists
        stcur.execute('SELECT name FROM GcPolicy WHERE name=:name', name=gcpolicy)
        rows = stcur.fetchall()
        if len(rows) == 0:
            print 'GcPolicy %s does not exist in the stager DB' % gcpolicy
            print 'Giving up'
            sys.exit(1)
        # update svcclass
        stcur.execute('UPDATE SvcClass SET gcpolicy=:value WHERE id = :svcClassId',
                      value=gcpolicy, svcClassId=svcClassId)
    # Deal with addpools
    if addpools != None:
        # check existence, and get ids
        stcur.execute("SELECT name, id FROM DiskPool WHERE name IN ('" + "', '".join(addpools) + "')")
        rows = stcur.fetchall()
        existingdiskpools = set([row[0] for row in rows])
        addDiskPoolIds = dict([(dpId, dpName) for dpName, dpId in rows])
        stcur.execute("SELECT name, id FROM DataPool WHERE name IN ('" + "', '".join(addpools) + "')")
        rows = stcur.fetchall()
        existingdatapools = set([row[0] for row in rows])
        addDataPoolIds = dict([(dpId, dpName) for dpName, dpId in rows])
        nonexistingpools = addpools - existingdiskpools - existingdatapools
        if nonexistingpools:
            print 'Invalid or non existent pool(s) given : %s' % (', '.join(nonexistingpools))
            print 'Giving up'
            sys.exit(1)
        # check that disk pools are not yet linked to the service class
        if addDiskPoolIds:
            stcur.execute("SELECT parent FROM DiskPool2SvcClass WHERE parent IN (" + \
                          ', '.join([str(k) for k in addDiskPoolIds.keys()]) + ") AND child=:scId", scId=svcClassId)
            rows = stcur.fetchall()
            if len(rows) > 0:
                print 'The following diskpool(s) is(are) already linked to %s service class : %s' % \
                  (svcclassname, ', '.join([addDiskPoolIds[dpId] for dpId, in rows]))
                print 'Giving up'
                sys.exit(1)
        # check that data pools are not yet linked to the service class
        if addDataPoolIds:
            stcur.execute("SELECT parent FROM DataPool2SvcClass WHERE parent IN (" + \
                          ', '.join([str(k) for k in addDataPoolIds.keys()]) + ") AND child=:scId", scId=svcClassId)
            rows = stcur.fetchall()
            if len(rows) > 0:
                print 'The following datapool(s) is(are) already linked to %s service class : %s' % \
                  (svcclassname, ', '.join([addDataPoolIds[dpId] for dpId, in rows]))
                print 'Giving up'
                sys.exit(1)
        # Oracle needs at least one element...
        if not addDiskPoolIds:
            addDiskPoolIds = {-1:-1}
        if not addDataPoolIds:
            addDataPoolIds = {-1:-1}
        # add pools
        sql = '''
        DECLARE
          diskPoolIds castor."cnumList" := :diskPoolIds;
          dataPoolIds castor."cnumList" := :dataPoolIds;
        BEGIN
          IF diskPoolIds.COUNT != 1 OR diskPoolIds(1) != -1 THEN
            FORALL i IN diskPoolIds.FIRST .. diskPoolIds.LAST
              INSERT INTO DiskPool2SvcClass (parent, child) VALUES (diskPoolIds(i), :scId);
          END IF;
          IF dataPoolIds.COUNT != 1 OR dataPoolIds(1) != -1 THEN
            FORALL i IN dataPoolIds.FIRST .. dataPoolIds.LAST
              INSERT INTO DataPool2SvcClass (parent, child) VALUES (dataPoolIds(i), :scId);
          END IF;
        END;'''
        stcur.execute(sql, diskPoolIds=addDiskPoolIds.keys(),
                      dataPoolIds=addDataPoolIds.keys(), scId=svcClassId)
    # Deal with removepools
    if removepools != None:
        # check existence, and get ids
        stcur.execute("SELECT name, id FROM DiskPool WHERE name IN ('" + "', '".join(removepools) + "')")
        rows = stcur.fetchall()
        existingdiskpools = set([row[0] for row in rows])
        removeDiskPoolIds = dict([(dpId, dpName) for dpName, dpId in rows])
        stcur.execute("SELECT name, id FROM DataPool WHERE name IN ('" + "', '".join(removepools) + "')")
        rows = stcur.fetchall()
        existingdatapools = set([row[0] for row in rows])
        removeDataPoolIds = dict([(dpId, dpName) for dpName, dpId in rows])
        nonexistingpools = removepools - existingdiskpools - existingdatapools
        if nonexistingpools:
            print 'Invalid or non existent pool(s) given : %s' % (', '.join(nonexistingpools))
            print 'Giving up'
            sys.exit(1)
        # check that disk pools are linked to the service class
        if removeDiskPoolIds:
            stcur.execute("SELECT parent FROM DiskPool2SvcClass WHERE parent IN (" + \
                          ', '.join([str(k) for k in removeDiskPoolIds.keys()]) + ") AND child=:scId",
                          scId=svcClassId)
            rows = stcur.fetchall()
            linkeddiskpools = set([row[0] for row in rows])
            nonlinkeddiskpools = set(removeDiskPoolIds.keys()) - linkeddiskpools
            if nonlinkeddiskpools:
                print 'The following diskpool(s) is(are) not linked to %s service class : %s' % \
                      (svcclassname, ', '.join([removeDiskPoolIds[dpId] for dpId in nonlinkeddiskpools]))
                print 'Thus they can not be unlinked'
                print 'Giving up'
                sys.exit(1)
        # check that data pools are linked to the service class
        if removeDataPoolIds:
            stcur.execute("SELECT parent FROM DataPool2SvcClass WHERE parent IN (" + \
                          ', '.join([str(k) for k in removeDataPoolIds.keys()]) + ") AND child=:scId",
                          scId=svcClassId)
            rows = stcur.fetchall()
            linkeddatapools = set([row[0] for row in rows])
            nonlinkeddatapools = set(removeDataPoolIds.keys()) - linkeddatapools
            if nonlinkeddatapools:
                print 'The following datapool(s) is(are) not linked to %s service class : %s' % \
                      (svcclassname, ', '.join([removeDataPoolIds[dpId] for dpId in nonlinkeddatapools]))
                print 'Thus they can not be unlinked'
                print 'Giving up'
                sys.exit(1)
        # Oracle needs at least one element...
        if not removeDiskPoolIds:
            removeDiskPoolIds = {-1:-1}
        if not removeDataPoolIds:
            removeDataPoolIds = {-1:-1}
        # remove pools
        sql = '''
        DECLARE
          diskPoolIds castor."cnumList" := :diskPoolIds;
          dataPoolIds castor."cnumList" := :dataPoolIds;
        BEGIN
          IF diskPoolIds.COUNT != 1 OR diskPoolIds(1) != -1 THEN
            FORALL i IN diskPoolIds.FIRST .. diskPoolIds.LAST
              DELETE FROM DiskPool2SvcClass WHERE parent=diskPoolIds(i) AND child=:scId;
          END IF;
          IF dataPoolIds.COUNT != 1 OR dataPoolIds(1) != -1 THEN
            FORALL i IN dataPoolIds.FIRST .. dataPoolIds.LAST
              DELETE FROM DataPool2SvcClass WHERE parent=dataPoolIds(i) AND child=:scId;
          END IF;
        END;'''
        stcur.execute(sql, diskPoolIds=removeDiskPoolIds.keys(),
                      dataPoolIds=removeDataPoolIds.keys(), scId=svcClassId)
    # check that the forced file class does exist, and retrieve its id
    if forcedfileclassset:
        if forcedfileclass:
            stcur.execute('SELECT id FROM FileClass WHERE name=:name', name=forcedfileclass)
            rows = stcur.fetchall()
            if len(rows) == 0:
                print 'Invalid or non existent FileClass %s' % forcedfileclass
                print 'Giving up'
                sys.exit(1)
            stcur.execute('UPDATE SvcClass SET forcedfileclass=:value WHERE id = :svcClassId',
                          value=rows[0][0], svcClassId=svcClassId)
        else:
            stcur.execute('UPDATE SvcClass SET forcedfileclass=0 WHERE id = :svcClassId', svcClassId=svcClassId)
    # in all cases, update the lastEditor and lastEditionTime
    lasteditor = castor_tools.getCurrentUsername()
    stcur.execute('UPDATE SvcClass SET lastEditor=:lasteditor, lastEditionTime=gettime() WHERE id = :svcClassId', lasteditor=lasteditor, svcClassId=svcClassId)
    # commit insertion and tell user
    stconn.commit()
    print 'modified service class %s successfully' % svcclassname
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
