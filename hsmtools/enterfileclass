#!/usr/bin/python
#/******************************************************************************
# *                      enterfileclass
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author castor dev team
# *****************************************************************************/

'''allows to enter new file class(es) into the castor stager'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [-a|--all] [-f|--force] [<fileClassName>[:...]]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hvaf', ['help', 'verbose', 'all', 'force'])
except Exception, e:
    print e
    usage(1)
verbose = False
enterAll = False
force = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    elif f == '-a' or f == '--all':
        enterAll = True
    elif f == '-f' or f == '--force':
        force = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
fileClasses = set([])
if len(args) != 0:
    if enterAll:
        print "No argument should be given when -a/--all is used"
        usage(1)
    else:
        fileClasses = set(args[0].split(':'))
else:
    if not enterAll:
        print "Missing arguments"
        usage(1)

try:
    # connect to the nameserver and get data
    nsconn = castor_tools.connectToNS()
    nscur = nsconn.cursor()
    nscur.arraysize = 50
    if enterAll:
        nscur.execute('SELECT name, classId, nbCopies FROM cns_class_metadata')
    else:
        nscur.execute("SELECT name, classId, nbCopies FROM cns_class_metadata WHERE name IN ('" + "', '".join(fileClasses) + "')")
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    selectFCSQL = 'SELECT id FROM FileClass WHERE name = :name'
    insertFCSQL = 'INSERT INTO FileClass (name, nbCopies, classId, id) VALUES (:name, :nbCopies, :classId, ids_seq.nextval)'
    updateFCSQL = 'UPDATE FileClass SET nbCopies=:nbCopies, classId=:classId WHERE name=:name'
    # loop over fileclasses and enter them into stager
    handledFileClasses = set([])
    for name, classId, nbCopies in nscur.fetchall():
        stcur.execute(selectFCSQL, name=name)
        rows = stcur.fetchall()
        if len(rows) != 0:
            if force:
                stcur.execute(updateFCSQL, name=name, nbCopies=nbCopies, classId=classId)
                print '%s already existed in the stager DB. Updated successfully' % name
            else:
                print 'Ignoring fileClass %s as it already exists in the stager DB' % name
        else:
            stcur.execute(insertFCSQL, name=name, nbCopies=nbCopies, classId=classId)
            print 'inserted %s successfully' % name
        handledFileClasses.add(name)
    stconn.commit()
    # display a message for fileclasses that we did not find
    unknownFileClasses = fileClasses - handledFileClasses
    if unknownFileClasses:
        print 'WARNING : some fileclasses have been ignored as they were not found in the nameserver : ' + ', '.join(unknownFileClasses)
        print
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
    try:
        castor_tools.disconnectDB(nsconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
