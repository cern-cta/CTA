COMM
COMM  Copyright (C) 2000-2003 by CERN/IT/PDP/DM
COMM  All rights reserved
COMM
COMM       @(#)Imakefile,v 1.24 2005/12/06 10:52:56 CERN IT-PDP/DM Jean-Philippe Baud
 
COMM    Make HSM admin tools.

#include <Project.tmpl>

INCLUDES = FileName(..,h)
INCLUDES_CPP = FileName(..,/)

#if UseTms
TMS = TMS
#else
TMS = NOTMS
#endif
#if _AIX
LIBS = -L../shlib -lshift
#else
#if defined(__alpha) && defined(__osf__)
LIBS = -no_so -L../shlib -lshift -so_archive
#else
#if hpux
LIBS = -L../shlib -lshift
#else
#if linux
LIBS = -L../shlib -lshift $(ADNSLIB) -lnsl
#else
#if sgi
LIBS = -L../shlib -lshift
#else
#if SOLARIS
LIBS = -L../shlib -lshift -lsocket -lnsl
#else
#if _WIN32
LIBS = ..\lib\shift.lib wsock32.lib ws2_32.lib /NODEFAULTLIB:libc.lib advapi32.lib
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#if _WIN32
LIBS2 = $(LIBS)
#else
LIBS2 = $(LIBS) -L../shlib
#endif
SPOOL = HsmToolsSpool
PERLLIBDIR = /usr/lib/perl/CASTOR

CKSUMLIB = -lz
 
COMM######################### FLAGS ##############################
 
DFLAGS = -D$(TMS) -g -pthread
 
CPPFLAGS =        -I$(INCLUDES) -I$(INCLUDES_CPP) $(DFLAGS)
CFLAGS =        -I$(INCLUDES) -I$(INCLUDES_CPP) $(DFLAGS)

#if !defined(_WIN32)
LD = g++
#endif

COMM######################### DEPENDENCY LIBRARIES ###############
 
DEPLIB = DepSharedLibraryTargetName(shlib,shift)
DEPLIB2 = $(DEPLIB)
COMM######################### RULES ##############################

MANPAGES = $(MANDIR)/reclaim.$(MANSUFFIX) \
	   $(MANDIR)/tapetohsm.$(MANSUFFIX) \
	   $(MANDIR)/cleanLostFiles.$(MANSUFFIX) \
	   $(MANDIR)/enterFileClass.$(MANSUFFIX) \
	   $(MANDIR)/enterSvcClass.$(MANSUFFIX) \
	   $(MANDIR)/modifyFileClass.$(MANSUFFIX) \
	   $(MANDIR)/modifySvcClass.$(MANSUFFIX) \
	   $(MANDIR)/deleteFileClass.$(MANSUFFIX) \
	   $(MANDIR)/deleteSvcClass.$(MANSUFFIX) \
	   $(MANDIR)/diskServer_qry.$(MANSUFFIX) \
	   $(MANDIR)/listFileClass.$(MANSUFFIX) \
	   $(MANDIR)/listSvcClass.$(MANSUFFIX) \
	   $(MANDIR)/printFileClass.$(MANSUFFIX) \
	   $(MANDIR)/printSvcClass.$(MANSUFFIX) \
	   $(MANDIR)/nsGetPath.$(MANSUFFIX) \
	   $(MANDIR)/gcAllFS.$(MANSUFFIX) \
	   $(MANDIR)/moveDiskServer.$(MANSUFFIX) \
	   $(MANDIR)/houseKeeping.$(MANSUFFIX) \
	   $(MANDIR)/springCleaning.$(MANSUFFIX) \
	   $(MANDIR)/c2probe.$(MANSUFFIX) \
	   $(MANDIR)/adler32.$(MANSUFFIX) \
	   $(MANDIR)/adminMultiInstance.$(MANSUFFIX)
EXPORTMANPAGES = FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),reclaim.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),tapetohsm.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),cleanLostFiles.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),enterFileClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),enterSvcClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),modifyFileClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),modifySvcClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),deleteFileClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),deleteSvcClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),diskServer_qry.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),listFileClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),listSvcClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),printFileClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),printSvcClass.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),nsGetPath.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),gcAllFS.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),moveDiskServer.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),houseKeeping.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),springCleaning.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),c2probe.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),adler32.$(MANSUFFIX))) \
		 FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),adminMultiInstance.$(MANSUFFIX)))

COMM Warning Warning, our default clean rule deletes PROGS... Changed it to use PROGS_TO_CLEAN

PROGS_TO_CLEAN =  ProgramTargetName(reclaim) \
	 ProgramTargetName(tapetohsm) \
	 ProgramTargetName(enterFileClass) \
	 ProgramTargetName(enterSvcClass) \
	 ProgramTargetName(modifyFileClass) \
	 ProgramTargetName(modifySvcClass) \
	 ProgramTargetName(deleteFileClass) \
	 ProgramTargetName(deleteSvcClass) \
	 ProgramTargetName(printFileClass) \
	 ProgramTargetName(printSvcClass) \
	 ProgramTargetName(c2probe) \
	 ProgramTargetName(adler32) \
	 ProgramTargetName(nsGetPath)

#if BuildVDQMCpp
MANPAGES += $(MANDIR)/vdqmDBInit.$(MANSUFFIX)
EXPORTMANPAGES += FileName($(EXPORTMAN),FileName(man$(MANSUFFIX),vdqmDBInit.$(MANSUFFIX)))
PROGS_TO_CLEAN += ProgramTargetName(vdqmDBInit)
#endif

#if !defined(_WIN32)
PROGS_TO_KEEP =  ProgramTargetName(cleanLostFiles) \
	 ProgramTargetName(diskServer_qry) \
	 ProgramTargetName(listFileClass) \
	 ProgramTargetName(listSvcClass) \
	 ProgramTargetName(gcAllFS) \
	 ProgramTargetName(moveDiskServer) \
	 ProgramTargetName(dedicateTapeDrive) \
	 ProgramTargetName(listDedications) \
	 ProgramTargetName(houseKeeping) \
	 ProgramTargetName(springCleaning)
#endif

IPROGS = FileName($(BIN),ProgramTargetName(reclaim)) \
	 FileName($(BIN),ProgramTargetName(tapetohsm)) \
	 FileName($(BIN),ProgramTargetName(cleanLostFiles)) \
	 FileName($(BIN),ProgramTargetName(enterFileClass)) \
	 FileName($(BIN),ProgramTargetName(enterSvcClass)) \
	 FileName($(BIN),ProgramTargetName(modifyFileClass)) \
	 FileName($(BIN),ProgramTargetName(modifySvcClass)) \
	 FileName($(BIN),ProgramTargetName(deleteFileClass)) \
	 FileName($(BIN),ProgramTargetName(deleteSvcClass)) \
	 FileName($(BIN),ProgramTargetName(diskServer_qry)) \
	 FileName($(BIN),ProgramTargetName(listFileClass)) \
	 FileName($(BIN),ProgramTargetName(listSvcClass)) \
	 FileName($(BIN),ProgramTargetName(printFileClass)) \
	 FileName($(BIN),ProgramTargetName(printSvcClass)) \
	 FileName($(BIN),ProgramTargetName(nsGetPath)) \
	 FileName($(BIN),ProgramTargetName(gcAllFS)) \
	 FileName($(BIN),ProgramTargetName(moveDiskServer)) \
	 FileName($(BIN),ProgramTargetName(dedicateTapeDrive)) \
	 FileName($(BIN),ProgramTargetName(listDedications)) \
	 FileName($(BIN),ProgramTargetName(houseKeeping)) \
	 FileName($(BIN),ProgramTargetName(c2probe)) \
	 FileName($(BIN),ProgramTargetName(adler32)) \
	 FileName($(BIN),ProgramTargetName(springCleaning))


#if BuildVDQMCpp
IPROGS += FileName($(BIN),ProgramTargetName(vdqmDBInit))
#endif

EPROGS = $(EXPORTBIN)/reclaim \
	 $(EXPORTBIN)/tapetohsm \
	 $(EXPORTBIN)/cleanLostFiles \
	 $(EXPORTBIN)/enterFileClass \
	 $(EXPORTBIN)/enterSvcClass \
	 $(EXPORTBIN)/modifyFileClass \
	 $(EXPORTBIN)/modifySvcClass \
	 $(EXPORTBIN)/deleteFileClass \
	 $(EXPORTBIN)/deleteSvcClass \
	 $(EXPORTBIN)/diskServer_qry \
	 $(EXPORTBIN)/listFileClass \
	 $(EXPORTBIN)/listSvcClass \
	 $(EXPORTBIN)/printFileClass \
	 $(EXPORTBIN)/printSvcClass \
	 $(EXPORTBIN)/nsGetPath \
	 $(EXPORTBIN)/gcAllFS \
	 $(EXPORTBIN)/moveDiskServer \
	 $(EXPORTBIN)/dedicateTapeDrive \
	 $(EXPORTBIN)/listDedications \
	 $(EXPORTBIN)/houseKeeping \
	 $(EXPORTBIN)/c2probe \
	 $(EXPORTBIN)/adler32 \
	 $(EXPORTBIN)/springCleaning


#if BuildVDQMCpp
EPROGS +=	$(EXPORTBIN)/vdqmDBInit
#endif

IPERL = FileName($(PERLLIBDIR),castor_tools.pm)
EPERL = $(EXPORTPERL)/castor_tools.pm

all: $(PROGS_TO_KEEP) $(PROGS_TO_CLEAN)


NormalProgramTarget(reclaim,reclaim.Osuf,$(DEPLIB),$(LIBS))
NormalProgramTarget(tapetohsm,tapetohsm.Osuf,$(DEPLIB),$(LIBS))
NormalProgramTarget(enterFileClass,enterFileClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(enterSvcClass,enterSvcClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(modifyFileClass,modifyFileClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(modifySvcClass,modifySvcClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(deleteFileClass,deleteFileClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(deleteSvcClass,deleteSvcClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(printFileClass,printFileClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(printSvcClass,printSvcClass.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(nsGetPath,nsGetPath.Osuf,$(DEPLIB2),$(LIBS2))
NormalProgramTarget(adler32,adler32.Osuf,$(DEPLIB2),$(LIBS2) $(CKSUMLIB))
NormalProgramTarget(c2probe,c2probe.Osuf,$(DEPLIB2),-pthread $(LIBS2))

#if BuildVDQMCpp
NormalProgramTarget(vdqmDBInit,vdqmDBInit.Osuf,$(DEPLIB2),$(LIBS2))
#endif

MakeDepSharedLibrary(shlib,shift)

install: $(BIN) $(IPROGS) $(SPOOL) $(PERLLIBDIR) $(IPERL)

InstallProgram(reclaim,$(BIN),root,bin,755)
IEXPORT(reclaim,$(EXPORTBIN),755);

InstallProgram(tapetohsm,$(BIN),root,bin,755)
IEXPORT(tapetohsm,$(EXPORTBIN),755);

InstallProgram(cleanLostFiles,$(BIN),root,bin,755)
IEXPORT(cleanLostFiles,$(EXPORTBIN),755);

InstallProgram(enterFileClass,$(BIN),root,bin,755)
IEXPORT(enterFileClass,$(EXPORTBIN),755);

InstallProgram(enterSvcClass,$(BIN),root,bin,755)
IEXPORT(enterSvcClass,$(EXPORTBIN),755);

InstallProgram(modifyFileClass,$(BIN),root,bin,755)
IEXPORT(modifyFileClass,$(EXPORTBIN),755);

InstallProgram(modifySvcClass,$(BIN),root,bin,755)
IEXPORT(modifySvcClass,$(EXPORTBIN),755);

InstallProgram(deleteFileClass,$(BIN),root,bin,755)
IEXPORT(deleteFileClass,$(EXPORTBIN),755);

InstallProgram(deleteSvcClass,$(BIN),root,bin,755)
IEXPORT(deleteSvcClass,$(EXPORTBIN),755);

InstallProgram(diskServer_qry,$(BIN),root,bin,755)
IEXPORT(diskServer_qry,$(EXPORTBIN),755);

InstallProgram(listFileClass,$(BIN),root,bin,755)
IEXPORT(listFileClass,$(EXPORTBIN),755);

InstallProgram(listSvcClass,$(BIN),root,bin,755)
IEXPORT(listSvcClass,$(EXPORTBIN),755);

InstallProgram(printFileClass,$(BIN),root,bin,755)
IEXPORT(printFileClass,$(EXPORTBIN),755);

InstallProgram(nsGetPath,$(BIN),root,bin,755)
IEXPORT(nsGetPath,$(EXPORTBIN),755);

InstallProgram(gcAllFS,$(BIN),root,bin,755)
IEXPORT(gcAllFS,$(EXPORTBIN),755);

InstallProgram(moveDiskServer,$(BIN),root,bin,755)
IEXPORT(moveDiskServer,$(EXPORTBIN),755);

InstallProgram(houseKeeping,$(BIN),root,bin,755)
IEXPORT(houseKeeping,$(EXPORTBIN),755);

InstallProgram(springCleaning,$(BIN),root,bin,755)
IEXPORT(springCleaning,$(EXPORTBIN),755);

InstallProgram(c2probe,$(BIN),root,bin,755)
IEXPORT(c2probe,$(EXPORTBIN),755);

InstallProgram(adler32,$(BIN),root,bin,755)
IEXPORT(adler32,$(EXPORTBIN),755);

#if BuildVDQMCpp
InstallProgram(vdqmDBInit,$(BIN),root,bin,755)
IEXPORT(vdqmDBInit,$(EXPORTBIN),755);
#endif

InstallProgram(printSvcClass,$(BIN),root,bin,755)
IEXPORT(printSvcClass,$(EXPORTBIN),755);

InstallNonExecFile(castor_tools.pm,$(PERLLIBDIR),root,bin,755)
IEXPORT(castor_tools.pm,$(EXPORTPERL),755);

InstallProgram(dedicateTapeDrive,$(BIN),root,bin,755)
IEXPORT(dedicateTapeDrive,$(EXPORTBIN),755);

InstallProgram(listDedications,$(BIN),root,bin,755)
IEXPORT(listDedications,$(EXPORTBIN),755);


MakeDir($(BIN),root,bin,0755)
MakeDir($(SPOOL),root,bin,0755)
MakeDir($(PERLLIBDIR),root,bin,0755)
 
install.man: $(MANDIR) $(MANPAGES)

MakeDir($(MANDIR),root,bin,0755)

IMANPAGE(reclaim,$(MANDIR),$(MANSUFFIX))
IMANPAGE(tapetohsm,$(MANDIR),$(MANSUFFIX))
IMANPAGE(cleanLostFiles,$(MANDIR),$(MANSUFFIX))
IMANPAGE(enterFileClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(enterSvcClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(modifyFileClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(modifySvcClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(deleteFileClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(deleteSvcClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(diskServer_qry,$(MANDIR),$(MANSUFFIX))
IMANPAGE(listFileClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(listSvcClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(printFileClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(printSvcClass,$(MANDIR),$(MANSUFFIX))
IMANPAGE(nsGetPath,$(MANDIR),$(MANSUFFIX))
IMANPAGE(gcAllFS,$(MANDIR),$(MANSUFFIX))
IMANPAGE(moveDiskServer,$(MANDIR),$(MANSUFFIX))
IMANPAGE(houseKeeping,$(MANDIR),$(MANSUFFIX))
IMANPAGE(springCleaning,$(MANDIR),$(MANSUFFIX))
IMANPAGE(c2probe,$(MANDIR),$(MANSUFFIX))
IMANPAGE(adler32,$(MANDIR),$(MANSUFFIX))
IMANPAGE(adminMultiInstance,$(MANDIR),$(MANSUFFIX))
EMANPAGE(reclaim,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(tapetohsm,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(cleanLostFiles,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(enterFileClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(enterSvcClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(modifyFileClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(modifySvcClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(deleteFileClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(deleteSvcClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(diskServer_qry,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(listFileClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(listSvcClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(printFileClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(printSvcClass,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(nsGetPath,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(gcAllFS,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(moveDiskServer,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(houseKeeping,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(springCleaning,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(c2probe,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(adler32,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
EMANPAGE(adminMultiInstance,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))

#if BuildVDQMCpp
IMANPAGE(vdqmDBInit,$(MANDIR),$(MANSUFFIX))
EMANPAGE(vdqmDBInit,FileName($(EXPORTMAN),man$(MANSUFFIX)),$(MANSUFFIX))
#endif

export: $(EPROGS) $(EXPORTPERL) $(EPERL)

exportman: $(EXPORTMANPAGES)

exportshr:

COMM###################### CLEANING RULES ########################
 
clean:
	-@RemoveFiles(FilesToClean)
 
clobber:        clean
	-@RemoveFiles($(PROGS_TO_CLEAN))
 
#if _WIN32
depend:
	@echo Not supported on this platform
#else
depend:
	makedepend -Y$(INCLUDES) *.c 2> /dev/null
#endif

Makefiles:
 
FORCE:

COMM###################### DEPENDENCIES ##########################

COMM DO NOT DELETE THIS LINE -- make  depend  depends  on  it.
