#!/usr/bin/python
#/******************************************************************************
# *                      vdqmdeletepriority
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# *
# * command line lists the volume access priorities within the VDQM database
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

import sys
import getopt
import castor_tools

CA_MAXVIDLEN = 6    # maximum length for a VID  
COMMANDNAME  = 'vdqmdeletepriority'

#-------------------------------------------------------------------------------
# usage function
#-------------------------------------------------------------------------------
def usage(exitCode):
  print '''Usage: vdqmdelpriority -V VID -m mode [ -t type ] [ -h ]

where options can be:
    
\t-V, --vid VID   Volume visual Identifier
\t-m, --mode mode Tape access mode. Valid values are \"read\"
\t                and \"write\"
\t-t, --type type Lifespan type. Valid values are
\t                \"singleMount\" and \"unlimited\".
\t                The default value is \"unlimited\".
\t-h, --help      Print this help and exit
\n
Comments to: Castor.Support@cern.ch'''

  sys.exit(exitCode)


#-------------------------------------------------------------------------------
# connectToVdqm
#-------------------------------------------------------------------------------
def connectToVdqm():
    user, passwd, dbname = castor_tools.getVdqmDBConnectParams()
    return castor_tools.connectToDB(user, passwd, dbname)


#-------------------------------------------------------------------------------
# delVdqmPriorities
#-------------------------------------------------------------------------------
def  delVdqmPriorities(rsCursor, vid, tpMode, lifespanType):
  '''Delete vdqm priorities on the DB'''

  import cx_Oracle  

  # prepare the OUTPUT parameters of the SQL procedure
  returnVar     = rsCursor.var(cx_Oracle.NUMBER)
  priorityVar   = rsCursor.var(cx_Oracle.NUMBER)
  clientUIDVar  = rsCursor.var(cx_Oracle.NUMBER)
  clientGIDVar  = rsCursor.var(cx_Oracle.NUMBER)
  clientHostVar = rsCursor.var(cx_Oracle.STRING)
  rsCursor.callproc('castorVdqm.deleteVolPriority', ( vid, tpMode, lifespanType, 
     returnVar, priorityVar, clientUIDVar, clientGIDVar, clientHostVar) )

  if returnVar.getvalue() == 0:
     print '\n'+COMMANDNAME+':  No volume priority was deleted\n'


#-------------------------------------------------------------------------------
# vdqmDeletePriority
#-------------------------------------------------------------------------------
def vdqmDeletePriority(vid, mode, lifespanType):
    '''Delete a volume priority in the VDQM database'''

    stconn = None
    try:
        stconn = connectToVdqm()
        rsCursor = stconn.cursor()
        rsCursor.arraysize = 50
        delVdqmPriorities(rsCursor, vid, mode, lifespanType)

        stconn.commit()

    except Exception, e:
        if stconn != None:
            stconn.rollback()
        error, = e.args
        print COMMANDNAME+' Internal Error: \n'+error.message

    if stconn != None:
        rsCursor.close()
        castor_tools.disconnectDB(stconn)

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
try:
    options, args = getopt.getopt(sys.argv[1:], 'V:m:t:h', ['vid=', 
                              'mode=', 'type=', 'help'])
except getopt.GetoptError, err:
    print '\n'+COMMANDNAME+' Error:  ' + str(err) + '\n'
    usage(2)
vid = ''
lifespanType = 1 # Default = unlimited = 1
mode = -1
priority = -1
for f, v in options:
    if f in ('-V', '--vid'):
       # check that the vid length is <= "CA_MAXVIDLEN"
       if len(v) > CA_MAXVIDLEN:
          print '\n'+COMMANDNAME+' Error:  VID has more than \
' + str(CA_MAXVIDLEN) + ' characters: \n'
          usage(2)
       vid = v 
    elif f in ('-m', '--mode'):
       if v not in ['read', 'write']:
         print '\n'+COMMANDNAME+' Error:  Invalid tape access mode: ' + v + '\n'
         usage(2)
       if v == 'read':
         mode = 0
       else:
         mode = 1
    elif f in ('-t', '--type'):
       listType = 'LIFESPAN_TYPE'
       if v not in ['singleMount', 'unlimited']:
         print '\n'+COMMANDNAME+' Error:  Invalid priority type: ' + v + '\n'
         usage(2)
       if v == 'singleMount':
         lifespanType = 0
       else:
         lifespanType = 1
    elif f in ('-h', '--help'):
       usage(0)
    else:
       print '\n'+COMMANDNAME+' Error:  Unknown command-line option:' + f  + "\n"
       usage(2)
    
if vid == '' or mode == -1:
   print '\n'+COMMANDNAME+' Error:  Options -V vid and -m mode must be set\n'
   usage(2) 
 
# Deal with args
if len(args) >= 1:
    errorStr = '\n'+COMMANDNAME+' Error:  Unexpected command-line argument(s):'
    for arg in args:
      if arg[0] != '-':
        errorStr += " " + arg
    print errorStr + '\n'
    usage(2)

vdqmDeletePriority(vid, mode, lifespanType)
