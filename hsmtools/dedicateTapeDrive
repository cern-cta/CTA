#!/usr/bin/perl -w
#/******************************************************************************
# *                     tapeDrive_dedication
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @(#)$RCSfile: dedicateTapeDrive,v $ $Revision: 1.5 $ $Release$ $Date: 2005/12/02 14:47:53 $ $Author: bcouturi $
# *
# * Adds new entries to the TapeDriveDedication table
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/
use strict;
use diagnostics;
use lib "/usr/lib/perl/CASTOR";
use castor_tools;
use POSIX;


# usage function
sub usage {

    my $help = <<EOD;

 Usage : $0 \[-h|--help\] \[-d\] \[-V|--vid vid\]  \[-a|--accessMode mode (0|1)\]
           \[-s|--startTime st\] \[-e|--endTime et\]
           \[-u|--uid uid\] \[-g|--gid gid\] \[-t|--host host\] -r reason drive\[\@server\] drive\[\@server\]
            (to add new dedications)

    or :  $0 -d drive\[\@server\] drive\[\@server\]
            (to remove the dedications)

Syntax:
Mode: 0:read-Only 1:Write-Only
Starttime, Endtime should be expressed as +n (in days) or 'YYYY/MM/DD HH:MM'
When specifying a drive, the server name is necessary only when several drives have the same name.

BEWARE: This script needs:
 - The Oracle environment defined
 - /etc/castor/ORASTAGERCONFIG containing the DB connection parameters

EOD

print $help;

}


sub parse_time($) {
    my $time =  shift;
    if ($time =~ /\+[\d\.]+/) {
	return " trunc(sysdate $time  -  to_date('01-jan-1970','dd-mon-yyyy')) * (24*60*60)";
    }  else {
	return " trunc(to_date('$time', 'YYYY/MM/DD HH24:MI') -  to_date('01-jan-1970','dd-mon-yyyy')) * (24*60*60)";
    }


}


###########################################################
# parsing the options                                     #
###########################################################


my $help;
my $vid;
my $accessMode;
my $startTime;
my $endTime;
my $uid;
my $gid;
my $host;
my $reason;
my $deleteMode = 0;
my $nbdrives = 0;
my @drives = ();


if (0 == Getopt::Long::GetOptions ('h|help' => \$help,
		                   'd|delete' => \$deleteMode,
                                   'V|vid=s' => \$vid,
                                   'm|mode=i' => \$accessMode,
				   'u|uid=i' =>  \$uid,
				   'g|gid=i' =>  \$gid,
                                   's|startTime=s' => \$startTime,
                                   'e|endTime=s' => \$endTime,
				   't|host=s' => \$host,
				   'r|reason=s' => \$reason)) {
    usage();
    exit(EXIT_FAILURE);
}

if ($help) {
    usage();
    exit(EXIT_SUCCESS);
}

$nbdrives = scalar  @ARGV;

# Check the arguments
if ($nbdrives <= 0) {
    print("Error : Please specify at least a tape drive to dedicate\n");
    usage();
    exit(EXIT_FAILURE);
}

@drives = @ARGV;

if ( (!defined($reason)) && ($deleteMode == 0)) {
    print("Error : Please specify a reason for the dedication (with -r)\n");
    usage();
    exit(EXIT_FAILURE);
} 

###########################################################
# Preparing the string with the values to be set          #
###########################################################

my $columns;
my $values;
my $count = 0;

my %rmapping = ("VID" => [$vid, "'"],
	       "ACCESSMODE" => [$accessMode, ""],
	       "EUID" =>  [$uid, ""],
	       "EGID" => [$gid, ""],
	       "CLIENTHOST" => [$host, "'"],
	       "REASON" => [$reason, "'"]);

map {
    if (defined(${$rmapping{$_}}[0])) { 
	$count++;
	$columns .= ", $_";
	$values  .= ", ${$rmapping{$_}}[1]${$rmapping{$_}}[0]${$rmapping{$_}}[1]";
    }
} keys %rmapping;

if (! $deleteMode
    && !defined($uid)
    && !defined($gid)
    && !defined($accessMode)
    && !defined($host)
    && !defined($vid)) {
    #Reason does not count it is compulsory !
    print "Please specify at least one criterium for the dedication\n";
    usage();
    exit(EXIT_FAILURE);    
}


# Setting the time
$columns .= ", STARTTIME";
if (defined $startTime) {
    $values .= ", " . parse_time($startTime);
} else {
    $values .= ", (sysdate -  to_date('01-jan-1970','dd-mon-yyyy')) * (24*60*60)";
}

# Setting the time
$columns .= ", ENDTIME";
if (defined $endTime) {
    $values .= ", " . parse_time($endTime);
} else {
    $values .= ", (trunc(sysdate) +1 -  to_date('01-jan-1970','dd-mon-yyyy')) * (24*60*60)";
}



#print $columns, "\n";
#print $values, "\n";


###########################################################
# connect to the database                                 #
###########################################################

my @castor_conf = castor_conf_getOraStagerSvc();

#print "Using DB: $castor_conf[0] ,$castor_conf[1]\n";
my $dbh = DBI->connect('dbi:Oracle:',$castor_conf[0] ,$castor_conf[1]);



###########################################################
# Looking up the drive IDs                                #
###########################################################

my @driveids = ();

my $d;
foreach $d (@drives) {
    my $drive;
    my $server;
    chomp($d);
    if ($d =~ /(\w+)\@(\w+)/) {
	$drive = $1;
	$server = $2;
	
	my $dbquery = <<EOF;
	
	SELECT td.id
	    FROM tapedrive td, tapeserver ts
	    WHERE td.tapeserver = ts.id
	    AND td.drivename = '$drive'
	    AND ts.servername = '$server'
EOF
	    
my $sth = $dbh->prepare("$dbquery");
	$sth->execute;
	
	my @row;
	my $rownum = 0;
	my @ids;
	while (@row = $sth->fetchrow_array) {
	    push @ids, $row[0];
	    $rownum++;
	}
	$sth->finish;

	# Now checking the number of rows returned 
	if ($rownum == 0) {
	    print "Could not find drive $d\n";
	    usage();
	    $dbh->disconnect;
	    exit(EXIT_FAILURE);    
	} elsif ($rownum > 1) {
	    print "Found several IDs for $d: ";
	    map { print " $_" } @ids;
	    print "\n";
	    usage();
	    $dbh->disconnect;
	    exit(EXIT_FAILURE);    
	}
	push @driveids, $ids[0];

    } else {
	# Now this is the case when the server was not specified 

	my $dbquery = <<EOF;
	
	SELECT td.id, ts.servername
	    FROM tapedrive td, tapeserver ts
	    WHERE td.tapeserver = ts.id
	    AND td.drivename = '$d'
EOF
	    
my $sth = $dbh->prepare("$dbquery");
	$sth->execute;
	
	my @row;
	my $rownum = 0;
	my @ids;
	my @tmpsrv;
	while (@row = $sth->fetchrow_array) {
	    push @ids, $row[0];
	    push @tmpsrv, $row[1];
	    $rownum++;
	}
	$sth->finish;

	# Now checking the number of rows returned 
	if ($rownum == 0) {
	    print "Could not find drive $d\n";
	    usage();
	    $dbh->disconnect;
	    exit(EXIT_FAILURE);    
	} elsif ($rownum > 1) {
	    print "Found several possibilities for $d:\n";
	    map { print " $d\@$_\n" } @tmpsrv;
	    print "Please choose one \n";
	    usage();
	    $dbh->disconnect;
	    exit(EXIT_FAILURE);    
	}
	push @driveids, $ids[0];
    }
}


#map { print "ID: $_ \n"; }  @driveids;


if ($deleteMode) {
   map {
	
	my $deleteStatement = "DELETE FROM TapeDriveDedication"
	    . " WHERE TAPEDRIVE = $_";
	
	#print $deleteStatement, "\n";
	my $sth = $dbh->prepare("$deleteStatement");
	$sth->execute;
	$sth->finish;
	
	
    } @driveids;




} else {
    map {
	
	my $insertStatement = "INSERT INTO TapeDriveDedication"
	    . "(ID, TAPEDRIVE " . $columns . ") VALUES (IDS_SEQ.NEXTVAL, $_" . $values . ")";
	
	#print $insertStatement, "\n";
	my $sth = $dbh->prepare("$insertStatement");
	$sth->execute;
	$sth->finish;
	
	
    } @driveids;
}
# Close DB connection
$dbh->disconnect;
