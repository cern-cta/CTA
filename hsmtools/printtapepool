#!/usr/bin/python
#/******************************************************************************
# *                      printtapepool
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the given tape pool(s)'''

import sys
import getopt, time
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [<tapePoolName> [...]]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
tapePools = None
if len(args) != 0:
    tapePools = set(args)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlStatement = '''
    SELECT name, nbDrives, minAmountDataForMount, minNbFilesForMount, maxFileAgeBeforeMount,
           lastEditor, lastEditionTime, id
      FROM TapePool'''
    if tapePools:
        sqlStatement = sqlStatement + " WHERE name IN ('" + "', '".join(tapePools) + "')"
    stcur.execute(sqlStatement)
    # get results
    rows = stcur.fetchall()
    existingTapePools = set([row[0] for row in rows])
    if tapePools:
        unknownTapePools = tapePools - existingTapePools
    # loop over tape pools and print them
    if existingTapePools:
        titles = ('NAME','NBDRIVES','MINAMOUNTDATA','MINNBFILES','MAXFILEAGE','ID','LASTEDITOR','LASTEDITION')
        data = [(name, nbdrives, castor_tools.nbToDataAmount(minamountdata), minnbfiles,
                 castor_tools.nbToAge(maxfileage), tpid, lastEditor, secsToDate(lastEdition))
                for name, nbdrives, minamountdata, minnbfiles, maxfileage, lastEditor, lastEdition, tpid in rows]
        castor_tools.prettyPrintTable(titles, data)
    # check unknown tape pools
    if tapePools and unknownTapePools:
        print 'WARNING : the following tape pools do not exist : ' + ', '.join(unknownTapePools)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
