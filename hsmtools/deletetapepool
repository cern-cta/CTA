#!/usr/bin/python
#/******************************************************************************
# *                      deletetapepool
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line deleting the tape pool(s)'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] <tapePoolName>[:...]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
except Exception, e:
    print e
    usage(1)
verbose = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
tapePools = set([])
if len(args) != 0:
    tapePools = set(args[0].split(':'))
else:
    print "Missing arguments"
    usage(1)

try:
    # connect to stager
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    # check tape pool existence
    stcur.execute("SELECT name FROM TapePool WHERE name IN ('" + "', '".join(tapePools) + "')")
    existingTapePools = set([row[0] for row in stcur.fetchall()])
    nonexitingTapePools = tapePools - existingTapePools
    # check that the tape pools are not used by service classes
    stcur.execute('''SELECT SvcClass.name, TapePool.name
                       FROM SvcClass, SvcClass2TapePool, TapePool
                      WHERE SvcClass.id = SvcClass2TapePool.parent
                        AND SvcClass2TapePool.child = TapePool.id
                        AND TapePool.name IN (\'''' + "', '".join(existingTapePools) + "')")
    rows = stcur.fetchall()
    if len(rows) > 0:
        print 'TapePools cannot be dropped when used by some service classes and'
        for sc, tp in rows:
            print '  - tape pool %s is in use by service class %s' % (tp, sc)
        print 'You may want to use modifysvcclass to correct this'
        sys.exit(1)
    # drop tape pools
    if existingTapePools:
        stcur.execute("DELETE FROM TapePool WHERE name IN ('" + "', '".join(existingTapePools) + "')")
        stconn.commit()
        print 'successfully dropped the following tape pools : ' + ', '.join(existingTapePools)
    # warn for non existing tape pools
    if nonexitingTapePools:
        print 'WARNING : some tape pool(s) did not exist : ' + ', '.join(nonexitingTapePools)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
