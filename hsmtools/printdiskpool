#!/usr/bin/python
#/******************************************************************************
# *                      printdiskpool
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

'''command line printing the given disk pool(s)'''

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
    '''prints usage'''
    print 'Usage : ' + sys.argv[0] + ' [-h|--help] [-a|--all] [<diskPoolName>[:...]]'
    sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'hva', ['help', 'verbose', 'all'])
except Exception, e:
    print e
    usage(1)
verbose = False
displayAll = False
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    elif f == '-v' or f == '--verbose':
        verbose = True
    if f == '-a' or f == '--all':
        displayAll = True
    else:
        print "unknown option : " + f
        usage(1)

# Deal with arguments
diskPools = set([])
if len(args) != 0:
    if displayAll:
        print "No argument should be given when -a/--all is used"
        usage(1)
    else:
        diskPools = set(args[0].split(':'))
else:
    if not displayAll:
        print "Missing arguments"
        usage(1)

try:
    # connect to stager and prepare statements
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    sqlStatement = '''
    SELECT DiskPools.name, nvl(FileSystems.nbFileSystems,0), SvcClasses.names, DiskPools.id
      FROM (SELECT DiskPool.name, DiskPool.id
              FROM DiskPool) DiskPools,
           (SELECT diskPool, count(*) nbFileSystems
              FROM FileSystem
             GROUP BY diskPool) FileSystems,
           (SELECT DiskPool2SvcClass.parent AS diskPoolId, collect(SvcClass.name) AS names
              FROM DiskPool2SvcClass, SvcClass
             WHERE SvcClass.id = DiskPool2SvcClass.child
             GROUP BY parent) SvcClasses
     WHERE DiskPools.id = SvcClasses.diskPoolId(+)
       AND DiskPools.id = FileSystems.diskPool(+)'''
    if not displayAll:
        sqlStatement = sqlStatement + " AND DiskPools.name IN ('" + "', '".join(diskPools) + "')"
    stcur.execute(sqlStatement)
    # get results
    rows = stcur.fetchall()
    existingDiskPools = set([row[0] for row in rows])
    unknownDiskPools = diskPools - existingDiskPools
    # loop over disk pools and print them
    if existingDiskPools:
        maxNameLen = max([4] + [len(row[0]) for row in rows])
        maxSvcClassNameLen = max([10] + [len(', '.join(row[2])) for row in rows if row[2]])
        maxIdLen = max([2] + [len(str(row[3])) for row in rows])
        print '%*s NBFILESYSTEMS %*s %*s' % (maxNameLen, 'NAME', maxSvcClassNameLen, 'SVCCLASSES', maxIdLen, 'ID')
        print '-' * (16+maxNameLen+maxSvcClassNameLen+maxIdLen)
        for name, nbfs, svclasses, dpId in rows:
            if svclasses:
              svcClassStr = ','.join(svclasses)
            else:
              svcClassStr = '-'
            print '%*s %13d %*s %*d' % (maxNameLen, name, nbfs, maxSvcClassNameLen, svcClassStr, maxIdLen, dpId)
    # check unknown disk pools
    if unknownDiskPools:
        print 'WARNING : the following disk pools do not exist : ' + ', '.join(unknownDiskPools)
    # close DB connections
    try:
        castor_tools.disconnectDB(stconn)
    except Exception:
        pass
except Exception, e:
    print e
    if verbose:
        import traceback
        traceback.print_exc()
    sys.exit(-1)
