#!/usr/bin/python
#/******************************************************************************
# *                      migrateNewCopy
# *
# * This file is part of the Castor project.
# * See http://castor.web.cern.ch/castor
# *
# * Copyright (C) 2003  CERN
# * This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License
# * as published by the Free Software Foundation; either version 2
# * of the License, or (at your option) any later version.
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# *
# * @(#)$RCSfile: migrateNewCopy,v $ $Revision: 1.1 $ $Release$ $Date: 2009/06/17 15:07:40 $ $Author: sponcec3 $
# *
# * migrates a new copy to tape for files that are already on disk
# *
# * @author Castor Dev team, castor-dev@cern.ch
# *****************************************************************************/

import sys
import getopt
import castor_tools

# usage function
def usage(exitCode):
  print 'Usage : ' + sys.argv[0] + ' [-h|--help] fileId[:copynb] [...]'
  sys.exit(exitCode)

# first parse the options
try:
    options, args = getopt.getopt(sys.argv[1:], 'h', ['help'])
except Exception, e:
    print e
    usage(1)
for f, v in options:
    if f == '-h' or f == '--help':
        usage(0)
    else:
        print "unknown option : " + f
        usage(1)

# If no arg, display usage
if len(args) == 0:
    print "missing argument\n"
    usage(1)

# build the list of fileids
fileids = []
for arg in args:
  try:
    if ':' in arg:
      fid, copynb = arg.split(':')
      fileids.append((int(fid), int(copynb)))
    else:
      fid = int(arg)
      fileids.append((int(fid), 1))
  except ValueError:
      print 'Invalid argument : "' + arg + '"'
      usage(1)

# connect to the stager and migrate files
try:
    stconn = castor_tools.connectToStager()
    stcur = stconn.cursor()
    stcur.arraysize = 50
    stCheckDCSQL = 'SELECT UNIQUE Castorfile.Id, CastorFile.fileSize, DiskCopy.status FROM DiskCopy, CastorFile WHERE fileId = :fid and Castorfile.Id = DiskCopy.castorfile AND status in (0, 10)'
    stCheckMJSQL = 'SELECT MigrationJob.Id FROM MigrationJob WHERE castorFile=:cfId and destCopyNb=:copyNb'
    cfs = []
    for fileid, copynb in fileids:
        # check existence of a copy on disk
        stcur.execute(stCheckDCSQL, fid=fileid)
        rows = stcur.fetchall()
        if len(rows) == 0:
          print 'Fileid ' + str(fileid) + ' has no staged copy on disk. Giving up with the whole request'
          sys.exit(1)
        # in case of CANBEMIGR files, check absence of Migration job
        cfId, fs, status = rows[0]
        if status == 10:
          stcur.execute(stCheckMJSQL, cfId=cfId, copyNb=copynb)
          rows = stcur.fetchall()
          if len(rows) != 0:
            print 'Fileid ' + str(fileid) + ' already has a migration job for that copy. Giving up with the whole request'
            sys.exit(1)
        cfs.append((cfId, fs, copynb))
    print 'All files have been found on disk, triggering migrations'
    stMigSQL = '''DECLARE
                    tcId INTEGER;
                  BEGIN
                    UPDATE DiskCopy SET status = 10 WHERE castorFile = :cf AND status = 0;
                    initMigration(:cf, :fs, NULL, NULL, :cn, tconst.MIGRATIONJOB_PENDING);
                  END;'''
    for cfid, fs, copynb in cfs:
        stcur.execute(stMigSQL, cf=cfid, fs=fs, cn=copynb)
    stconn.commit()
    castor_tools.disconnectDB(stconn)
    print "Done"
except Exception, e:
    print e
    sys.exit(1)

