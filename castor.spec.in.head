# Generic macros
#---------------
%define name castor
%define castorVersion @CASTOR_VERSION@
%define castorRelease @CASTOR_RELEASE@

# Partial compilations
#---------------------
%define compile_server @COMPILE_SERVER@

# General settings
#-----------------
Summary: Cern Advanced mass STORage
Name: %{name}
Version: %{castorVersion}
Release: %{castorRelease}%{?dist}
Source: %{name}-%{version}-%{castorRelease}%{?dist}.tar.gz
URL: http://cern.ch/castor
License: http://cern.ch/castor/DIST/CONDITIONS
Group: Application/Castor
BuildRoot: %{_builddir}/%{name}-%{version}-root
# only build debug info if you're building the whole code
%if %compile_server
%else
  %define debug_package %{nil}
%endif
%if %compile_server
BuildRequires: oracle-instantclient-devel
%endif

%description
The CASTOR Project stands for CERN Advanced STORage Manager, and its goal is to handle LHC data in a fully distributed environment.

%prep
%setup -q -n %{name}-%{version}-%{release}

%build

# rpmbuild --define "clientonly 1" ...
%if 0%{?clientonly:1} > 0
%define compile_server 0
# Suppress oracompile.py warnings in clientonly mode
export ORACOMPILE_OPTIONS="--quiet"
%endif

# define castor version (modified by maketar.sh to put the exact version)
MAJOR_CASTOR_VERSION=@MAJOR_CASTOR_VERSION@
MINOR_CASTOR_VERSION=@MINOR_CASTOR_VERSION@
export MAJOR_CASTOR_VERSION
export MINOR_CASTOR_VERSION
mkdir -p build
cd build
# The cmake step does the selection between client/server compilation or just client
MAJOR_CASTOR_VERSION=${MAJOR_CASTOR_VERSION} MINOR_CASTOR_VERSION=${MINOR_CASTOR_VERSION} cmake .. -DCOMPILE_PACKAGING:STRING=0 -DCOMPILE_SERVER:STRING=@COMPILE_SERVER@
%{__make} -s %{_smp_mflags}

%install
# define castor version (modified by maketar.sh to put the exact version)
MAJOR_CASTOR_VERSION=@MAJOR_CASTOR_VERSION@
MINOR_CASTOR_VERSION=@MINOR_CASTOR_VERSION@
export MAJOR_CASTOR_VERSION
export MINOR_CASTOR_VERSION
%{__rm} -rf ${RPM_BUILD_ROOT}

cd build
%{__make} install DESTDIR=${RPM_BUILD_ROOT} EXPORTMAN=${RPM_BUILD_ROOT}/usr/share/man

%clean
%{__rm} -rf $RPM_BUILD_ROOT
%{__rm} -rf $RPM_BUILD_DIR/%{name}-%{version}

# The following will be filled dynamically with the rule: make rpm, or make tar
