/*
 * Copyright (C) 1993-2001 by CERN/IT/PDP/DM
 * All rights reserved
 */

/*
 * @(#)$RCSfile: Imake.rules,v $ $Revision: 1.33 $ $Date: 2009/06/05 08:11:27 $ CERN IT-PDP/DM   Jean-Philippe Baud
 */

#define NullParameter

#define ManPageTargetName(name,suffix) $(EXPORTMAN)/man/**/suffix/name.suffix/**/castor
#define UglyTarget(suffix) 's/^\.so \.?\/?(\w+)(.*)/\.so man'/**/suffix/**/'\/$${1}\.'/**/suffix/**/'castor/g'

#define MANPAGE(name,suffix)                                              \
ManPageTargetName(name,suffix):	LOCAL_PATH/$(PREFIX(MANSUBDIR))name.man	@@\
	@echo Installing $@                                             @@\
	install -d $(EXPORTMAN)/man/**/suffix                           @@\
	cat LOCAL_PATH/$(PREFIX(MANSUBDIR))name.man | perl -pe 's/^.TH +([^ ]+) *\"?(\d+)\"?/\.TH $${1} \"$${2}castor\"/g' | perl -pe UglyTarget(suffix) > ManPageTargetName(name,suffix) @@\
PREFIX(exportman): ManPageTargetName(name,suffix)

#define EXEMANPAGE(name) MANPAGE(name,1)
#define SYSMANPAGE(name) MANPAGE(name,2)
#define LIBMANPAGE(name) MANPAGE(name,3)
#define FILEMANPAGE(name) MANPAGE(name,4)
#define ADMMANPAGE(name) MANPAGE(name,8)

#define RemoveFiles(files) rm -f files
#define AddLdFlags(flags) PREFIX(LDFLAGS) += flags

#define PROC(file)                                    \
LOCAL_PATH/file.c: LOCAL_PATH/file.pc               @@\
	@echo "Preprocessing" $@                    @@\
	cd LOCAL_PATH; $(ORACLE_HOME)/bin/proc iname=file include=$(CASTOR_ROOT)/h threads=yes char_map=string parse=full prefetch=1000; cd - @@\
COMM We overwrite here the default rule for the compilation of Cupv_oracle_ifce in order @@\
COMM to be able to discard the -Werror present in the standard flags. The reason is that @@\
COMM the code generated by proc is full of warnings...                                   @@\
LOCAL_PATH/file.o: LOCAL_PATH/file.c                @@\
	@echo Compiling $@                          @@\
	$(COMPILE.c) $(OUTPUT_OPTION) -Wno-error $< @@\
FilesToClean += LOCAL_PATH/file.c LOCAL_PATH/file.lis

#define InternalInstallTarget(file,mode,dest,insttarget,deps,subdir) \
$(DESTDIR)/dest/file: LOCAL_PATH/subdir/**/file deps               @@\
	@echo Installing $@                                        @@\
	install -d $(DESTDIR)/dest -m 0755                         @@\
	install -m mode $< $(DESTDIR)/dest                         @@\
insttarget: $(DESTDIR)/dest/file

#define InstallTarget(file,mode) \
InternalInstallTarget(file,mode,InstallBinDir,install,,)

#define InstallLink(tofile,fromfile,mode,dest,component) \
$(DESTDIR)/dest/tofile: fromfile                       @@\
	@echo Installing $@                            @@\
	install -d $(DESTDIR)/dest -m 0755             @@\
	RemoveFiles($@)                                @@\
	ln -s $< $@                                    @@\
install/**/component: $(DESTDIR)/dest/tofile

#define LinkFile(tofile,fromfile,mode,component) \
LOCAL_PATH/tofile: LOCAL_PATH/fromfile         @@\
	@echo Installing $@                    @@\
	RemoveFiles($@)                        @@\
	ln -s $< $@                            @@\
component: LOCAL_PATH/tofile                   @@\
FilesToClobber += LOCAL_PATH/tofile            @@\
InstallLink(tofile,LOCAL_PATH/fromfile,mode,InstallBinDir,component)

#define DepSourceName(dirname,source)../dirname/source
#define BareSharedLibraryTargetName(libname)libname.so
#define SharedLibraryName(libname)BareSharedLibraryTargetName(libname).$(MAJOR_CASTOR_VERSION)
#define SharedLibraryFullName(libname)SharedLibraryName(libname).$(MINOR_CASTOR_VERSION)
#define SharedLibraryTargetName(libname)SharedLibraryName(lib/**/libname)
#define InstallLibraryTargetNames(deplibs)$(if deplibs,$(addprefix $(DESTDIR)/$(LIBDIR)/,$(subst .$(MAJOR_CASTOR_VERSION),,$(notdir deplibs))))
#define DepSharedLibraryTargetName(directory,libname)$(CASTOR_ROOT)/directory/SharedLibraryName(lib/**/libname)

#define InternalSchModTarget(libname,obj,deplibs,libs,directory)                                                \
LOCAL_PATH/BareSharedLibraryTargetName(libname): obj deplibs $(PREFIX(DEPLIB))                                @@\
	@echo "  Linking" $@                                                                                  @@\
	$(CC) DYLIBLINKEROPTION -fPIC -o $@ $(LDFLAGS) $(PREFIX(LDFLAGS)) obj libs $(PREFIX(LIBS))            @@\
$(DESTDIR)/directory/BareSharedLibraryTargetName(libname): LOCAL_PATH/BareSharedLibraryTargetName(libname)    @@\
	install -d $(DESTDIR)/directory                                                                       @@\
	install -m 644 LOCAL_PATH/BareSharedLibraryTargetName(libname) $(DESTDIR)/directory/BareSharedLibraryTargetName(libname) @@\
install: directory $(DESTDIR)/directory/BareSharedLibraryTargetName(libname)                                  @@\
all: LOCAL_PATH/BareSharedLibraryTargetName(libname)                                                          @@\
PREFIX(FilesToClean) += obj $(patsubst %.o,%.d,obj)                                                           @@\
PREFIX(FilesToClobber) += LOCAL_PATH/BareSharedLibraryTargetName(libname)                                     @@\
obj: %.o: %.d

#define BareSharedLibraryTarget(libname,objects,deplibs,libs,directory,alltgt,installtgt)            \
LOCAL_PATH/SharedLibraryName(libname): objects deplibs                                             @@\
	@echo "  Linking" $@                                                                       @@\
	$(CC) DYLIBLINKEROPTION --no-undefined -o $@ $(LDFLAGS) $(PREFIX(LDFLAGS)) -Wl,SONAMELINKEROPTION,SharedLibraryName(libname) objects $(LIBS) libs              @@\
$(DESTDIR)/directory/BareSharedLibraryTargetName(libname): LOCAL_PATH/SharedLibraryName(libname) InstallLibraryTargetNames(deplibs) InstallLibraryTargetNames(deplibs) @@\
	install -d $(DESTDIR)/directory                                                            @@\
	install $< $(DESTDIR)/directory/SharedLibraryFullName(libname)                             @@\
	rm -f $(DESTDIR)/directory/SharedLibraryName(libname) $@                                   @@\
	ln -s SharedLibraryFullName(libname) $(DESTDIR)/directory/SharedLibraryName(libname)       @@\
	ln -s SharedLibraryName(libname) $@                                                        @@\
installtgt: $(DESTDIR)/directory/BareSharedLibraryTargetName(libname)                              @@\
alltgt: LOCAL_PATH/SharedLibraryName(libname)                                                      @@\
PREFIX(FilesToClean) += objects $(patsubst %.o,%.d,objects)                                        @@\
PREFIX(FilesToClobber) += LOCAL_PATH/SharedLibraryName(libname)                                    @@\
objects: %.o: %.d

#define SchModTarget(libname,obj,deplibs,libs,directory) InternalSchModTarget(libname,$(patsubst %,LOCAL_PATH/%,obj),deplibs,libs,directory)
#define SharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(DEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(LIBS)) libs,$(LIBDIR),all,install)
#define PlacedSharedLibraryTarget(libname,objects,deplibs,libs,directory) BareSharedLibraryTarget(lib/**/libname,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(DEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(LIBS)) libs,directory,all,install)
#define ClientSharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(CLIENTDEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(CLIENTLIBS)) libs,$(LIBDIR),client,installclient)
#define TapeSharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(TAPEDEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(TAPELIBS)) libs,$(LIBDIR),tape,installtape)

#define ClientInstallNonExecFile(file,dest,mode) \
InternalInstallTarget(file,mode,dest,installclient,,)

#define InstallNonExecFile(file,dest,mode) \
InternalInstallTarget(file,mode,dest,install,,)

#define InstallNonExecFileSubdir(file,dest,mode,subdir) \
InternalInstallTarget(file,mode,dest,install,,subdir)

#define MakeDir(dirname,mode)   \
ifndef dirname                                @@\
  dirname = 1                                 @@\
$(DESTDIR)/dirname:                           @@\
	install -d $(DESTDIR)/dirname -m mode @@\
install: $(DESTDIR)/dirname                   @@\
endif
#define TapeMakeDir(dirname,mode)   \
ifndef dirname                                @@\
  dirname = 1                                 @@\
$(DESTDIR)/dirname:                           @@\
	install -d $(DESTDIR)/dirname -m mode @@\
installtape: $(DESTDIR)/dirname               @@\
endif
#define MakeDirWithOwnership(dirname,owner,group,mode)   \
ifndef dirname                                @@\
  dirname = 1                                 @@\
$(DESTDIR)/dirname:                           @@\
	if [ "`whoami`" = "root" ]; then install -d $(DESTDIR)dirname -o owner -g group -m mode; else install -d $(DESTDIR)dirname -m mode; fi @@\
install: $(DESTDIR)/dirname                   @@\
endif

#define ProgramTarget(program,objects,deplibs,libs,mode,alltarget,installtarget)   \
LOCAL_PATH/program: objects deplibs	                                         @@\
	@echo "  Linking" $@                                                     @@\
	$(CC) -o $@ $(LDFLAGS) $(PREFIX(LDFLAGS)) objects libs                   @@\
alltarget: LOCAL_PATH/program                                                    @@\
InternalInstallTarget(program,mode,InstallBinDir,install/**/installtarget,InstallLibraryTargetNames(deplibs),) @@\
PREFIX(FilesToClean) += objects $(patsubst %.o,%.d,objects)                      @@\
PREFIX(FilesToClobber) += LOCAL_PATH/program                                     @@\
objects: %.o: %.d

#define NormalProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(DEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(LIBS)) libs,mode,all,)

#define ClientProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(CLIENTDEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(CLIENTLIBS)) libs,mode,client,client)

#define TapeProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,$(patsubst %,LOCAL_PATH/%,objects),$(PREFIX(COMMONDEPLIB)) $(PREFIX(TAPEDEPLIB)) deplibs,$(PREFIX(COMMONLIBS)) $(PREFIX(TAPELIBS)) libs,mode,tape,tape)


/* manual list of dependencies to solve the -rpath issue. Not very nice */
#define commonRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/common
#define upvRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/upv
#define securityRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/security
#define dlfRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/dlf
#define rfioRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/rfio
#define nsRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/ns
#define vmgrRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/vmgr
#define vdqmRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/vdqm
#define castorRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor
#define cnvRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor/db/cnv
#define oraRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor/db/newora
#define BuildRPathcastorcommon 
#define BuildRPathcastorupv commonRPath
#define BuildRPathcastorsecurity commonRPath
#define BuildRPathcastordlf commonRPath
#define BuildRPathcastorcnvs commonRPath castorRPath dlfRPath nsRPath securityRPath
#define BuildRPathcastorvdqm commonRPath
#define BuildRPathcastorvmgr commonRPath upvRPath
#define BuildRPathcastorns commonRPath securityRPath upvRPath
#define BuildRPathcastorclient commonRPath securityRPath upvRPath dlfRPath nsRPath
#define BuildRPathcastorexpert commonRPath upvRPath nsRPath vmgrRPath vdqmRPath
#define BuildRPathcastorrtcopy commonRPath dlfRPath castorRPath 
#define BuildRPathcastorrfio commonRPath securityRPath castorRPath dlfRPath nsRPath
#define BuildRPathcastortape commonRPath securityRPath rfioRPath vmgrRPath upvRPath castorRPath vdqmRPath nsRPath
#define BuildRPathcastormonitor commonRPath castorRPath
#define BuildRPathcastorcommonora commonRPath cnvRPath dlfRPath vmgrRPath upvRPath
#define BuildRPathcastorinfopolicy commonRPath castorRPath oraRPath cnvRPath
#define BuildRPathcastortapegatewayprotocol commonRPath securityRPath nsRPath dlfRPath castorRPath
#define BuildRPathcastortapepython commonRPath securityRPath nsRPath dlfRPath castorRPath
#define BuildRPathcastortapeutils commonRPath securityRPath nsRPath dlfRPath castorRPath

#define DependsOnLibrary(directory,libname)                                   \
PREFIX(DEPLIB) += DepSharedLibraryTargetName(directory,libname)                     @@\
PREFIX(LIBS) += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
include $(CASTOR_ROOT)/directory/Makefile

#define ClientDependsOnLibrary(directory,libname)                                   \
PREFIX(CLIENTDEPLIB) += DepSharedLibraryTargetName(directory,libname)                     @@\
PREFIX(CLIENTLIBS) += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
include $(CASTOR_ROOT)/directory/Makefile

#define TapeDependsOnLibrary(directory,libname)                                   \
PREFIX(TAPEDEPLIB) += DepSharedLibraryTargetName(directory,libname)                     @@\
PREFIX(TAPELIBS) += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
include $(CASTOR_ROOT)/directory/Makefile

#define CommonDependsOnLibrary(directory,libname)                                   \
PREFIX(COMMONDEPLIB) += DepSharedLibraryTargetName(directory,libname)                     @@\
PREFIX(COMMONLIBS) += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
include $(CASTOR_ROOT)/directory/Makefile


#define LOGROTATE(file,tgt)                             \
ifndef $(DESTDIR)/etc/logrotate.d/file                @@\
  $(DESTDIR)/etc/logrotate.d/file = 1                 @@\
$(DESTDIR)/etc/logrotate.d/file: $(CASTOR_ROOT)/debian/file.logrotate @@\
	install -d $(DESTDIR)/etc/logrotate.d -m 0755 @@\
	install $< $@                                 @@\
tgt: $(DESTDIR)/etc/logrotate.d/file                  @@\
endif

#define internalSYSCONFIG(destfile,origfile,tgt)         \
$(DESTDIR)/etc/sysconfig/destfile: LOCAL_PATH/origfile @@\
	install -d $(DESTDIR)/etc/sysconfig -m 0755    @@\
	install -m 644 $< $@                           @@\
tgt: $(DESTDIR)/etc/sysconfig/destfile

#define SYSCONFIG(file,tgt) \
internalSYSCONFIG(file.example,file.sysconfig,tgt)

#define INITSCRIPT(file,tgt)                       \
$(DESTDIR)/etc/init.d/file: LOCAL_PATH/file.init @@\
	install -d $(DESTDIR)/etc/init.d -m 0755 @@\
	install -m 755 $< $@                     @@\
tgt: $(DESTDIR)/etc/init.d/file

#define CONFIGFILE(file,tgt)                                \
$(DESTDIR)/etc/castor/file/**/CONFIG.example: $(CASTOR_ROOT)/debian/file/**/CONFIG @@\
	install -d $(DESTDIR)/etc/castor -m 0755                                   @@\
	install -m 640 $< $@                                                       @@\
tgt: $(DESTDIR)/etc/castor/file/**/CONFIG.example

#define EXAMPLEFILE(file,dest,tgt)                         \
$(DESTDIR)/dest/file.example: $(CASTOR_ROOT)/debian/file @@\
	install -d $(DESTDIR)/dest -m 0755               @@\
	install -m 644 $< $@                             @@\
tgt: $(DESTDIR)/dest/file.example

#define COMPILECPP(file,flags)                              \
LOCAL_PATH/$(patsubst %.cpp,%.o,file): LOCAL_PATH/file @@\
	@echo Compiling $@                             @@\
	$(COMPILE.cpp) $(OUTPUT_OPTION) flags $<       @@\
LOCAL_PATH/$(patsubst %.cpp,%.d,file): LOCAL_PATH/file @@\
	gcc -MM $(CPPFLAGS) flags $< | sed -n "H;$$ {g;s,\($*\)\.o[ :]*,\1.o $@ : ,;p}" > $@

#define COMPILEC(file,flags)                           \
LOCAL_PATH/$(patsubst %.c,%.o,file): LOCAL_PATH/file @@\
	@echo Compiling $@                           @@\
	$(COMPILE.c) $(OUTPUT_OPTION) flags $<       @@\
LOCAL_PATH/$(patsubst %.c,%.d,file): LOCAL_PATH/file @@\
	gcc -MM $(CPPFLAGS) flags $< | sed -n "H;$$ {g;s,\($*\)\.o[ :]*,\1.o $@ : ,;p}" > $@

COMM Replacement for the default rules, in order to not display all compilation commands by default

%.o: %.c
	@echo Compiling $@
	$(COMPILE.c) $(OUTPUT_OPTION) $<

%.o: %.cpp
	@echo Compiling $@
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<
