/*
 * Copyright (C) 1993-2001 by CERN/IT/PDP/DM
 * All rights reserved
 */

/*
 * @(#)$RCSfile: Imake.rules,v $ $Revision: 1.33 $ $Date: 2009/06/05 08:11:27 $ CERN IT-PDP/DM   Jean-Philippe Baud
 */

#define NullParameter

#define ManPageTargetName(name,suffix) $(EXPORTMAN)/man/**/suffix/name.suffix/**/castor
#define UglyTarget(suffix) 's/^\.so \.?\/?(\w+)(.*)/\.so man'/**/suffix/**/'\/$${1}\.'/**/suffix/**/'castor/g'

#define MANPAGE(name,suffix) \
ManPageTargetName(name,suffix):	$(MANSUBDIR)name.man	@@\
	@install -d $(EXPORTMAN)/man/**/suffix          @@\
	@echo Installing man page name.man              @@\
	@cat $(MANSUBDIR)name.man | perl -pe 's/^.TH +([^ ]+) *\"?(\d+)\"?/\.TH $${1} \"$${2}castor\"/g' | perl -pe UglyTarget(suffix) > ManPageTargetName(name,suffix) @@\
exportman: ManPageTargetName(name,suffix)

#define EXEMANPAGE(name) MANPAGE(name,1)
#define SYSMANPAGE(name) MANPAGE(name,2)
#define LIBMANPAGE(name) MANPAGE(name,3)
#define FILEMANPAGE(name) MANPAGE(name,4)
#define ADMMANPAGE(name) MANPAGE(name,8)

#define RemoveFiles(files) rm -f files

#define InternalInstallTarget(file,mode,dest,insttarget,deps) \
$(DESTDIR)/dest/file: $(INSUBDIR)file deps  @@\
	install -d $(DESTDIR)/dest -m 0755  @@\
	install -m mode $< $(DESTDIR)/dest  @@\
insttarget: $(DESTDIR)/dest/file            @@\

#define InstallTarget(file,mode,dest) \
InternalInstallTarget(file,mode,dest,install,)

#define InstallLink(tofile,fromfile,mode,dest,component) \
$(DESTDIR)/dest/tofile: fromfile           @@\
	install -d $(DESTDIR)/dest -m 0755 @@\
	RemoveFiles($@)                    @@\
	ln -s $< $@                        @@\
install/**/component: $(DESTDIR)/dest/tofile

#define LinkFile(tofile,fromfile,mode,component) \
tofile: fromfile                @@\
	RemoveFiles($@)         @@\
	ln -s $< $@             @@\
component: tofile               @@\
FilesToClobber += tofile        @@ \
InstallLink(tofile,fromfile,mode,$(BIN),component)

#define DepSourceName(dirname,source)../dirname/source
#define BareSharedLibraryTargetName(libname)libname.so
#define SharedLibraryName(libname)BareSharedLibraryTargetName(libname).$(MAJOR_CASTOR_VERSION)
#define SharedLibraryFullName(libname)SharedLibraryName(libname).$(MINOR_CASTOR_VERSION)
#define SharedLibraryTargetName(libname)SharedLibraryName(lib/**/libname)
#define DepSharedLibraryTargetName(directory,libname)$(CASTOR_ROOT)/directory/SharedLibraryName(lib/**/libname)
#define InstallLibraryTargetNames(deplibs)$(if deplibs,$(addprefix $(DESTDIR)/$(LIBDIR)/,$(subst .$(MAJOR_CASTOR_VERSION),,$(notdir deplibs))))

#define SchModTarget(libname,obj,deplibs,libs,directory)                                                                \
BareSharedLibraryTargetName(libname): obj deplibs $(DEPLIB)                                                           @@\
	$(CC) DYLIBLINKEROPTION -fPIC -o $@ $(LDFLAGS) obj libs $(LIBS)                                               @@\
$(DESTDIR)/directory/BareSharedLibraryTargetName(libname): BareSharedLibraryTargetName(libname)                       @@\
	@install -d $(DESTDIR)/directory                                                                              @@\
	install -m 644 BareSharedLibraryTargetName(libname) $(DESTDIR)/directory/BareSharedLibraryTargetName(libname) @@\
install: directory $(DESTDIR)/directory/BareSharedLibraryTargetName(libname)                                          @@\
all: BareSharedLibraryTargetName(libname)                                                                             @@\
FilesToClean += obj $(patsubst %.o,%.d,obj) BareSharedLibraryTargetName(libname)                                      @@\
FilesToClobber += BareSharedLibraryTargetName(libname)                                                                @@\
obj: %.o: %.d

#define BareSharedLibraryTarget(libname,objects,deplibs,libs,directory,alltgt,installtgt)            \
SharedLibraryName(libname): objects deplibs                                                        @@\
	$(CC) DYLIBLINKEROPTION --no-undefined -o $@ $(LDFLAGS) -Wl,SONAMELINKEROPTION,SharedLibraryName(libname) objects libs                              @@\
$(DESTDIR)/directory/BareSharedLibraryTargetName(libname): SharedLibraryName(libname) InstallLibraryTargetNames(deplibs) InstallLibraryTargetNames(deplibs) @@\
	@install -d $(DESTDIR)/directory                                                           @@\
	install $< $(DESTDIR)/directory/SharedLibraryFullName(libname)                             @@\
	rm -f $(DESTDIR)/directory/SharedLibraryName(libname) $@                                   @@\
	ln -s SharedLibraryFullName(libname) $(DESTDIR)/directory/SharedLibraryName(libname)       @@\
	ln -s SharedLibraryName(libname) $@                                                        @@\
installtgt: $(DESTDIR)/directory/BareSharedLibraryTargetName(libname)                              @@\
alltgt: SharedLibraryName(libname)                                                                 @@\
FilesToClean += objects $(patsubst %.o,%.d,objects)                                               @@\
FilesToClobber += SharedLibraryName(libname)                                                       @@\
objects: %.o: %.d

#define SharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,objects,$(COMMONDEPLIB) $(DEPLIB) deplibs,$(COMMONLIBS) $(LIBS) libs,$(LIBDIR),all,install)
#define PlacedSharedLibraryTarget(libname,objects,deplibs,libs,directory) BareSharedLibraryTarget(lib/**/libname,objects,$(COMMONDEPLIB) $(DEPLIB) deplibs,$(COMMONLIBS) $(LIBS) libs,directory,all,install)
#define ClientSharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,objects,$(COMMONDEPLIB) $(CLIENTDEPLIB) deplibs,$(COMMONLIBS) $(CLIENTLIBS) libs,$(LIBDIR),client,installclient)
#define TapeSharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,objects,$(COMMONDEPLIB) $(TAPEDEPLIB) deplibs,$(COMMONLIBS) $(TAPELIBS) libs,$(LIBDIR),tape,installtape)

#define MakeDepSharedLibrary(directory,libname)                            \
$(CASTOR_ROOT)/directory/SharedLibraryName(libname):		         @@\
	cd $(CASTOR_ROOT)/directory ; $(MAKE) SharedLibraryName(libname) @@\
$(DESTDIR)/$(LIBDIR)/BareSharedLibraryTargetName(libname):               @@\
	cd $(CASTOR_ROOT)/directory ; $(MAKE) $@

#define DealWithSubdirs(cmd,directory)             \
	if [ -d directory ] ;                      \
	then                                       \
	  (echo " directory:" ; cd directory ;     \
	  $(MAKE) cmd) ;                           \
	else                                       \
	  (echo "ERROR : No directory directory" ; \
	  exit 1) ;                                \
	fi;

#define GotoSubdirs(dirs)         \
	@for i in dirs ; do       \
	  (DealWithSubdirs($@, $$i)); \
	done;

#define ClientInstallNonExecFile(file,dest,mode) \
InternalInstallTarget(file,mode,dest,installclient,)

#define InstallNonExecFile(file,dest,mode) \
InternalInstallTarget(file,mode,dest,install,)

#define MakeDir(dirname,mode)   \
$(DESTDIR)/dirname:                           @@\
	install -d $(DESTDIR)/dirname -m mode @@\
install: $(DESTDIR)/dirname
#define TapeMakeDir(dirname,mode)   \
$(DESTDIR)/dirname:                           @@\
	install -d $(DESTDIR)/dirname -m mode @@\
installtape: $(DESTDIR)/dirname
#define MakeDirWithOwnership(dirname,owner,group,mode)   \
$(DESTDIR)/dirname:                           @@\
	if [ "`whoami`" = "root" ]; then install -d $(DESTDIR)dirname -o owner -g group -m mode; else install -d $(DESTDIR)dirname -m mode; fi @@\
install: $(DESTDIR)/dirname

#define ProgramTarget(program,objects,deplibs,libs,mode,alltarget,installtarget) \
program: objects deplibs	                     @@\
	$(CC) -o $@ $(LDFLAGS) objects libs          @@\
alltarget: program                                   @@\
InternalInstallTarget(program,mode,$(BIN),install/**/installtarget,InstallLibraryTargetNames(deplibs)) @@\
FilesToClean += objects $(patsubst %.o,%.d,objects) @@\
FilesToClobber += program                            @@\
objects: %.o: %.d

#define NormalProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,objects,$(COMMONDEPLIB) $(DEPLIB) deplibs,$(COMMONLIBS) $(LIBS) libs,mode,all,)

#define ClientProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,objects,$(COMMONDEPLIB) $(CLIENTDEPLIB) deplibs,$(COMMONLIBS) $(CLIENTLIBS) libs,mode,client,client)

#define TapeProgramTarget(program,objects,deplibs,libs,mode) \
ProgramTarget(program,objects,$(COMMONDEPLIB) $(TAPEDEPLIB) deplibs,$(COMMONLIBS) $(TAPELIBS) libs,mode,tape,tape)


/* manual list of dependencies to solve the -rpath issue. Not very nice */
#define commonRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/common
#define upvRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/upv
#define securityRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/security
#define dlfRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/dlf
#define rfioRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/rfio
#define nsRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/ns
#define vmgrRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/vmgr
#define vdqmRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/vdqm
#define castorRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor
#define cnvRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor/db/cnv
#define oraRPath -Wl,RPATHLINKEROPTION,$(CASTOR_ROOT)/castor/db/newora
#define BuildRPathcastorcommon 
#define BuildRPathcastorupv commonRPath
#define BuildRPathcastorsecurity commonRPath
#define BuildRPathcastordlf commonRPath
#define BuildRPathcastorcnvs commonRPath castorRPath dlfRPath nsRPath securityRPath
#define BuildRPathcastorvdqm commonRPath
#define BuildRPathcastorvmgr commonRPath upvRPath
#define BuildRPathcastorns commonRPath securityRPath upvRPath
#define BuildRPathcastorclient commonRPath securityRPath upvRPath dlfRPath nsRPath
#define BuildRPathcastorexpert commonRPath upvRPath nsRPath vmgrRPath vdqmRPath
#define BuildRPathcastorrtcopy commonRPath dlfRPath castorRPath 
#define BuildRPathcastorrfio commonRPath securityRPath castorRPath dlfRPath nsRPath
#define BuildRPathcastortape commonRPath securityRPath rfioRPath vmgrRPath upvRPath castorRPath vdqmRPath nsRPath
#define BuildRPathcastormonitor commonRPath castorRPath
#define BuildRPathcastorcommonora commonRPath cnvRPath dlfRPath vmgrRPath upvRPath
#define BuildRPathcastorinfopolicy commonRPath castorRPath oraRPath cnvRPath
#define BuildRPathcastortapegatewayprotocol commonRPath securityRPath nsRPath dlfRPath castorRPath
#define BuildRPathcastortapepython commonRPath securityRPath nsRPath dlfRPath castorRPath
#define BuildRPathcastortapeutils commonRPath securityRPath nsRPath dlfRPath castorRPath

#define DependsOnLibrary(directory,libname)                                   \
DEPLIB += DepSharedLibraryTargetName(directory,libname)                     @@\
LIBS += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
MakeDepSharedLibrary(directory,lib/**/libname)

#define ClientDependsOnLibrary(directory,libname)                                   \
CLIENTDEPLIB += DepSharedLibraryTargetName(directory,libname)                     @@\
CLIENTLIBS += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
MakeDepSharedLibrary(directory,lib/**/libname)

#define TapeDependsOnLibrary(directory,libname)                                   \
TAPEDEPLIB += DepSharedLibraryTargetName(directory,libname)                     @@\
TAPELIBS += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
MakeDepSharedLibrary(directory,lib/**/libname)

#define CommonDependsOnLibrary(directory,libname)                                   \
COMMONDEPLIB += DepSharedLibraryTargetName(directory,libname)                     @@\
COMMONLIBS += DepSharedLibraryTargetName(directory,libname) BuildRPath/**/libname @@\
MakeDepSharedLibrary(directory,lib/**/libname)


#define LOGROTATE(file,rootdir,tgt)                              \
$(DESTDIR)/etc/logrotate.d/file: rootdir/debian/file.logrotate @@\
	install -d $(DESTDIR)/etc/logrotate.d -m 0755          @@\
	install $< $@                                          @@\
tgt: $(DESTDIR)/etc/logrotate.d/file

#define internalSYSCONFIG(destfile,origfile,tgt)      \
$(DESTDIR)/etc/sysconfig/destfile: origfile         @@\
	install -d $(DESTDIR)/etc/sysconfig -m 0755 @@\
	install -m 644 $< $@                        @@\
tgt: $(DESTDIR)/etc/sysconfig/destfile

#define SYSCONFIG(file,tgt) \
internalSYSCONFIG(file.example,file.sysconfig,tgt)

#define INITSCRIPT(file,tgt)                           \
$(DESTDIR)/etc/init.d/file: file.init                @@\
	install -d $(DESTDIR)/etc/init.d -m 0755     @@\
	install -m 755 $< $@                         @@\
tgt: $(DESTDIR)/etc/init.d/file

#define CONFIGFILE(file,rootdir,tgt)                                \
$(DESTDIR)/etc/castor/file/**/CONFIG.example: rootdir/debian/file/**/CONFIG @@\
	install -d $(DESTDIR)/etc/castor -m 0755                  @@\
	install -m 640 $< $@                                      @@\
tgt: $(DESTDIR)/etc/castor/file/**/CONFIG.example

#define EXAMPLEFILE(file,orig,dest,tgt)        \
$(DESTDIR)/dest/file.example: orig/file      @@\
	install -d $(DESTDIR)/dest -m 0755   @@\
	install -m 644 $< $@                 @@\
tgt: $(DESTDIR)/dest/file.example
