/*
 * Copyright (C) 1993-2001 by CERN/IT/PDP/DM
 * All rights reserved
 */

/*
 * @(#)$RCSfile: Imake.rules,v $ $Revision: 1.25 $ $Date: 2008/11/28 14:40:03 $ CERN IT-PDP/DM   Jean-Philippe Baud
 */

#define NullParameter

#define ManPageTargetName(name,dir,suffix)dir/name.suffix/**/castor
#define UglyTarget(suffix) 's/^\.so \.?\/?(\w+)(.*)/\.so man'/**/suffix/**/'\/$${1}\.'/**/suffix/**/'castor/g'

#define MANPAGE(name,suffix) \
$(EXPORTMAN)/man/**/suffix/name.suffix:	$(MANSUBDIR)name.man	@@\
	@install -d $(EXPORTMAN)/man/**/suffix                  @@\
	cat $(MANSUBDIR)name.man | perl -pe 's/^.TH +([^ ]+) *\"?(\d+)\"?/\.TH $${1} \"$${2}castor\"/g' | perl -pe UglyTarget(suffix) > ManPageTargetName(name,$(EXPORTMAN)/man/**/suffix,suffix) @@\
exportman: $(EXPORTMAN)/man/**/suffix/name.suffix

#define EXEMANPAGE(name) MANPAGE(name,1)
#define SYSMANPAGE(name) MANPAGE(name,2)
#define LIBMANPAGE(name) MANPAGE(name,3)
#define FILEMANPAGE(name) MANPAGE(name,4)
#define ADMMANPAGE(name) MANPAGE(name,8)

#define RemoveFiles(files) rm -f files

#define InstallTarget(file,owner,group,mode,dest) \
$(DESTDIR)dest/file: $(INSUBDIR)file	        @@\
	@if [ "`whoami`" = "root" ]; then install -d $(DESTDIR)dest -o owner -g group -m 0755; else install -d $(DESTDIR)dest -m 0755; fi @@\
	if [ "`whoami`" = "root" ]; then install -o owner -g group -m mode $? $(DESTDIR)dest; else install -m mode $? $(DESTDIR)dest; fi  @@\
install: $(DESTDIR)dest/file                    @@\

#define InstallLink(tofile,fromfile,owner,group,mode,dest) \
$(DESTDIR)dest/tofile: fromfile	        @@\
	@if [ "`whoami`" = "root" ]; then install -d $(DESTDIR)dest -o owner -g group -m 0755; else install -d $(DESTDIR)dest -m 0755; fi @@\
	ln -s $? $@                     @@\
	@if [ "`whoami`" = "root" ]; then chown owner:group $@; chmod mode $@; fi @@\
install: $(DESTDIR)dest/tofile

#define LinkFile(tofile,fromfile,user,group,mode) \
tofile: fromfile                @@\
	RemoveFiles($@)         @@\
	ln -s $? $@             @@\
all: tofile                     @@\
InstallLink(tofile,fromfile,user,group,mode,$(BIN))

#define DepSourceName(dirname,source)../dirname/source
#define SharedLibraryTargetName(libname)lib/**/libname.so
#define BareSharedLibraryTargetName(libname)libname.so
#define SharedLibraryName(libname)BareSharedLibraryTargetName(libname).$(MAJOR_CASTOR_VERSION)
#define SharedLibraryFullName(libname)SharedLibraryName(libname).$(MINOR_CASTOR_VERSION)
#define DepSharedLibraryTargetName(dir,libname)../dir/BareSharedLibraryTargetName(lib/**/libname)

#define SchModTarget(libname,src,deplibs,libs,dir)                                                                \
BareSharedLibraryTargetName(libname): src deplibs                                                               @@\
	$(LD) -shared -fPIC -o $@ $(CPPFLAGS) src libs                                                          @@\
$(DESTDIR)/dir/BareSharedLibraryTargetName(libname): BareSharedLibraryTargetName(libname)                       @@\
	@install -d $(DESTDIR)/dir                                                                              @@\
	install -m 644 BareSharedLibraryTargetName(libname) $(DESTDIR)/dir/BareSharedLibraryTargetName(libname) @@\
install: dir $(DESTDIR)/dir/BareSharedLibraryTargetName(libname)                                                @@\
all: BareSharedLibraryTargetName(libname)                                                                       @@\
FilesToClean += BareSharedLibraryTargetName(libname)
FilesToClobber += BareSharedLibraryTargetName(libname)

#define BareSharedLibraryTarget(libname,objects,deplibs,libs,dir)                              \
SharedLibraryFullName(libname): objects deplibs                                              @@\
	$(LD) -shared -o $@ $(LDFLAGS) -Wl,-soname,SharedLibraryName(libname) objects libs   @@\
SharedLibraryName(libname): SharedLibraryFullName(libname)                                   @@\
	rm -f $@                                                                             @@\
	ln -s $< $@                                                                          @@\
BareSharedLibraryTargetName(libname): SharedLibraryName(libname)                             @@\
	rm -f $@                                                                             @@\
	ln -s $< $@                                                                          @@\
$(DESTDIR)/dir/BareSharedLibraryTargetName(libname): BareSharedLibraryTargetName(libname)    @@\
	@install -d $(DESTDIR)/dir                                                           @@\
	install SharedLibraryFullName(libname) $(DESTDIR)/dir/SharedLibraryFullName(libname) @@\
	rm -f $(DESTDIR)/dir/SharedLibraryName(libname) $@                                   @@\
	ln -s SharedLibraryFullName(libname) $(DESTDIR)/dir/SharedLibraryName(libname)       @@\
	ln -s SharedLibraryName(libname) $@                                                  @@\
install: dir $(DESTDIR)/dir/BareSharedLibraryTargetName(libname)                             @@\
all: BareSharedLibraryTargetName(libname)                                                    @@\
FilesToClean += objects                                                                      @@\
FilesToClobber += SharedLibraryFullName(libname) SharedLibraryName(libname) BareSharedLibraryTargetName(libname)

#define SharedLibraryTarget(libname,objects,deplibs,libs) BareSharedLibraryTarget(lib/**/libname,objects,deplibs,libs,$(LIBDIR))
#define PlacedSharedLibraryTarget(libname,objects,deplibs,libs,dir) BareSharedLibraryTarget(lib/**/libname,objects,deplibs,libs,dir)

#define MakeDepSharedLibrary(dir,libname) \
../dir/BareSharedLibraryTargetName(libname):		@@\
	cd ../dir ; $(MAKE) BareSharedLibraryTargetName(libname)

#define GotoSubdirs(dirs)                 \
	@for i in dirs ;                  \
	do (if [ -d $$i ] ;               \
	    then                          \
	      (echo " $$i:" ; cd $$i ;    \
	      $(MAKE) $(MFLAGS) $@) ;     \
	     else                         \
	      (echo "ERROR : No directory $$i" ;\
	      exit 1) ;                   \
	    fi ) ;                        \
	done;

#define MakeSubdirs(name,dirs) \
name:			     @@\
	GotoSubdirs(dirs)

#define MakeCondSubdirs(name,dirs,cond) \
name: cond			      @@\
	@for i in dirs ;                \
	do (echo " $$i:" ; cd $$i ;     \
		$(MAKE) $(MFLAGS) $@    \
	) ; done

#define InstallNonExecFile(file,dest,owner,group,mode) \
InstallTarget(file,owner,group,mode,dest)

#define MakeDir(dirname,owner,group,mode)   \
$(DESTDIR)dirname:			          @@\
	if [ "`whoami`" = "root" ]; then install -d $(DESTDIR)dirname -o owner -g group -m mode; else install -d $(DESTDIR)dirname -m mode; fi @@\
install: $(DESTDIR)dirname

#define NormalProgramTarget(program,objects,deplibs,libs,user,group,mode) \
program: objects deplibs		      @@\
	$(LD) -o $@ $(LDFLAGS) objects libs   @@\
all: program                                  @@\
InstallTarget(program,user,group,mode,$(BIN)) @@\
FilesToClean += objects                       @@\
FilesToClobber += program

/* manual list of dependencies to solve the -rpath issue. Not very nice */
#define commonRPath -Wl,-rpath-link,$(CASTOR_ROOT)/common
#define upvRPath -Wl,-rpath-link,$(CASTOR_ROOT)/upv
#define securityRPath -Wl,-rpath-link,$(CASTOR_ROOT)/security
#define dlfRPath -Wl,-rpath-link,$(CASTOR_ROOT)/dlf
#define rfioRPath -Wl,-rpath-link,$(CASTOR_ROOT)/rfio
#define nsRPath -Wl,-rpath-link,$(CASTOR_ROOT)/ns
#define vmgrRPath -Wl,-rpath-link,$(CASTOR_ROOT)/vmgr
#define vdqmRPath -Wl,-rpath-link,$(CASTOR_ROOT)/vdqm
#define castorRPath -Wl,-rpath-link,$(CASTOR_ROOT)/castor
#define cnvRPath -Wl,-rpath-link,$(CASTOR_ROOT)/castor/db/cnv
#define oraRPath -Wl,-rpath-link,$(CASTOR_ROOT)/castor/db/newora
#define BuildRPathcastorcommon 
#define BuildRPathcastorupv commonRPath
#define BuildRPathcastorsecurity commonRPath
#define BuildRPathcastordlf commonRPath
#define BuildRPathcastorcnvs commonRPath
#define BuildRPathcastorvdqm commonRPath
#define BuildRPathcastorvmgr commonRPath upvRPath
#define BuildRPathcastorns commonRPath securityRPath upvRPath
#define BuildRPathcastorclient commonRPath securityRPath upvRPath dlfRPath nsRPath
#define BuildRPathcastorexpert commonRPath upvRPath nsRPath vmgrRPath vdqmRPath
#define BuildRPathcastorrtcopy commonRPath dlfRPath castorRPath 
#define BuildRPathcastorrfio commonRPath securityRPath castorRPath dlfRPath nsRPath
#define BuildRPathcastortape commonRPath securityRPath rfioRPath vmgrRPath upvRPath castorRPath vdqmRPath nsRPath
#define BuildRPathcastormonitor commonRPath castorRPath
#define BuildRPathcastorcommonora commonRPath cnvRPath dlfRPath vmgrRPath upvRPath
#define BuildRPathcastorinfopolicy commonRPath castorRPath oraRPath cnvRPath

#define DependsOnLibrary(dir,libname)               \
DEPLIB += DepSharedLibraryTargetName(dir,libname) @@\
LIBS += -L ../dir -l libname BuildRPath/**/libname  @@\
MakeDepSharedLibrary(dir,lib/**/libname)
