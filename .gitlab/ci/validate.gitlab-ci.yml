validate-catalogue-schema-version:
  stage: validate
  dependencies: [] # Ensure no artifacts are downloaded
  rules:
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    # For pivot CTA releases: vX.Y.0
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-p -t"
    # For non-pivot CTA releases
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-n -t"
    # Any run on main
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-t"
    # For all other scenarios, manual run only
    - when: on_success
    - allow_failure: false
    - variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: ""
  image: $IMAGE_ANALYSIS
  script:
    - ./continuousintegration/checks/check_catalogue_schema_version.sh ${CATALOGUE_SCHEMA_CHECK_PARAMS} .

validate-pipeline-variables:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - when: on_success
  script:
    - |
      if [ "$USE_INTERNAL_REPOS" == "TRUE" ]; then
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-internal/*.repo /etc/yum.repos.d/
      else
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-public/*.repo /etc/yum.repos.d/
      fi
    # This repo is a special case as it provides CTA itself
    - cp -f continuousintegration/docker/${PLATFORM}/cta-public-testing.repo /etc/yum.repos.d/
    - python3 ./continuousintegration/checks/validate_ci_input_variables.py

validate-project-json:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - when: on_success
  script:
    - python3 ./continuousintegration/utils/project-json/validate_project_json.py

danger-review:
  # We allow failure here as we don't want to immediately auto-cancel the entire pipeline
  # Developers should be allowed to test things without
  allow_failure: true
  image:  registry.cern.ch/docker.io/ruby:3.4-alpine
  stage: validate
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never
  variables:
    DANGER_GITLAB_USE_THREADS: 1
  before_script:
    - apk add --no-cache git
    - gem install danger danger-gitlab faraday-retry
    - gem install faraday-retry
  script:
    - danger --verbose --dangerfile=continuousintegration/danger/Dangerfile --fail-on-errors=true
    - echo $? > danger_status.txt
  artifacts:
    paths:
      - danger_status.txt
    expire_in: 1 day

danger-review-gate:
  stage: validate
  needs:
    - job: danger-review
      artifacts: true
    - job: test-client
      optional: true
    - job: test-client-gfal2
      optional: true
    - job: test-repack
      optional: true
    - job: test-cta-admin
      optional: true
  script:
    - status=$(cat danger_status.txt)
    - if [ "$status" -ne 0 ]; then
        echo "Danger review failed. Please check the merge request comment.";
        exit 1;
      fi
    - echo "Danger passed."
