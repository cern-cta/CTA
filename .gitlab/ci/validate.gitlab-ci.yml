validate-catalogue-schema-version:
  stage: validate
  dependencies: [] # Ensure no artifacts are downloaded
  rules:
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    # For pivot CTA releases: vX.Y.0
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-p -t"
    # For non-pivot CTA releases
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-n -t"
    # Any run on main
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-t"
    # For all other scenarios, manual run only
    - when: on_success
    - allow_failure: false
    - variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: ""
  image: $IMAGE_ANALYSIS
  script:
    - ./continuousintegration/checks/check_catalogue_schema_version.sh ${CATALOGUE_SCHEMA_CHECK_PARAMS} .

validate-pipeline-variables:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $PIPELINE_TYPE == "MISC_ONLY"
      when: never
    - when: on_success
  script:
    - |
      if [ "$USE_INTERNAL_REPOS" == "TRUE" ]; then
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-internal/*.repo /etc/yum.repos.d/
      else
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-public/*.repo /etc/yum.repos.d/
      fi
    # This repo is a special case as it provides CTA itself
    - cp -f continuousintegration/docker/${PLATFORM}/cta-public-testing.repo /etc/yum.repos.d/
    - python3 ./continuousintegration/checks/validate_ci_input_variables.py

validate-project-json:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $PIPELINE_TYPE == "MISC_ONLY"
      when: never
    - when: on_success
  script:
    - python3 ./continuousintegration/utils/project-json/validate_project_json.py

validate-misc-only-changes:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PIPELINE_TYPE == "MISC_ONLY"
      when: on_success
    - when: never
  script:
    - cd continuousintegration/checks/
    - ./validate_misc_changes_only.sh --branch $CI_DEFAULT_BRANCH --whitelist misc_changes_whitelist.txt

redirect-if-misc-only-changes:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PIPELINE_TYPE != "MISC_ONLY"
      when: on_success
    - when: never
  script:
    - cd continuousintegration/checks/
    - VALIDATION_EXIT_CODE=0
    - ./validate_misc_changes_only.sh --branch "$CI_DEFAULT_BRANCH" --whitelist misc_changes_whitelist.txt || VALIDATION_EXIT_CODE=$?
    - |
      if [ "$VALIDATION_EXIT_CODE" -eq 0 ]; then
        echo "Only misc files changed â€” triggering a new MISC_ONLY pipeline and cancelling this one."

        echo "Triggering MISC_ONLY pipeline"
        curl -s -X POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipeline" \
          --header "PRIVATE-TOKEN: $CI_API_TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "ref": "$CI_MERGE_REQUEST_REF_PATH",
            "variables": [
              {
                "key": "PIPELINE_TYPE",
                "value": "MISC_ONLY"
              }
            ]
          }'

        echo "Cancelling current pipeline"
        curl -s -X POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel" \
          --header "PRIVATE-TOKEN: $CI_API_TOKEN"
      else
        echo "Non-misc changes found. Continuing normal pipeline."
      fi
