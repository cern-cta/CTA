validate-catalogue-schema-version:
  stage: validate
  dependencies: [] # Ensure no artifacts are downloaded
  rules:
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    # For pivot CTA releases: vX.Y.0
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-p -t"
    # For non-pivot CTA releases
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-n -t"
    # Any run on main
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-t"
    # For all other scenarios, manual run only
    - when: on_success
    - allow_failure: false
    - variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: ""
  image: $IMAGE_ANALYSIS
  script:
    - ./continuousintegration/checks/check_catalogue_schema_version.sh ${CATALOGUE_SCHEMA_CHECK_PARAMS} .

validate-pipeline-variables:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $PIPELINE_TYPE == "MISC_ONLY"
      when: never
    - when: on_success
  script:
    - |
      if [ "$USE_INTERNAL_REPOS" == "TRUE" ]; then
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-internal/*.repo /etc/yum.repos.d/
      else
        cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-public/*.repo /etc/yum.repos.d/
      fi
    # This repo is a special case as it provides CTA itself
    - cp -f continuousintegration/docker/${PLATFORM}/cta-public-testing.repo /etc/yum.repos.d/
    - python3 ./continuousintegration/checks/validate_ci_input_variables.py

validate-project-json:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $PIPELINE_TYPE == "MISC_ONLY"
      when: never
    - when: on_success
  script:
    - python3 ./continuousintegration/utils/project-json/validate_project_json.py

validate-misc-only-changes:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PIPELINE_TYPE == "MISC_ONLY"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "trigger" && $PIPELINE_TYPE == "MISC_ONLY"
      when: on_success
    - when: never
  script:
    - cd continuousintegration/checks/
    - TARGET_BRANCH=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_DEFAULT_BRANCH}
    - ./validate_misc_changes_only.sh --branch $TARGET_BRANCH --whitelist misc_changes_whitelist.txt

validate-misc-only-changes:
  stage: validate
  image: $IMAGE_ANALYSIS
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PIPELINE_TYPE == "DEFAULT"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "trigger" && $PIPELINE_TYPE == "MISC_ONLY"
      when: on_success
    - when: never
  script:
    - cd continuousintegration/checks/
    - TARGET_BRANCH="${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_DEFAULT_BRANCH}"
    - MISC_ONLY_EXIT_CODE=0
    - ./validate_misc_changes_only.sh --branch "$TARGET_BRANCH" --whitelist misc_changes_whitelist.txt || MISC_ONLY_EXIT_CODE=$?
    - |
      if [ "$PIPELINE_TYPE" = "MISC_ONLY" ]; then
        exit $MISC_ONLY_EXIT_CODE
      fi
    - echo "MISC_ONLY_EXIT_CODE=$MISC_ONLY_EXIT_CODE" >> misc_only.env
  artifacts:
    reports:
      dotenv: misc_only.env

trigger-misc-only-pipeline:
  stage: validate
  image: $IMAGE_ANALYSIS
  needs:
    - job: validate-misc-only-changes
  rules:
    - if: $PIPELINE_TYPE == "DEFAULT" && $MISC_ONLY_EXIT_CODE == "0"
      when: always
    - when: never
  trigger:
    branch: $CI_COMMIT_REF_NAME
  variables:
    PIPELINE_TYPE: "MISC_ONLY"
