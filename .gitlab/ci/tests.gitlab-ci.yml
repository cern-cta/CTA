
.prepare-xrootd4: &prepare-xrootd4
  - if [[ ${XROOTD_VERSION} -eq 4 ]];
    then echo "Using XRootD version 4";
      ./continuousintegration/docker/ctafrontend/opt/run/bin/cta-versionlock --file ./continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list config xrootd4;
      yum-config-manager --enable cta-ci-xroot;
      yum-config-manager --disable cta-ci-xrootd5;
    else echo "Using XRootD version 5";
    fi

.prepare-scheduler-type: &prepare-scheduler-type
  - if [[ ${SCHED_TYPE} != "objectstore" ]]; then
      echo "Using specified scheduler database type $SCHED_TYPE";
      sched_opt="-DCTA_USE_$(echo ${SCHED_TYPE} | tr '[:lower:]' '[:upper:]'):Bool=true ";
      sched_version=$(echo ${SCHED_TYPE} | cut -c 1-3);
      CTA_VERSION="${CTA_VERSION}${sched_version}";
      CMAKE_OPTIONS+="${sched_opt}";
    fi
  - if [[ ${UNIT_TEST} != "ON" ]]; then
      echo "Disabling unit test compilation.";
      CMAKE_OPTIONS+="-DSKIP_UNIT_TESTS:STRING=1 ";
    fi

.prepare-no-oracle: &prepare-no-oracle
  - if [[ ${ORACLE_SUPPORT} != "ON" ]]; then
      echo "Disabling Oracle Support";
      CMAKE_OPTIONS+="-DDISABLE_ORACLE_SUPPORT:BOOL=ON";
    fi

default:
  interruptible: true
  before_script:
    - export CTA_BUILD_ID=${CI_PIPELINE_ID}git${CI_COMMIT_SHA:0:8}
    - echo "Exporting CTA_BUILD_ID=${CTA_BUILD_ID}"
    - test -n "${CI_COMMIT_TAG}" && export TAG_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F'[v-]' '{print $2}')
    - test -n "${CI_COMMIT_TAG}" && export TAG_RELEASE=$(echo ${CI_COMMIT_TAG} | awk -F '-' '{if(NF>1) print $2; else print 0}')
    - xrootd_version=$(echo ${TAG_VERSION} | cut -d. -f1)
    - if [[ ${xrootd_version} == 4 ]]; then
        echo "Setting to compile with XRootD version 4";
        XROOTD_VERSION=4;
        CTA_VERSION=4;
      fi
    - cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum.repos.d/*.repo /etc/yum.repos.d/
    - *prepare-xrootd4
    - *prepare-scheduler-type
    - *prepare-no-oracle
    - cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/

cta_valgrind:
  stage: test
  rules:
    - if: $ALMA9 == "ON"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      allow_failure: false
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum -y install yum-plugin-priorities createrepo
    - cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo sqlite-debuginfo --enablerepo=debug
    - /usr/bin/cta-unitPlusSystemTests.sh

cta_system_tests:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $ALMA9 == "OFF"
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum -y install yum-plugin-priorities createrepo
    - cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo sqlite-debuginfo --enablerepo=debug
    - /usr/bin/cta-systemTests

dbunittests_postgresql:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $ALMA9 == "OFF"
  stage: test
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum -y install yum-plugin-priorities createrepo
    - cp -f continuousintegration/docker/ctafrontend/cc7/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo sqlite-debuginfo --enablerepo=debug
    - yum -y install cta-catalogueutils
    - yum -y install rh-postgresql12-postgresql-server
    - POSTGRESQL_DATA_DIR=/usr/local/cta_test_pgsql_data
    - POSTGRESQL_LOG_DIR=/var/log/postgres
    - echo POSTGRESQL_DATA_DIR=${POSTGRESQL_DATA_DIR}
    - echo POSTGRESQL_LOG_DIR=${POSTGRESQL_LOG_DIR}
    - mkdir -p ${POSTGRESQL_DATA_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_DATA_DIR}
    - mkdir -p ${POSTGRESQL_LOG_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_LOG_DIR}
    - export LD_LIBRARY_PATH=/opt/rh/rh-postgresql12/root/usr/lib64
    - POSTGRES_BIN=/opt/rh/rh-postgresql12/root/usr/bin
    - echo POSTGRES_BIN=${POSTGRES_BIN}
    - runuser -u postgres -- ${POSTGRES_BIN}/initdb -D ${POSTGRESQL_DATA_DIR}
    - runuser -u postgres -- ${POSTGRES_BIN}/pg_ctl start -w -t 10 -D ${POSTGRESQL_DATA_DIR} -l ${POSTGRESQL_LOG_DIR}/cta_test_postgres.log
    - runuser -u postgres -- ${POSTGRES_BIN}/createdb cta
    - runuser -u postgres -- ${POSTGRES_BIN}/createuser -E cta
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo 'postgresql:postgresql://cta@localhost/cta' > ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
    - valgrind /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
    - runuser -u postgres -- ${POSTGRES_BIN}/pg_ctl stop -D ${POSTGRESQL_DATA_DIR}

cta_valgrind_alma9:
  stage: test
  rules:
    - if: $ALMA9 == "OFF"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      allow_failure: false
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  before_script:
    - cp -f continuousintegration/docker/ctafrontend/alma9/repos/*.repo /etc/yum.repos.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/dnf/plugins/versionlock.list
    - yum -y install wget
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
  script:
    - yum -y install createrepo epel-release almalinux-release-devel
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo
    - /usr/bin/cta-unitPlusSystemTests.sh

cta_system_tests_alma9:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $ALMA9 == "ON"
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  before_script:
    - cp -f continuousintegration/docker/ctafrontend/alma9/repos/*.repo /etc/yum.repos.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/dnf/plugins/versionlock.list
    - yum -y install wget
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
  script:
    - yum -y install createrepo epel-release almalinux-release-devel
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo
    - /usr/bin/cta-systemTests

dbunittests_postgresql_alma9:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $ALMA9 == "ON"
  stage: test
  variables:
    CTAREPODIR: /tmp/repo
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  before_script:
    - cp -f continuousintegration/docker/ctafrontend/alma9/repos/*.repo /etc/yum.repos.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
    - cp -f continuousintegration/docker/ctafrontend/alma9/yum/pluginconf.d/versionlock.list /etc/dnf/plugins/versionlock.list
    - yum -y install wget
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
  script:
    - yum -y install createrepo epel-release almalinux-release-devel
    - mkdir -p ${CTAREPODIR}; cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}; echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum -y --nogpgcheck install cta-systemtests cta-debuginfo
    - yum -y install cta-catalogueutils
    - yum -y install postgresql-server
    - POSTGRESQL_DATA_DIR=/usr/local/cta_test_pgsql_data
    - POSTGRESQL_LOG_DIR=/var/log/postgres
    - echo POSTGRESQL_DATA_DIR=${POSTGRESQL_DATA_DIR}
    - echo POSTGRESQL_LOG_DIR=${POSTGRESQL_LOG_DIR}
    - mkdir -p ${POSTGRESQL_DATA_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_DATA_DIR}
    - mkdir -p ${POSTGRESQL_LOG_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_LOG_DIR}
    - runuser -u postgres -- initdb -D ${POSTGRESQL_DATA_DIR}
    - runuser -u postgres -- pg_ctl start -w -t 10 -D ${POSTGRESQL_DATA_DIR} -l ${POSTGRESQL_LOG_DIR}/cta_test_postgres.log
    - runuser -u postgres -- createdb cta
    - runuser -u postgres -- createuser -E cta
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo 'postgresql:postgresql://cta@localhost/cta' > ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
    - valgrind /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
    - runuser -u postgres -- pg_ctl stop -D ${POSTGRESQL_DATA_DIR}
