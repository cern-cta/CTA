.before-script-alma9: &before-script-alma9
  - cp -f continuousintegration/docker/ctafrontend/alma9/etc/yum.repos.d/*.repo /etc/yum.repos.d/
  - cp -f continuousintegration/docker/ctafrontend/alma9/etc/yum/pluginconf.d/versionlock.list /etc/yum/pluginconf.d/
  - cp -f continuousintegration/docker/ctafrontend/alma9/etc/yum/pluginconf.d/versionlock.list /etc/dnf/plugins/versionlock.list
  - yum -y install createrepo epel-release almalinux-release-devel
  - mkdir -p ${CTAREPODIR}
  - cp -r build_rpm/RPM ${CTAREPODIR}
  - createrepo ${CTAREPODIR}
  - echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
  - yum -y --nogpgcheck install cta-systemtests cta-debuginfo

test-cta-valgrind:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      allow_failure: false
  image: $EL9_IMAGE
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *before-script-alma9
  script:
    - /usr/bin/cta-unitPlusSystemTests.sh

system-test-cta:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - when: on_success
  image: $EL9_IMAGE
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *before-script-alma9
  script:
    - /usr/bin/cta-systemTests

unit-test-postgresql:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - when: on_success
  image: $EL9_IMAGE
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *before-script-alma9
  script:
    - yum -y install cta-catalogueutils
    - yum -y install postgresql-server
    - POSTGRESQL_DATA_DIR=/usr/local/cta_test_pgsql_data
    - POSTGRESQL_LOG_DIR=/var/log/postgres
    - echo POSTGRESQL_DATA_DIR=${POSTGRESQL_DATA_DIR}
    - echo POSTGRESQL_LOG_DIR=${POSTGRESQL_LOG_DIR}
    - mkdir -p ${POSTGRESQL_DATA_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_DATA_DIR}
    - mkdir -p ${POSTGRESQL_LOG_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_LOG_DIR}
    - runuser -u postgres -- initdb -D ${POSTGRESQL_DATA_DIR}
    - runuser -u postgres -- pg_ctl start -w -t 10 -D ${POSTGRESQL_DATA_DIR} -l ${POSTGRESQL_LOG_DIR}/cta_test_postgres.log
    - runuser -u postgres -- createdb cta
    - runuser -u postgres -- createuser -E cta
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo 'postgresql:postgresql://cta@localhost/cta' > ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - |
      if [ "$VALGRIND_DB_UNIT_TESTS" = "true" ]; then
        valgrind /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
      else
        /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
      fi
    - runuser -u postgres -- pg_ctl stop -D ${POSTGRESQL_DATA_DIR}

unit-test-oracle:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $ORACLE_SUPPORT == "OFF"
      when: never
    - when: on_success
  image: $EL9_IMAGE
  variables:
    CTAREPODIR: /tmp/repo
    ORACLE_USERNAME: cta_dev04
    ORACLE_PASSWORD: $CI_ORACLE_UNIT_TEST_DB_PASSWORD
    # Note that this expects the full url; not a shortname relying on tnsnames
    ORACLE_DATABASE: $CI_ORACLE_UNIT_TEST_DB_DATABASE
  before_script:
    - *before-script-alma9
  script:
    - yum -y install cta-catalogueutils
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo oracle:${ORACLE_USERNAME}/${ORACLE_PASSWORD}@${ORACLE_DATABASE} > ${CTA_CATALOGUE_CONF}
    - echo yes | cta-catalogue-schema-drop ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
  # Adding this resource group ensures only a single instance of this job can run at any given time
  # This is necessary as the job uses a single account on a centralized database.
  resource_group: oracle-centralized-db-cta-dev04

test-cta-release:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - when: on_success
  image: $EL9_IMAGE
  variables:
    GIT_STRATEGY: none # We don't need the repo clone here
    CTAREPODIR: /tmp/repo
  before_script:
    # This needs to be done manually since v21 RPMs are not available in the OL9 oracle yum repos
    # This can be removed again once the upgrade to v23 is complete
    - yum -y install wget
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - wget https://download.oracle.com/otn_software/linux/instantclient/2112000/el9/oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-basic-21.12.0.0.0-1.el9.x86_64.rpm
    - yum install -y oracle-instantclient-devel-21.12.0.0.0-1.el9.x86_64.rpm
  script:
    - yum install -y createrepo epel-release almalinux-release-devel
    - mkdir -p ${CTAREPODIR}
    - cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}
    - echo -e "[cta-artifacts]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-artifacts.repo
    - yum install --nogpgcheck -y cta-release
    - cta-versionlock apply
    - yum install --nogpgcheck -y cta-frontend
    - yum install --nogpgcheck -y cta-taped
    - yum install --nogpgcheck -y cta-rmcd
    - yum install --nogpgcheck -y cta-smc
    - yum install --nogpgcheck -y eos-server
    - yum install --nogpgcheck -y eos-client
    # Check that everything was installed properly
    - cta-versionlock --json check-installed > checkpkg-output.json
  artifacts:
    when: always
    paths:
      - checkpkg-output.json
