.setup-cta-install: &setup-cta-install
  - mkdir -p ${CTAREPODIR}
  - cp -r build_rpm/RPM ${CTAREPODIR}
  - createrepo ${CTAREPODIR}
  - echo -e "[cta-local-testing]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-local-testing.repo
  - dnf -y --nogpgcheck install cta-release
  - cta-versionlock apply
  - |
    if [ "$USE_INTERNAL_REPOS" == "TRUE" ]; then
      cp -f continuousintegration/docker/${PLATFORM}/etc/yum.repos.d-internal/*.repo /etc/yum.repos.d/
    fi
  - dnf -y --nogpgcheck install cta-integrationtests cta-debuginfo cta-debugsource

test-cta-valgrind:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: manual
      allow_failure: true
  image: $IMAGE_TEST
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *setup-cta-install
  script:
    - /usr/bin/cta-unitPlusIntegrationTests.sh

integration-test-cta:
  # Sometimes flaky due to "resource unavailable" error
  retry: 1
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - when: on_success
  image: $IMAGE_TEST
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *setup-cta-install
  script:
    - /usr/bin/cta-integrationTests

unit-test-postgresql:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - when: on_success
  image: $IMAGE_TEST
  variables:
    CTAREPODIR: /tmp/repo
  before_script:
    - *setup-cta-install
  script:
    - dnf -y install cta-catalogueutils
    - POSTGRESQL_DATA_DIR=/usr/local/cta_test_pgsql_data
    - POSTGRESQL_LOG_DIR=/var/log/postgres
    - echo POSTGRESQL_DATA_DIR=${POSTGRESQL_DATA_DIR}
    - echo POSTGRESQL_LOG_DIR=${POSTGRESQL_LOG_DIR}
    - mkdir -p ${POSTGRESQL_DATA_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_DATA_DIR}
    - mkdir -p ${POSTGRESQL_LOG_DIR}
    - chown -R postgres:postgres ${POSTGRESQL_LOG_DIR}
    - mkdir /var/run/postgresql
    - chown -R postgres:postgres /var/run/postgresql/
    - runuser -u postgres -- initdb -D ${POSTGRESQL_DATA_DIR}
    - runuser -u postgres -- pg_ctl start -w -t 10 -D ${POSTGRESQL_DATA_DIR} -l ${POSTGRESQL_LOG_DIR}/cta_test_postgres.log
    - runuser -u postgres -- createdb cta
    - runuser -u postgres -- createuser -E cta
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo 'postgresql:postgresql://cta@localhost/cta' > ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - |
      if [ "$VALGRIND_DB_UNIT_TESTS" = "TRUE" ]; then
        valgrind /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
      else
        /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
      fi
    - runuser -u postgres -- pg_ctl stop -D ${POSTGRESQL_DATA_DIR}

unit-test-oracle:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $ORACLE_SUPPORT == "FALSE"
      when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - when: on_success
  image: $IMAGE_TEST
  variables:
    CTAREPODIR: /tmp/repo
    ORACLE_USERNAME: cta_dev04
    ORACLE_PASSWORD: $CI_ORACLE_UNIT_TEST_DB_PASSWORD
    # Note that this expects the full url; not a shortname relying on tnsnames
    ORACLE_DATABASE: $CI_ORACLE_UNIT_TEST_DB_DATABASE
  before_script:
    - *setup-cta-install
  script:
    - dnf -y install cta-catalogueutils
    - CTA_CATALOGUE_CONF=/etc/cta/cta-catalogue.conf
    - echo CTA_CATALOGUE_CONF=${CTA_CATALOGUE_CONF}
    - echo oracle:${ORACLE_USERNAME}/${ORACLE_PASSWORD}@${ORACLE_DATABASE} > ${CTA_CATALOGUE_CONF}
    - echo yes | cta-catalogue-schema-drop ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-catalogue-schema-create ${CTA_CATALOGUE_CONF}
    - /usr/bin/cta-rdbmsUnitTests ${CTA_CATALOGUE_CONF}
  # Adding this resource group ensures only a single instance of this job can run at any given time
  # This is necessary as the job uses a single account on a centralized database.
  resource_group: oracle-centralized-db-cta-dev04

unit-test-rest-api:
  stage: test
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $PIPELINE_TYPE != "COMMIT"
      when: never
    - when: on_success
  image: $IMAGE_TEST
  script:
    - cd api
    - pip install -r requirements/dev.txt
    - pytest test/

test-cta-release:
  stage: test
  needs:
    - job: build-cta-rpm
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - when: on_success
  image: $IMAGE_TEST
  variables:
    GIT_STRATEGY: none # We don't need the repo clone here
    CTAREPODIR: /tmp/repo
  script:
    - mkdir -p ${CTAREPODIR}
    - cp -r build_rpm/RPM ${CTAREPODIR}
    - createrepo ${CTAREPODIR}
    - echo -e "[cta-local-testing]\nname=CTA artifacts\nbaseurl=file://${CTAREPODIR}\ngpgcheck=0\nenabled=1\npriority=2" > /etc/yum.repos.d/cta-local-testing.repo
    - dnf install --nogpgcheck -y cta-release
    - cta-versionlock apply
    - dnf install --nogpgcheck -y cta-frontend
    - dnf install --nogpgcheck -y cta-taped
    - dnf install --nogpgcheck -y cta-rmcd
    - dnf install --nogpgcheck -y cta-smc
    - dnf install --nogpgcheck -y eos-server
    - dnf install --nogpgcheck -y eos-client
    # Check that everything was installed properly
    - cta-versionlock --json check-installed > checkpkg-output.json
  artifacts:
    when: always
    paths:
      - checkpkg-output.json
