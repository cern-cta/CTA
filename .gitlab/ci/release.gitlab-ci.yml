changelog-preview:
  stage: release
  needs: [] # Ensure this job can be triggered at the beginning if necessary
  rules:
    # - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    #   when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
      allow_failure: true
  image: $IMAGE_RELEASE
  variables:
    GIT_DEPTH: 0 # Ensure we don't do a shallow clone here as we might need to find the latest tag
    TO_COMMIT: "HEAD"
    FROM_REF: ""
    RELEASE_VERSION: ""
  before_script:
    - |
      if [ -z "${RELEASE_VERSION}" ]; then
        echo "Release version cannot be empty. Please set the RELEASE_VERSION variable manually in the CI."
        exit 1
      fi
  script:
    # If no from reference (commit hash or tag) is provided, grab the latest tag before the current commit
    - |
      if [ -z "${FROM_REF}" ]; then
        FROM_REF=$(git describe --tags --abbrev=0 ${TO_COMMIT})
      fi
    - python3 continuousintegration/release/preview_changelog.py --api-url ${CI_SERVER_URL}
                                                                 --project-id ${CI_PROJECT_ID}
                                                                 --api-token ${CI_API_TOKEN}
                                                                 --from ${FROM_REF}
                                                                 --to ${TO_COMMIT}
                                                                 --release-version ${RELEASE_VERSION}
                                                                 --markdown-output changelog_report.md
                                                                 --verbose
                                                                 --preview
    # Pass on variables so that the update_changelog job does not have to re-initialise them
    - echo -e "ENV_TO_COMMIT=${TO_COMMIT}\nENV_FROM_REF=${FROM_REF}\nENV_RELEASE_VERSION=${RELEASE_VERSION}" > vars.env
  artifacts:
    expire_in: 2 days
    paths:
      - changelog_report.md
    reports:
      dotenv: vars.env

changelog-update:
  stage: release
  needs:
    - changelog-preview
  rules:
    # - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    #   when: never
    - if: $PIPELINE_TYPE != "DEFAULT"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
      allow_failure: true
  image: $IMAGE_RELEASE
  variables:
    SOURCE_BRANCH: ""
  script:
    - TO_COMMIT=${ENV_TO_COMMIT}
    - FROM_REF=${ENV_FROM_REF}
    - RELEASE_VERSION=${ENV_RELEASE_VERSION}
    - |
      if [ -z "${SOURCE_BRANCH}" ]; then
        echo "No source branch provided. Using default branch: ${CI_DEFAULT_BRANCH}"
        SOURCE_BRANCH=${CI_DEFAULT_BRANCH}
      fi
    - python3 continuousintegration/release/update_changelog.py --api-url ${CI_SERVER_URL}
                                                                --project-id ${CI_PROJECT_ID}
                                                                --api-token ${CI_API_TOKEN}
                                                                --from ${FROM_REF}
                                                                --to ${TO_COMMIT}
                                                                --release-version ${RELEASE_VERSION}
                                                                --reviewer ${GITLAB_USER_ID}
                                                                --source-branch ${SOURCE_BRANCH}
                                                                --user-name "${GITLAB_USER_NAME}"
                                                                --user-email "${GITLAB_USER_EMAIL}"
                                                                --description-file changelog_report.md
                                                                --verbose

internal-release-cta:
  stage: release
  needs:
    - build-cta-rpm
  image: $IMAGE_RELEASE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - echo "Publishing to internal CTA repository"
    - ./continuousintegration/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                       --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                       --local-source-dir build_rpm/RPM/RPMS
                                                       --eos-target-dir /eos/user/c/ctareg/www/cta-repo
                                                       --hook /eos/user/c/ctareg/www/cta-repo/update_repos.sh

public-release-cta-unstable:
  stage: release
  needs:
    - internal-release-cta
  image: $IMAGE_RELEASE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - export CTA_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F '[v-]' '{print $2}')
    - echo "Publishing CTA version ${CTA_VERSION} to unstable CTA repository"
    - ./continuousintegration/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                       --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                       --eos-source-dir /eos/user/c/ctareg/www/cta-repo/RPMS
                                                       --eos-target-dir /eos/user/c/ctareg/www/public/cta-public-repo/unstable/cta-5/${PLATFORM}/cta
                                                       --hook /eos/user/c/ctareg/www/public/update_repos.sh
                                                       --cta-version ${CTA_VERSION}
    - REPO_URL="https://cta-public-repo.web.cern.ch/unstable/cta-5/el9/cta/x86_64"
    - ./continuousintegration/release/check_rpm_available.sh --repository-url "$REPO_URL" --package "cta-taped" --version "$CTA_VERSION"

public-release-cta-testing:
  stage: release
  needs:
    - internal-release-cta
  image: $IMAGE_RELEASE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - export CTA_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F '[v-]' '{print $2}')
    - echo "Publishing CTA version ${CTA_VERSION} to testing CTA repository"
    - ./continuousintegration/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                       --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                       --eos-source-dir /eos/user/c/ctareg/www/cta-repo/RPMS
                                                       --eos-target-dir /eos/user/c/ctareg/www/public/cta-public-repo/testing/cta-5/${PLATFORM}/cta
                                                       --hook /eos/user/c/ctareg/www/public/update_repos.sh
                                                       --cta-version ${CTA_VERSION}
    - REPO_URL="https://cta-public-repo.web.cern.ch/testing/cta-5/el9/cta/x86_64"
    - ./continuousintegration/release/check_rpm_available.sh --repository-url "$REPO_URL" --package "cta-taped" --version "$CTA_VERSION"

public-release-cta-stable:
  stage: release
  needs:
    - internal-release-cta
    # Anything in stable must also be in unstable and testing
    - public-release-cta-unstable
    - public-release-cta-testing
  image: $IMAGE_RELEASE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - export CTA_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F '[v-]' '{print $2}')
    - echo "Publishing CTA version ${CTA_VERSION} to public CTA repository"
    - ./continuousintegration/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                       --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                       --eos-source-dir /eos/user/c/ctareg/www/cta-repo/RPMS
                                                       --eos-target-dir /eos/user/c/ctareg/www/public/cta-public-repo/stable/cta-5/${PLATFORM}/cta
                                                       --hook /eos/user/c/ctareg/www/public/update_repos.sh
                                                       --cta-version ${CTA_VERSION}
    - REPO_URL="https://cta-public-repo.web.cern.ch/stable/cta-5/el9/cta/x86_64"
    - ./continuousintegration/release/check_rpm_available.sh --repository-url "$REPO_URL" --package "cta-taped" --version "$CTA_VERSION"

