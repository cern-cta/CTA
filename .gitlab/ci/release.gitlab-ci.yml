changelog-preview:
  stage: release:changelog
  needs: [] # Ensure this job can be triggered at the beginning if necessary
  rules:
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - when: never
  image: $PYTHON3_IMAGE
  variables:
    TO_COMMIT: "HEAD"
    FROM_REF: ""
    RELEASE_VERSION: ""
  before_script:
    - |
      if [ -z "${RELEASE_VERSION}" ]; then
        echo "Release version cannot be empty. Please set the RELEASE_VERSION variable manually in the CI."
        exit 1
      fi
    - pip install requests
  script:
    # If no from reference (commit hash or tag) is provided, grab the latest tag before the current commit
    - |
      if [ -z "${FROM_REF}" ]; then
        apk add git
        FROM_REF=$(git describe --tags --abbrev=0 ${TO_COMMIT})
      fi
    - python3 continuousintegration/ci_helpers/release/check_commits.py --api-url ${CI_SERVER_URL}
                                                                        --project-id ${CI_PROJECT_ID}
                                                                        --api-token ${CI_API_TOKEN}
                                                                        --from ${FROM_REF}
                                                                        --to ${TO_COMMIT}
                                                                        --release-version ${RELEASE_VERSION}
                                                                        --markdown-output changelog_report.md
                                                                        --verbose
                                                                        --preview
    # Pass on variables so that the update_changelog job does not have to re-initialise them
    - echo -e "ENV_TO_COMMIT=${TO_COMMIT}\nENV_FROM_REF=${FROM_REF}\nENV_RELEASE_VERSION=${RELEASE_VERSION}" > vars.env
  artifacts:
    expire_in: 2 days
    paths:
      - changelog_report.md
    reports:
      dotenv: vars.env

changelog-update:
  stage: release:changelog
  needs:
    - changelog-preview
  rules:
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - when: never
  image: $PYTHON3_IMAGE
  variables:
    SOURCE_BRANCH: ""
  before_script:
    - pip install requests
  script:
    - TO_COMMIT=${ENV_TO_COMMIT}
    - FROM_REF=${ENV_FROM_REF}
    - RELEASE_VERSION=${ENV_RELEASE_VERSION}
    - |
      if [ -z "${SOURCE_BRANCH}" ]; then
        echo "No source branch provided. Using default branch: ${CI_DEFAULT_BRANCH}"
        SOURCE_BRANCH=${CI_DEFAULT_BRANCH}
      fi
    - python3 continuousintegration/ci_helpers/release/update_changelog.py --api-url ${CI_SERVER_URL}
                                                                           --project-id ${CI_PROJECT_ID}
                                                                           --api-token ${CI_API_TOKEN}
                                                                           --from ${FROM_REF}
                                                                           --to ${TO_COMMIT}
                                                                           --release-version ${RELEASE_VERSION}
                                                                           --reviewer ${GITLAB_USER_ID}
                                                                           --source-branch ${SOURCE_BRANCH}
                                                                           --user-name "${GITLAB_USER_NAME}"
                                                                           --user-email "${GITLAB_USER_EMAIL}"
                                                                           --description-file changelog_report.md
                                                                           --verbose

release-cta:
  stage: release:internal
  needs:
    - build-cta-tagged-rpm
  image: $EL9_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - |
      if [ -z "${CI_COMMIT_TAG}" ]; then
        echo "This is not a tagged commit, exiting";
        exit 0;
      fi
    - echo "Publishing to internal CTA repository"
    - ./continuousintegration/ci_helpers/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                                  --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                                  --source-dir build_rpm/RPM/RPMS
                                                                  --eos-path /eos/user/c/ctareg/www/cta-repo
                                                                  --hook /eos/user/c/ctareg/www/cta-repo/update_repos.sh

release-cta-testing:
  stage: release:external
  needs:
    - build-cta-tagged-rpm
  image: $EL9_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - echo "Publishing to testing CTA repository"
    - ./continuousintegration/ci_helpers/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                                  --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                                  --source-dir build_rpm/RPM/RPMS/x86_64
                                                                  --eos-path /eos/user/c/ctareg/www/public/cta-public-repo/testing/cta-5/el9/cta
                                                                  --hook /eos/user/c/ctareg/www/public/update_repos.sh

release-cta-stable:
  stage: release:external
  needs:
    - build-cta-tagged-rpm
  image: $EL9_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  script:
    - echo "Publishing to public CTA repository"
    - ./continuousintegration/ci_helpers/release/upload_to_eos.sh --eos-username ${DOCKER_LOGIN_USERNAME}
                                                                  --eos-password ${DOCKER_LOGIN_PASSWORD}
                                                                  --source-dir build_rpm/RPM/RPMS/x86_64
                                                                  --eos-path /eos/user/c/ctareg/www/public/cta-public-repo/stable/cta-5/el9/cta
                                                                  --hook /eos/user/c/ctareg/www/public/update_repos.sh

release-cta-gitlab-prepare:
  stage: release:external
  needs:
    - release-cta-stable
  rules:
    - if: $CI_COMMIT_TAG
  image: alpine:latest
  before_script:
    - apk add git curl jq
  script:
    # We generate the release notes for everything between the previous tag and the tag that triggered this pipeline
    - LATEST_TAG=${CI_COMMIT_TAG}
    - PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${LATEST_TAG}^)
    # Generate the release notes
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=${CI_COMMIT_TAG}&from=${PREVIOUS_TAG}&to=${LATEST_TAG}" | jq -r .notes > release_notes.md'
  artifacts:
    paths:
    - release_notes.md

release-cta-gitlab:
  stage: release:external
  needs:
    - release-cta-gitlab-prepare
  rules:
    - if: $CI_COMMIT_TAG
  image: $GITLAB_RELEASE_CLI_IMAGE
  script:
    - echo "Creating release on GitLab"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: release_notes.md
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'
