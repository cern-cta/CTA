cppcheck:
  stage: analysis
  image:
    name: $CPPCHECK_IMAGE
    entrypoint: ["/usr/bin/env"]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always
  dependencies: [] # Ensure no artifacts are downloaded
  script:
    - cppcheck --xml
               --force
               --enable=warning,performance
               --inline-suppr
               --check-level=exhaustive
               --suppressions-list=.cppcheck-suppressions.txt
               . 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=cppcheck.json
    - |
      if cat cppcheck_out.xml | grep -q "<error\s"; then
        echo "cppcheck detected errors:  "
        cat cppcheck_out.xml
        cat cppcheck.json
        cat cppcheck.json | jq
        exit 1
      fi
    - echo "Done. No errors detected by cppcheck"
  artifacts:
    when: on_failure
    expire_in: 2 days
    reports:
      codequality: cppcheck.json
    paths:
      - cppcheck_out.xml

clang-format-report:
  stage: analysis
  dependencies: [] # Ensure no artifacts are downloaded
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always
  image: $EL9_IMAGE
  script:
    - yum install -y git-clang-format
    - TARGET_BRANCH=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_DEFAULT_BRANCH}
    - git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
    - echo "Running clang-format for changes compared to branch $TARGET_BRANCH"
    - git-clang-format $TARGET_BRANCH HEAD --diff > clang-format.output
  artifacts:
    when: always
    paths:
      - clang-format.output

clang-format-apply:
  stage: analysis
  needs:
    - clang-format-report
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: never
    - when: manual
  image: $EL9_IMAGE
  variables:
    REPO_REMOTE: https://gitlab-ci-token:${CI_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    CLANG_FORMAT_REPORT: clang-format.output
  before_script:
    - yum install -y git git-clang-format patch
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name $GITLAB_USER_LOGIN
  script:
    - |
      if [ $(wc -l < "$CLANG_FORMAT_REPORT") -le 1 ]; then
        cat $CLANG_FORMAT_REPORT;
        exit 0;
      fi
    - cat $CLANG_FORMAT_REPORT | patch -p1
    - git commit -am "Applied clang format to changed lines"
    - git push $REPO_REMOTE HEAD:$CI_COMMIT_REF_NAME

catalogue-schema-version-check:
  stage: analysis
  dependencies: [] # Ensure no artifacts are downloaded
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $SYSTEMTESTS_ONLY == "TRUE"
      when: never
    # For pivot CTA releases: vX.Y.0
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-p -t"
    # For non-pivot CTA releases
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-n -t"
    # Any run on main
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
      allow_failure: false
      variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: "-t"
    # Any merge requests into main
    #- if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    #  when: on_success
    #  allow_failure: false
    #  variables:
    #    CATALOGUE_SCHEMA_CHECK_PARAMS: "-t"
    # For all other scenarios, manual run only
    - when: on_success
    - allow_failure: false
    - variables:
        CATALOGUE_SCHEMA_CHECK_PARAMS: ""
  image: $EL9_IMAGE
  script:
    - yum install -y git
    - ./continuousintegration/ci_helpers/catalogue_schema_version_check.sh ${CATALOGUE_SCHEMA_CHECK_PARAMS} .
