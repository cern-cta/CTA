# All of the below tests use only the docker image generated in the build:image stage
# These are also the only tests executed on our personal cirunners instead of the GitLab runners

setup-k8s-test-variables:
  needs:
    - job: prepare
      optional: true
    - job: modify-catalogue-version
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE == "CTAGENERIC_IMAGE"
      when: never
    - when: on_success
  script:
    # Which scheduler to use
    - |
      if [ $SCHED_TYPE == "objectstore" ]; then
        SCHEDULER_CONFIG=/opt/kubernetes/CTA/scheduler/ci-ceph-values.yaml
      else
        SCHEDULER_CONFIG=presets/dev-scheduler-postgres-values.yaml
      fi
    # Which catalogue to use
    - |
      if [ $ORACLE_SUPPORT == "ON" ]; then
        CATALOGUE_CONFIG=/opt/kubernetes/CTA/catalogue/ci-oracle-values.yaml
      else
        CATALOGUE_CONFIG=presets/dev-catalogue-postgres-values.yaml
      fi
    # Which image tag to use
    - |
      if [ $SYSTEMTESTS_ONLY == "TRUE" ]; then
        if [ -z "$SYSTEMTESTS_IMAGETAG" ]; then
          IMAGE_TAG=$(./continuousintegration/utils/get_latest_image_tag_on_branch.sh --branch $CI_DEFAULT_BRANCH)
        else
          IMAGE_TAG=$SYSTEMTESTS_IMAGETAG
        fi
      else
        IMAGE_TAG=$CTA_BUILD_ID
      fi
    # If we are testing from a CTA tag, get the Catalogue version for that tag
    # TODO: EXTRA_SPAWN_ARGS might be overriden by other jobs; change this name or the way this is done
    - |
      if [ -n "${CUSTOM_CTA_TAG}" ]; then
        git fetch --tags --force
        git checkout tags/$CUSTOM_CTA_TAG -- catalogue/CTARefCatalogueSchemaVersion.cmake
        CATALOGUE_VERSION=$(cat catalogue/CTARefCatalogueSchemaVersion.cmake | grep -v '#' | grep 'CTA_CATALOGUE_REF_SCHEMA_VERSION_CURR' | awk '{print $2}' | awk -F ')' '{ print $1}')
        EXTRA_SPAWN_ARGS="${EXTRA_SPAWN_ARGS} --catalogue-version ${CATALOGUE_VERSION}.0"
      fi
    # Export all variables here so that it is clear which ones are available
    - export NAMESPACE SCHEDULER_CONFIG CATALOGUE_CONFIG IMAGE_TAG EXTRA_SPAWN_ARGS
    reports:
      dotenv: vars.env


.kubernetes-test:
  needs:
    - job: build-ctageneric-from-artifacts
      optional: true # Otherwise the SYSTEMTESTS_ONLY flag won't work
    - job: build-ctageneric-from-repos
      optional: true
    - job: setup-k8s-test-variables
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE == "CTAGENERIC_IMAGE"
      when: never
    - when: on_success
  variables:
    TEST_SCRIPT:
    # Passed to the run_systemtest.sh script verbatim
    EXTRA_RUN_ARGS: ""
    # Passed to the create_instance.sh script verbatim
    EXTRA_SPAWN_ARGS: ""
    # Passed to the test script verbatim
    EXTRA_TEST_ARGS: ""
  before_script:
    - bash ./continuousintegration/utils/install_helm.sh
  script:
    # Keep the namespace name under 64 characters;
    # Otherwise the eos mgm fqdn becomes too long and things start failing
    - NAMESPACE="${CI_JOB_NAME_SLUG:0:18}-${CI_PIPELINE_ID}"
    # Set up the additional arguments array to pass to the run_systemtest.sh script
    - extra_args=($EXTRA_ARGS)
    - if [[ -n "${EXTRA_SPAWN_ARGS}" ]]; then extra_args+=(--spawn-options "${EXTRA_SPAWN_ARGS}"); fi
    - if [[ -n "${EXTRA_TEST_ARGS}" ]];  then extra_args+=(--test-options "${EXTRA_TEST_ARGS}"); fi
    # The inner .el9 appending is a temporary fix for choosing which docker image to grab
    - |
      if [[ -n "${CUSTOM_EOS_TAG}" ]]; then
        if [[ $PIPELINE_TYPE == "EOS_REGR_AGAINST_CTA_MAIN" ]] || [[ $PIPELINE_TYPE == "EOS_REGR_AGAINST_CTA_TAG" ]]; then
          CUSTOM_EOS_TAG="${CUSTOM_EOS_TAG}.el9"
        fi
        extra_args+=(--eos-image-tag "${CUSTOM_EOS_TAG}");
      fi
    # Run test
    - cd continuousintegration/orchestration/
    - ./run_systemtest.sh --namespace ${NAMESPACE}
                          --cta-image-tag ${IMAGE_TAG}
                          --cleanup-namespaces
                          --keep-namespace
                          --catalogue-config ${CATALOGUE_CONFIG}
                          --scheduler-config ${SCHEDULER_CONFIG}
                          --test-script ${TEST_SCRIPT}
                          "${extra_args[@]}"
                          ${EXTRA_RUN_ARGS}
  after_script:
    # Repeat the namespace declaration here as the after_script does not have access to previously exported variables
    - NAMESPACE="${CI_JOB_NAME_SLUG:0:18}-${CI_PIPELINE_ID}"
    # This also gets called if the job is cancelled to ensure we properly clean up after ourselves
    - cd continuousintegration/orchestration/
    - ./delete_instance.sh --namespace ${NAMESPACE}
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - pod_logs
  tags: # Used to indicate that these jobs should run on our own cirunner machines
    - kubernetes
    - mhvtl

# Tests

test-client:
  stage: system-test
  extends:
    - .kubernetes-test
  variables:
    TEST_SCRIPT: "tests/test_client.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"

test-client-gfal2:
  stage: system-test
  extends:
    - .kubernetes-test
  variables:
    TEST_SCRIPT: "tests/test_client_gfal2.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"

test-repack:
  stage: system-test
  extends:
    - .kubernetes-test
  variables:
    TEST_SCRIPT: "tests/test_repack.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"

test-cta-admin:
  stage: system-test
  extends:
    - .kubernetes-test
  rules:
    # Skip this test for EOS regressions as it does not test anything new
    # with respect to the other tests we run.
    - if:  $PIPELINE_TYPE == "EOS_REGR_AGAINST_CTA_TAG"
      when: never
    - !reference [.kubernetes-test, rules]
  variables:
    TEST_SCRIPT: "tests/test_cta_admin.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"

# Manually triggered

.manual-rules:
  rules:
    # For pivot CTA releases: vX.Y.0
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^.*\.0\.[0-9]+-[^-]*$/
      when: on_success
    # For non-pivot CTA releases
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^.*\.0\.[0-9]+-[^-]*$/
      when: manual
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

test-liquibase-update:
  stage: system-test
  extends:
    - .kubernetes-test
  rules:
    - !reference [.manual-rules, rules]
  variables:
    TEST_SCRIPT: "tests/test_liquibase_update.sh"
    EXTRA_ARGS: "--test-timeout 2400"
  before_script:
    - !reference [.kubernetes-test, before_script]
    # Yes this is ugly, hopefully we can improve this if we have a project.json where we specify these kinds of values
    - |
      CURRENT_VERSION=$(grep -E '^[^#]*set\(CTA_CATALOGUE_REF_SCHEMA_VERSION_CURR' catalogue/CTARefCatalogueSchemaVersion.cmake | grep -oP 'CTA_CATALOGUE_REF_SCHEMA_VERSION_CURR \K[0-9]+')
      PREVIOUS_VERSION=$(grep -E '^[^#]*set\(CTA_CATALOGUE_REF_SCHEMA_VERSION_PREV' catalogue/CTARefCatalogueSchemaVersion.cmake | grep -oP 'CTA_CATALOGUE_REF_SCHEMA_VERSION_PREV \K[0-9]+')
      if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
        echo "We are currently in a non-catalogue release. No update to test."
        exit 0
      fi
    - PREV_CATALOGUE_VERSION=$(./continuousintegration/utils/get_prev_catalogue_schema_version.sh)
    # Note that we need to do this here as the image-tag is not available yet in the variables part
    - export EXTRA_SPAWN_ARGS="--catalogue-version ${PREV_CATALOGUE_VERSION}"

test-external-tape-formats:
  stage: system-test
  extends:
    - .kubernetes-test
  rules:
    - !reference [.manual-rules, rules]
  variables:
    TEST_SCRIPT: "tests/test_external_tape_formats.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"

test-regression-dCache:
  stage: system-test
  extends:
    - .kubernetes-test
  rules:
    - !reference [.manual-rules, rules]
  variables:
    TEST_SCRIPT: "tests/test_regression_dCache.sh"
    EXTRA_RUN_ARGS: "--test-timeout 2400"
  tags:
    - kubernetes
    - xlarge

stress-test:
  # At least test-client should have passed before it makes sense to run a stress test
  needs:
    - job: test-client
    - job: setup-k8s-test-variables
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $PIPELINE_TYPE == "CTAGENERIC_IMAGE"
      when: never
    - when: manual
      allow_failure: true # Otherwise this blocks the pipeline
  before_script:
    - bash ./continuousintegration/utils/install_helm.sh
  script:
    # Repeat the namespace declaration here as the after_script does not have access to previously exported variables
    - NAMESPACE="stress-test-${CI_PIPELINE_ID}"
    # Set up the additional arguments array to pass to the run_systemtest.sh script
    - if [[ -n "${EXTRA_SPAWN_ARGS}" ]]; then extra_args+=(--spawn-options "${EXTRA_SPAWN_ARGS}"); fi
    # Set up stress test
    - cd continuousintegration/orchestration/
    # We don't clean up old namespace so this will fail (deliberately) when another test is running there
    # This is because we check for the libraries in use before we start
    - ./run_systemtest.sh --namespace ${NAMESPACE}
                          --keep-namespace
                          --cta-image-tag ${IMAGE_TAG}
                          --catalogue-config ${CATALOGUE_CONFIG}
                          --scheduler-config ${SCHEDULER_CONFIG}
                          --test-script tests/prepare_tests.sh
                          "${extra_args[@]}"
    # Set up monitoring
    - git clone https://gitlab.cern.ch/cta/sandbox/ci_monitoring.git
    - helm install --namespace ${NAMESPACE} ci-monitoring ci_monitoring/ci-monitoring --wait --timeout 5m
    # Run the actual stress test
    - ./tests/stress_test.sh -n ${NAMESPACE}
  after_script:
    # Repeat the namespace declaration here as the after_script does not have access to previously exported variables
    - NAMESPACE="stress-test-${CI_PIPELINE_ID}"
    # This also gets called if the job is cancelled to ensure we properly clean up after ourselves
    - cd continuousintegration/orchestration/
    - ./delete_instance.sh --namespace ${NAMESPACE} --discard-logs
  tags:
    - stress
