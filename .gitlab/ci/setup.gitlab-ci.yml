modify-project-json:
  stage: setup
  rules:
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_MAIN"
    # Note that for regressions against a tag, only the EOS image version used in the Helm chart will be updated
    # As the tagged Dockerfile will use the versionlock generated by cta-release
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_TAG"
    - if: $PIPELINE_TYPE == "CTAGENERIC_IMAGE"
  script:
    - project_json_file="project.json"
    # Replace EOS versionlock and EOS image tag
    - trimmed_eos_version=$(echo "$CUSTOM_EOS_VERSION" | xargs)
    # Note that we assume the EOS image tag has the form <eos_image_version>.<platform>
    - |
      if [ -n "$trimmed_eos_version" ]; then
        eos_image_tag="${trimmed_eos_version}.${PLATFORM}"
        echo "Updating EOS version to: $trimmed_eos_version. Update EOS image tag to $eos_image_tag"
        tmp_file=$(mktemp)
        jq --arg new_eos_version "$trimmed_eos_version" \
          --arg new_eos_image_tag "$eos_image_tag" \
          --arg platform "$PLATFORM" \
          '
          .platforms[$platform].versionlock.eos = $new_eos_version
          | .dev.defaultEosImageTag = $new_eos_image_tag
          ' \
          "$project_json_file" > "$tmp_file" && mv "$tmp_file" "$project_json_file"
      else
        echo "CUSTOM_EOS_VERSION is not provided. Skipping EOS version replacement."
      fi
    # Replace XRootD
    - trimmed_xrootd_version=$(echo "$CUSTOM_XROOTD_VERSION" | xargs)
    - |
      if [ -n "$trimmed_xrootd_version" ]; then
        echo "Updating XRootD version to: $trimmed_xrootd_version."
        tmp_file=$(mktemp)
        jq --arg new_xrd_version "$trimmed_xrootd_version" \
          --arg platform "$PLATFORM" \
          '.platforms[$platform].versionlock.xrootd = $new_xrd_version' \
          "$project_json_file" > "$tmp_file" && mv "$tmp_file" "$project_json_file"
      else
        echo "CUSTOM_XROOTD_VERSION is not provided. Skipping XRootD version replacement."
      fi
    # Done
    - echo "File content after replacement"
    - cat "${project_json_file}" | jq
  artifacts:
    paths:
      - project.json
  when: on_success

