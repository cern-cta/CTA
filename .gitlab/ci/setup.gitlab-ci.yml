modify-project-json:
  stage: setup
  rules:
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_MAIN"
    # Note that for regressions against an existing CTA version, only the EOS image version used in the Helm chart will be updated
    # As the tagged Dockerfile will use the versionlock generated by cta-release
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_VERSION"
  script:
    - project_json_file="project.json"
    # Replace XRootD
    - trimmed_xrootd_version=$(echo "$CUSTOM_XROOTD_VERSION" | xargs)
    - |
      if [ -n "$trimmed_xrootd_version" ]; then
        echo "Updating XRootD version to: $trimmed_xrootd_version."
        tmp_file=$(mktemp)
        jq --arg new_xrd_version "$trimmed_xrootd_version" \
          --arg platform "$PLATFORM" \
          '.platforms[$platform].versionlock["group-xrootd"] = $new_xrd_version' \
          "$project_json_file" > "$tmp_file" && mv "$tmp_file" "$project_json_file"
      else
        echo "CUSTOM_XROOTD_VERSION is not provided. Skipping XRootD version replacement."
      fi
    # Replace EOS versionlock
    - trimmed_eos_version=$(echo "$CUSTOM_EOS_VERSION" | xargs)
    - |
      if [ -n "$trimmed_eos_version" ]; then
        eos_image_tag="${trimmed_eos_version}.${PLATFORM}"
        echo "Updating EOS version to: $trimmed_eos_version."
        tmp_file=$(mktemp)
        jq --arg new_eos_version "$trimmed_eos_version" \
          --arg platform "$PLATFORM" \
          '.platforms[$platform].versionlock["group-eos"] = $new_eos_version' \
          "$project_json_file" > "$tmp_file" && mv "$tmp_file" "$project_json_file"
      else
        echo "CUSTOM_EOS_VERSION is not provided. Skipping EOS version replacement."
      fi
    # Replace EOS image tag
    - trimmed_eos_image_tag=$(echo "$CUSTOM_EOS_IMAGE_TAG" | xargs)
    # If not explicitly provided, extract it from the EOS version by removing the packaging number and appending the platform
    - |
      if [ -z "$trimmed_eos_image_tag" ] && [ -n "$trimmed_eos_version" ]; then
        base_eos_version="${trimmed_eos_version%-*}"
        trimmed_eos_image_tag="${base_eos_version}.${PLATFORM}"
      fi
    - |
      if [ -n "$trimmed_eos_image_tag" ]; then
        echo "Updating EOS image tag to: $trimmed_eos_image_tag."
        tmp_file=$(mktemp)
        jq --arg new_eos_image_tag "$trimmed_eos_image_tag" \
          '.dev.eosImageTag = $new_eos_image_tag' \
          "$project_json_file" > "$tmp_file" && mv "$tmp_file" "$project_json_file"
      else
        echo "Neither CUSTOM_EOS_VERSION nor CUSTOM_EOS_IMAGE_TAG was provided. Skipping EOS image tag replacement."
      fi
    # Done
    - echo "File content after replacement"
    - cat "${project_json_file}" | jq
  artifacts:
    paths:
      - project.json
  when: on_success

