modify-project-json:
  stage: setup
  rules:
    - if: $PIPELINE_TYPE == "EOS_REGR_AGAINST_CTA_MAIN"
    # Note that for regressions against a tag, only the EOS image version used in the Helm chart will be updated
    - if: $PIPELINE_TYPE == "EOS_REGR_AGAINST_CTA_TAG"
    - if: $PIPELINE_TYPE == "CTAGENERIC_IMAGE"
  script:
    - project_json_file="project.json"
    # Replace EOS
    - trimmed_eos_version=$(echo "$CUSTOM_EOS_TAG" | xargs)
    - |
      if [ -n "$trimmed_eos_version" ]; then
        echo "Extracting the currently version locked EOS version from the file..."
        current_eos_version=$(jq '.platforms.${PLATFORM}.versionlock.eos' $project_json_file)
        echo "Current EOS version found: $current_eos_version"
        if [ -n "$current_eos_version" ]; then
          echo "Replacing $current_eos_version with $CUSTOM_EOS_TAG in the file..."
          sed -i "s/$current_eos_version/$CUSTOM_EOS_TAG/g" "${project_json_file}"
        else
          echo "EOS version not found in the file."
          exit 1
        fi
      else
        echo "CUSTOM_EOS_TAG is not provided. Skipping EOS version replacement."
      fi
    # Replace XRootD
    - sed -i "s/$current_eos_version/$CUSTOM_EOS_TAG/g" ${project_json_file}
    - trimmed_xrootd_version=$(echo "$CUSTOM_XRD_TAG" | xargs)
    - |
      if [ -n "$trimmed_xrootd_version" ]; then
        echo "Extracting the currently version locked XRootD version from the file..."
        current_xrootd_version=$(jq '.platforms.${PLATFORM}.versionlock.xrootd' $project_json_file)
        echo "Current XRootD version found: $current_xrootd_version"

        if [ -n "$current_xrootd_version" ]; then
          echo "Replacing $current_xrootd_version with $CUSTOM_XRD_TAG in the file..."
          sed -i "s/$current_xrootd_version/$CUSTOM_XRD_TAG/g" "${project_json_file}"
        else
          echo "XRootD version not found in the file."
          exit 1
        fi
      else
        echo "CUSTOM_XRD_TAG is not provided. Skipping XRootD version replacement."
      fi
    # Done
    - echo "File content after replacement"
    - cat "${project_json_file}"
  artifacts:
    paths:
      - project.json
  when: on_success

