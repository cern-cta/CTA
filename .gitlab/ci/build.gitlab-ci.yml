.build-cta:
  retry: 0
  rules:
    - if: $PIPELINE_TYPE == "SYSTEM_TEST_ONLY"
      when: never
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_VERSION"
      when: never
    - if: $PIPELINE_TYPE == "IMAGE_FROM_CTA_VERSION"
      when: never
    # These rules serve to prevent the rest of the pipeline from triggering when only trivial files such as the CHANGELOG have been modified
    # GitLab only allows a whitelist and not a blacklist, so we have to list all file changes that should trigger the build job
    - changes:
        - .dockerignore
        - .gitlab-ci.yml
        - CMakeLists.txt
        - cta.spec.in
        - project.json
        - version.hpp.in
        # To be safe, all files in all sub-directories
        # Once we have a src/ directory, we can be a bit more specific without having to specify a long list here
        - '*/**/*'
      when: on_success
    # If only "trivial" changes were done and we are in a MR, set this job to manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true # Ensures the pipeline counts as "passed" instead of "blocked"
    # Ensure we cover any other cases that might trigger this
    - when: on_success
  image: $IMAGE_BUILD
  artifacts:
    expire_in: 30 days
    paths:
      - ${BUILD_PATH}

# Generic build jobs for rpms and srpms
build-cta-srpm:
  stage: build
  extends:
    - .build-cta
  needs:
    - job: validate-project-json
    - job: modify-project-json
      optional: true
  rules:
    - !reference [.build-cta, rules]
    - when: on_success
  variables:
    BUILD_PATH: "build_srpm/RPM/SRPMS/"
  script:
    - ./continuousintegration/build/build_srpm.sh --build-dir build_srpm
                                                  --build-generator "${BUILD_GENERATOR}"
                                                  --create-build-dir
                                                  --cta-version ${BUILD_CTA_VERSION}
                                                  --vcs-version ${CTA_BUILD_ID}
                                                  --scheduler-type ${SCHEDULER_TYPE}
                                                  --oracle-support ${ORACLE_SUPPORT}
                                                  --cmake-build-type "${CMAKE_BUILD_TYPE}"
                                                  --jobs $(nproc --ignore=1)

build-cta-rpm:
  stage: build
  extends:
    - .build-cta
  needs:
    - job: validate-pipeline-variables
    - job: build-cta-srpm
    - job: modify-project-json
      optional: true
      artifacts: true
  rules:
    - !reference [.build-cta, rules]
    - when: on_success
  variables:
    BUILD_PATH: "build_rpm/RPM/RPMS"
    XRD_SSI_PATH: "xrootd-ssi-protobuf-interface"
  script:
    - |
      if [ -z "${CI_COMMIT_TAG}" ]; then
        export VCS_VERSION=$CTA_BUILD_ID
        export CTA_VERSION=$BUILD_CTA_VERSION
      else
        export CTA_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F '[v-]' '{print $2}')
        export VCS_VERSION=$(echo ${CI_COMMIT_TAG} | awk -F '-' '{if(NF>1) print $2; else print 0}')
        echo "Building package for tag ${CI_COMMIT_TAG}. CTA_VERSION=${CTA_VERSION} - CTA_RELEASE=${VCS_VERSION}"
      fi
    - export XRD_SSI_VERSION=$(git --git-dir=$XRD_SSI_PATH/.git --work-tree=$XRD_SSI_PATH describe --tags --abbrev=0)
    - |
      if [ -z "$XRD_SSI_VERSION" ]; then
        echo "Error: failed to find tag for submodule $XRD_SSI_PATH"
        exit 1
      fi
    - BUILD_OPTIONS=""
    # For now we automatically skip the unit tests for the postgres scheduler.
    - |
      if [ "${SKIP_UNIT_TESTS}" == "TRUE" ]; then
        BUILD_OPTIONS+=" --skip-unit-tests"
      fi
    - |
      if [ "$USE_INTERNAL_REPOS" == "TRUE" ]; then
        BUILD_OPTIONS+=" --use-internal-repos"
      fi
    - ./continuousintegration/build/build_rpm.sh --build-dir build_rpm
                                                 --build-generator "${BUILD_GENERATOR}"
                                                 --create-build-dir
                                                 --srpm-dir build_srpm/RPM/SRPMS
                                                 --cta-version ${CTA_VERSION}
                                                 --vcs-version ${VCS_VERSION}
                                                 --xrootd-ssi-version ${XRD_SSI_VERSION}
                                                 --scheduler-type ${SCHEDULER_TYPE}
                                                 --oracle-support ${ORACLE_SUPPORT}
                                                 --cmake-build-type "${CMAKE_BUILD_TYPE}"
                                                 --jobs $(nproc --ignore=1)
                                                 --install-srpms
                                                 --platform ${PLATFORM}
                                                 ${BUILD_OPTIONS}
  artifacts:
    paths:
      - ./build_rpm/RPM/RPMS
      - ./build_rpm/compile_commands.json

check-compile-commands:
  retry: 0
  stage: build
  extends:
    - .build-cta
  rules:
    - !reference [.build-cta, rules]
    - if: $PIPELINE_TYPE == "REGR_AGAINST_CTA_MAIN"
      when: never
    - when: on_success
  needs:
    - job: build-cta-rpm
      artifacts: true
  allow_failure: true
  script:
    # Check if we are rebased on main, if not, the job will succeed.
    - git fetch --unshallow --no-tags origin main:main
    - test $(git rev-list --count origin/main --not @) == 0 || (echo "We are behind main. Exiting."; exit 0)
    # Remove unnecesary flag that varies from commit to commit.
    - sed -Ei 's/(^| )-DVERSION_API=(\\?"[^"]*"|[^ ]+)( |$)/\1\3/g' ./build_rpm/compile_commands.json
    - sed -i 's/ -DCTA_PGSCHED //g' ./build_rpm/compile_commands.json
    - diff ./compile_commands.json ./build_rpm/compile_commands.json
  artifacts:
    when: on_failure
    paths:
      - ./build_rpm/compile_commands.json

update-compile-commands:
  stage: build
  extends:
    - .build-cta
  rules:
    - when: manual
  needs:
    - job: check-compile-commands
      optional: false
      artifacts: true
  variables:
    REPO_REMOTE: https://gitlab-ci-token:${CI_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
  before_script:
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name $GITLAB_USER_LOGIN
  script:
    - cp ./build_rpm/compile_commands.json ./compile_commands.json
    - git add ./compile_commands.json
    - git commit -m "Update compilation database"
    - git push $REPO_REMOTE HEAD:$CI_COMMIT_REF_NAME

# Documentation export
export-docs:
  needs: []
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - echo "Exporting man pages (Markdown)"
    - mkdir docs
    - /usr/bin/find . -path ./docs -prune -o -name '*cta.md' -exec cp {} docs/ \;
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - docs/
