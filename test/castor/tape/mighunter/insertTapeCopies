#!/usr/bin/perl -w

use DBI;
use POSIX;
use strict;

# castor/cern.ch/dev/m/murrayc3/simpleTest_Sat_Aug_7.txt
my $DEV_FILE_NS_FILEID=5000043410;

# Returns the value of the specified ORASTAGERCONFIG parameter.
#
# This subroutine prints an error message and aborts the entire tes script if
# it fails to get the value of the specified parameter.
#
# @param  paramName The name of the parameter whose value is to be retrieved.
# @return           The value of the parameter.
sub getOrastagerconfigParam {
  my $paramName = $_[0];

  open(CONFIG, "</etc/castor/ORASTAGERCONFIG")
    or die "Failed to open /etc/castor/ORASTAGERCONFIG: $!";

  while(<CONFIG>) {
    chomp;
    if(m/^DbCnvSvc\s+$paramName\s+(\w+)/) {
      return $1;
    }
  }

  close CONFIG;

  print("ABORT: Failed to get ORASTAGERCONFIG parameter: paramName=$paramName\n");
  exit(-1);
}


# Connects to the stager database and returns the database handle.
#
# This subroutine prints an error message and aborts the entire test program if
# it fails to get the database handle.
#
# This subroutine does not set any of the attributes of the
# database-connection.
sub connectToStagerDb {
  my $user   = &getOrastagerconfigParam("user");
  my $passwd = &getOrastagerconfigParam("passwd");
  my $dbName = &getOrastagerconfigParam("dbName");

  my $dbh = DBI->connect("dbi:Oracle:$dbName", $user, $passwd)
    or die "Failed to connect to database: $DBI::errstr\n";

  return($dbh);
}


# Inserts a row into the CastorFile table and returns its database ID.
#
# This subroutine does not insert a row into the id2type table.
#
# @param  dbh                The handle to the stager-database.
# @param  nsHost             The name-server hostname.
# @param  fileId
# @param  fileSize
# @param  creationTime
# @param  lastUpdateTime
# @param  lastAccessTime
# @param  lastKnownFilename
# @param  svcClassName
# @param  fileClassName
# @return The database ID of the newly inserted CastorFile.
sub insertCastorFile {
  my $dbh               = $_[0];
  my $nsHost            = $_[1];
  my $fileId            = $_[2];
  my $fileSize          = $_[3];
  my $creationTime      = $_[4];
  my $lastUpdateTime    = $_[5];
  my $lastAccessTime    = $_[6];
  my $lastKnownFilename = $_[7];
  my $svcClassName      = $_[8];
  my $fileClassName     = $_[9];

  my $stmt = "
    DECLARE
      varSvcClassId   NUMBER(38) := NULL;
      varFileClassId  NUMBER(38) := NULL;
      varCastorFileId NUMBER(38) := NULL;
    BEGIN
      /* Deteremine the database IDs of the service and file classes */
      SELECT id INTO varSvcClassId  FROM SvcClass  WHERE name = :SVCCLASSNAME;
      SELECT id INTO varFileClassId FROM FileClass WHERE name = :FILECLASSNAME;

      INSERT INTO CastorFile(id, nsHost, fileId, fileSize, creationTime,
                  lastUpdateTime, lastAccessTime, lastKnownFilename, svcClass,
                  fileClass)
           VALUES (ids_seq.NEXTVAL, :NSHOST, :FILEID, :FILESIZE,
                  :CREATIONTIME, :LASTUPDATETIME, :LASTACCESSTIME,
                  :LASTKNOWNFILENAME, varSvcClassId, varFileClassId)
        RETURNING id INTO varCastorFileId;

      INSERT INTO Id2Type(id, type) VALUES(varCastorFileId, 2);

      :CASTORFILEID := varCastorFileId;
    END;";

  # The castor-file database ID will be the return value
  my $castorFileId;

  my $sth = $dbh->prepare($stmt);
  $sth->bind_param_inout(":SVCCLASSNAME",\$svcClassName,2048)
    or die $sth->errstr;
  $sth->bind_param_inout(":FILECLASSNAME",\$fileClassName,2048)
    or die $sth->errstr;
  $sth->bind_param_inout(":NSHOST",\$nsHost,2048) or die $sth->errstr;
  $sth->bind_param_inout(":FILEID",\$fileId,20) or die $sth->errstr;
  $sth->bind_param_inout(":FILESIZE",\$fileSize,20) or die $sth->errstr;
  $sth->bind_param_inout(":CREATIONTIME",\$creationTime,20) or die $sth->errstr;
  $sth->bind_param_inout(":LASTUPDATETIME",\$lastUpdateTime,20)
    or die $sth->errstr;
  $sth->bind_param_inout(":LASTACCESSTIME",\$lastAccessTime,20)
    or die $sth->errstr;
  $sth->bind_param_inout(":LASTKNOWNFILENAME",\$lastKnownFilename,2048)
    or die $sth->errstr;
  $sth->bind_param_inout(":CASTORFILEID",\$castorFileId,20) or die $sth->errstr;
  $sth->execute();

  return $castorFileId;
}


# Inserts the specified number of rows into the TapeCopy table all pointing to
# the specified castor-file and all with the specified status.
#
# @param dbh          The handle to the stager-database.
# @param castorFileId The database ID of the associated castor-file.
# @param status       The initial status of the tape-copies.
# @param nbTapeCopies The number of rows to insert into the TapeCopy table.
sub insertTapeCopies {
  my $dbh          = $_[0];
  my $castorFileId = $_[1];
  my $status       = $_[2];
  my $nbTapeCopies = $_[3];

  my $stmt = "
    DECLARE
      varTapeCopyId NUMBER(38) := NULL;
    BEGIN
      FOR i IN 1 .. :NBTAPECOPIES LOOP
        INSERT INTO TapeCopy(id, copyNb, castorFile, status)
             VALUES (ids_seq.nextval, 1, :CASTORFILEID, :STATUS)
          RETURNING id INTO varTapeCopyId;

        INSERT INTO Id2Type(id, type) VALUES (varTapeCopyId, 30);
      END LOOP;
    END;";

  # The tape-copy database ID will be the return value
  my $tapeCopyId;

  my $sth = $dbh->prepare($stmt);
  $sth->bind_param_inout(":NBTAPECOPIES", \$nbTapeCopies, 20)
    or die $sth->errstr;
  $sth->bind_param_inout(":CASTORFILEID", \$castorFileId, 20)
    or die $sth->errstr;
  $sth->bind_param_inout(":STATUS"      , \$status      , 20)
    or die $sth->errstr;
  $sth->execute();

  return $tapeCopyId;
}


################################################################################
# MAIN PROGRAM STARTS HERE
################################################################################

# Print error message and abort if the user is not root
my $uid = POSIX::getuid;
my $gid = POSIX::getgid;
print("UID=$uid\n");
print("GID=$gid\n");
if($uid != 0 || $gid !=0) {
  print("ABORT: This script must be ran as root\n");
  exit(-1);
}

# Connect to the stager database
my $dbh = &connectToStagerDb();
$dbh->{AutoCommit} = 0;

my $nsHost            = 'TestMigHunterNameServer';
my $fileId            = $DEV_FILE_NS_FILEID;
my $fileSize          = 1000;
my $creationTime      = time();
my $lastUpdateTime    = $creationTime;
my $lastAccessTime    = $creationTime;
my $lastKnownFilename = 'TestMigHunterFilename';
my $svcClassName      = 'default';
my $fileClassName     = 'largeuser';

print("lastAccessTime=$lastAccessTime\n");

# Insert a new castor-file
my $castorFileId = &insertCastorFile(
  $dbh,
  $nsHost,
  $fileId,
  $fileSize,
  $creationTime,
  $lastUpdateTime,
  $lastAccessTime,
  $lastKnownFilename,
  $svcClassName,
  $fileClassName);
$dbh->commit();
print("Inserted castor-file: castorFileId=$castorFileId\n");

my $TAPECOPY_CREATED = 0;
my $nbTapeCopies     = 40000;
print("Inserting $nbTapeCopies tape-copies\n");
&insertTapeCopies($dbh, $castorFileId, $TAPECOPY_CREATED, $nbTapeCopies);
$dbh->commit();
print("Committed inserts\n");

END {
  $dbh->disconnect if defined($dbh);
}
