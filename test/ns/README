******************************************************************************
*                A Multithreaded client for stress tests
*                Notes for usage and possible extensions
*
* This file is part of the Castor project.
* See http://castor.web.cern.ch/castor
*
* Copyright (C) 2003  CERN
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* @author Giuseppe Lo Presti
*
*****************************************************************************


The code in this directory is a very basic infrastructure to run stress tests;
it has been written having in mind running performance tests against the Castor name server.
However, it can be changed to run any stress test in multithreaded mode.

To use it you need to edit the TestThread.cpp class and write anything you want to stress test.
The example in CVS already contains code for different tests, including stats, file creations
and unlinks, getpath, etc.

It is advised to apply the following patch to castor/server/SignalThreadPool.cpp:

diff -r1.20 SignalThreadPool.cpp
144c144
<     m_notified++;   // hack to not pass in the mutex/cond loop the 1st time, cf. ServiceThread
---
>     m_notified = m_nbThreads;   // hack to not pass in the mutex/cond loop the 1st time, cf. ServiceThread

This is to make sure that all threads start at full speed since the beginning, without
waiting for the first timeout in the thread pool.

To compile the code:
--------------------

g++ -fPIC -D_LARGEFILE64_SOURCE -Wall -Wno-long-long  -g -O0 -pedantic -I ../../h -I ../.. -pthread -DCTHREAD_POSIX -D_THREAD_SAFE -D_REENTRANT -c -o TestThread.o TestThread.cpp
g++ -fPIC -D_LARGEFILE64_SOURCE -Wall -Wno-long-long  -g -O0 -pedantic -I ../../h -I ../.. -pthread -DCTHREAD_POSIX -D_THREAD_SAFE -D_REENTRANT -c -o TestMTServer.o TestMTServer.cpp
g++ -o nstest -g -O0 -pthread TestThread.o TestMTServer.o -L ../../shlib -lnsl -ldl -lshift -Wl,-rpath-link,../../shlib

To run it:
----------
Start it with:
./nstest -T <n>
as usual, -f will run it in foreground.

Then stop it with:
killall nstest
The signal handler will stop the test and overall statistics will be gathered and printed.
