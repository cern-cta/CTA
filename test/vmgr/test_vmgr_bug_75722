#!/bin/perl -w

use strict;
use DBI;
use POSIX;

sub runCmdAs {
  my ($userName, $cmd) = (shift, shift);

  my $now            = "";
  my $status         = 0;
  my $pid            = 0;
  my $cmdOutputFile;
  my $cmdOutputStr   = "";

  $now = `date '+\%a \%b \%H:\%M:\%S'`;
  chomp($now);
  print("$now : \"$cmd\"\n");
  open($cmdOutputFile, "runuser $userName -c \"$cmd\" |")
    or die "Failed to run \"$cmd\": $!\n";

  while(<$cmdOutputFile>) {
    $cmdOutputStr = $cmdOutputStr . $_;
  }

  close($cmdOutputFile);

  return $cmdOutputStr;
}

# Returns the database connection string stored in /etc/castor/VMGRCONFIG
sub getVmgrDbConnectionString {
  my $dbConnectionString = `cat /etc/castor/VMGRCONFIG`;
  chomp($dbConnectionString);
  return($dbConnectionString);
}

sub testRunCmdAsOutput {
  my ($userName, $cmd, $expectedOutput) = (shift, shift, shift);

  my $actualOutput = "";
  my $now          = "";

  $now = `date '+\%a \%b \%H:\%M:\%S'`;
  chomp($now);
  $actualOutput = &runCmdAs($userName, $cmd);
  chomp($actualOutput);
  die "$now : \"$cmd\" failed: Unexpected output:" .
      " expected=\"$expectedOutput\"" .
      " actual=\"$actualOutput\"\n"
    unless $actualOutput eq $expectedOutput;
  print("$actualOutput\n");
}

# Returns true if the daemon with specfied name is running else false.
#
# @param  daemonName The name of the daemon.
# @return            True if the daemon is running, else false.
sub daemonIsRunning {
  my $daemonName = $_[0];

  my $psResult = `ps -e | grep $daemonName | awk '{print \$NF;}'`;
  chomp($psResult);

  return($psResult eq $daemonName);
}

sub dropVmgrDatabaseSchema {
  my ($dbConnectionString, $originalDropSchema) = (shift, shift);

  my $tmpDropSchema = &runCmdAs("root", "mktemp");
  print("tmpDropSchema=$tmpDropSchema\n");
  chomp($tmpDropSchema);
  `echo "WHENEVER SQLERROR EXIT FAILURE;" >> $tmpDropSchema`;
  `echo "CONNECT $dbConnectionString" >> $tmpDropSchema`;
  `echo >> $tmpDropSchema`;
  `cat $originalDropSchema >> $tmpDropSchema`;
  `echo >> $tmpDropSchema`;
  `echo "EXIT;" >> $tmpDropSchema`;

  &runCmdAs("root", "'sqlplus' /NOLOG \@$tmpDropSchema");
  &runCmdAs("root", "rm $tmpDropSchema");
}

sub createVmgrDatabaseSchema {
  my ($dbConnectionString, $originalDbSchema) = (shift, shift);

  my $tmpCreateSchema = &runCmdAs("root", "mktemp");
  chomp($tmpCreateSchema);
  print("tmpCreateSchema=$tmpCreateSchema\n");
  `echo "WHENEVER SQLERROR EXIT FAILURE;" >> $tmpCreateSchema`;
  `echo "CONNECT $dbConnectionString" >> $tmpCreateSchema`;
  `echo >> $tmpCreateSchema`;
  `cat $originalDbSchema >> $tmpCreateSchema`;
  `echo >> $tmpCreateSchema`;
  `echo "EXIT;" >> $tmpCreateSchema`;

  &runCmdAs("root", "'sqlplus' /NOLOG \@$tmpCreateSchema");
  &runCmdAs("root", "rm $tmpCreateSchema");
}

sub dieIfNoExecutable {
  my $executablePath = shift;

  print ("Testing \"$executablePath\" exists and is executable\n");

  die("ABORT: $executablePath does not exist\n")
    unless -e $executablePath;
  die("ABORT: $executablePath is not a plain file\n")
    unless -f $executablePath;
  die("ABORT: $executablePath is not executable\n")
    unless -x $executablePath;
}

sub enterTapes {
  my ($clients, $tapes, $clientVer) = (shift, shift, shift);

  my $i              = 1;
  my $vid            = "";
  my $expectedOutput = "";

  for $vid (sort keys %$tapes) {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrentertape}{$clientVer}" .
      " -V $vid" .
      " --mo $tapes->{$vid}{mo}" .
      " --ml $tapes->{$vid}{ml}" .
      " --li $tapes->{$vid}{li}" .
      " -d   $tapes->{$vid}{ d}" .
      " -l   $tapes->{$vid}{ l}" .
      " --po $tapes->{$vid}{po}",
      "");

    if($expectedOutput ne "") {
      $expectedOutput = $expectedOutput . "\n";
    }
    if($clientVer eq "newVer") {
      $expectedOutput = $expectedOutput .
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}       1.00TiB 00000000 ";
    } else {
      $expectedOutput = $expectedOutput .
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}    1024.00GiB 00000000 ";
    }

    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlisttape}{$clientVer}", $expectedOutput);

    if($i == 1 and $clientVer eq "oldVer") {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer}",
        "stager_dev04    stage    st     CAPACITY 1024.00GiB" .
        " FREE 1024.00GiB (100.0%)");
    } else {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer}",
        "stager_dev04    stage    st     CAPACITY    $i.00TiB" .
        " FREE    $i.00TiB (100.0%)");
    }

    # vmgrlistpool uses a different protocol with the -P option than without
    if($i == 1 and $clientVer eq "oldVer") {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
        "stager_dev04    stage    st     CAPACITY 1024.00GiB" .
        " FREE 1024.00GiB (100.0%)");
    } else {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
        "stager_dev04    stage    st     CAPACITY    $i.00TiB" .
        " FREE    $i.00TiB (100.0%)");
    }

    $i = $i + 1;
  }
}

sub deleteTapes {
  my ($clients, $tapes, $clientVer) = (shift, shift, shift);

  my @vids    = sort keys %$tapes;
  my $nbTapes = @vids;
  my $i       = $nbTapes;
  my $vid     = "";
  my @expectedListTapeOutputArray;
  my $expectedListTapeOutputString = "";

  for $vid (@vids) {
    if($clientVer eq "newVer") {
      push(@expectedListTapeOutputArray, 
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}       1.00TiB 00000000 ");
    } else {
      push(@expectedListTapeOutputArray, 
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}    1024.00GiB 00000000 ");
    }
  }

  for $vid (@vids) {
    $expectedListTapeOutputString = "";
    for (@expectedListTapeOutputArray) {
      if($expectedListTapeOutputString ne "") {
        $expectedListTapeOutputString = $expectedListTapeOutputString . "\n";
      }
      $expectedListTapeOutputString = $expectedListTapeOutputString . $_;
    }

    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlisttape}{$clientVer}",
      $expectedListTapeOutputString);

    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrdeletetape}{$clientVer} -V $vid",
      "");
    
    if($i == 1 and $clientVer eq "oldVer") {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer}",
        "stager_dev04    stage    st     CAPACITY 1024.00GiB" .
        " FREE 1024.00GiB (100.0%)");
    } else {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer}",
        "stager_dev04    stage    st     CAPACITY    $i.00TiB" .
        " FREE    $i.00TiB (100.0%)");
    }

    # vmgrlistpool uses a different protocol with the -P option than without
    if($i == 1 and $clientVer eq "oldVer") {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
        "stager_dev04    stage    st     CAPACITY 1024.00GiB" .
        " FREE 1024.00GiB (100.0%)");
    } else {
      &testRunCmdAsOutput("root",
        "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
        "stager_dev04    stage    st     CAPACITY    $i.00TiB" .
        " FREE    $i.00TiB (100.0%)");
    }

    shift(@expectedListTapeOutputArray);
    $i = $i - 1;
  }
}

sub enterMetadata {
  my ($clients, $tapes, $clientVer) = (shift, shift, shift);

  my @vids           = sort keys %$tapes;
  my $expectedOutput = "";
  my $i              = 0;
  my $vid            = "";

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrentermodel}{$clientVer} --mo 3592 --ml J --mc 250",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistmodel}{$clientVer}",
    "3592   J  250");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrdeletemodel}{$clientVer} --mo 3592",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistmodel}{$clientVer}",
    "");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrentermodel}{$clientVer} --mo 3592 --ml J --mc 250",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistmodel}{$clientVer}",
    "3592   J  250");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterdenmap}{$clientVer}" .
    " -d 1000GC --ml J --mo 3592 --nc 1T", "");
  if($clientVer eq "newVer") {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlistdenmap}{$clientVer}",
      "3592   J  1000GC      1.00Ti");
  } else {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlistdenmap}{$clientVer}",
    "3592   J  1000GC   1024.00Gi");
  }

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrdeletedenmap}{$clientVer} -d 1000GC --mo 3592 --ml J",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistdenmap}{$clientVer}", "");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterdenmap}{$clientVer}" .
    " -d 1000GC --ml J --mo 3592 --nc 1T", "");
  if($clientVer eq "newVer") {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlistdenmap}{$clientVer}",
      "3592   J  1000GC      1.00Ti");
  } else {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlistdenmap}{$clientVer}",
      "3592   J  1000GC   1024.00Gi");
  }

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterlibrary}{$clientVer}" .
    " --name IBMLIB1B --capacity 6600", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");
  # vmgrlistlibrary uses a different protocol with the --name option than
  # without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer} --name IBMLIB1B",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrdeletelibrary}{$clientVer} --name IBMLIB1B", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}", "");
  # vmgrlistlibrary uses a different protocol with the --name option than
  # without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer} --name IBMLIB1B",
    "vmgrlistlibrary IBMLIB1B: No such library");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterlibrary}{$clientVer}" .
    " --name IBMLIB1B --capacity 6600", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");
  # vmgrlistlibrary uses a different protocol with the --name option than
  # without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer} --name IBMLIB1B",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrmodifylibrary}{$clientVer}" .
    " --name IBMLIB1B --capacity 1234 --status OFFLINE", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}",
    "IBMLIB1B CAPACITY 1234 FREE 1234 (100.0%) OFFLINE");
  # vmgrlistlibrary uses a different protocol with the --name option than
  # without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer} --name IBMLIB1B",
    "IBMLIB1B CAPACITY 1234 FREE 1234 (100.0%) OFFLINE");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrmodifylibrary}{$clientVer}" .
    " --name IBMLIB1B --capacity 6600 --status ONLINE", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");
  # vmgrlistlibrary uses a different protocol with the --name option than
  # without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer} --name IBMLIB1B",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterlibrary}{$clientVer}" .
    " --name IBMLIB3B --capacity 6600", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistlibrary}{$clientVer}",
    "IBMLIB1B CAPACITY 6600 FREE 6600 (100.0%) ONLINE\n" .
    "IBMLIB3B CAPACITY 6600 FREE 6600 (100.0%) ONLINE");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterdgnmap}{$clientVer}" .
    " -g 359B1B --mo 3592 --library IBMLIB1B",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistdgnmap}{$clientVer}",
    "359B1B 3592   IBMLIB1B");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrdeletedgnmap}{$clientVer} --li IBMLIB1B --mo 3592",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistdgnmap}{$clientVer}",
    "");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterdgnmap}{$clientVer}" .
    " -g 359B1B --mo 3592 --library IBMLIB1B",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistdgnmap}{$clientVer}",
    "359B1B 3592   IBMLIB1B");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterdgnmap}{$clientVer}" .
    " -g 359B3B --mo 3592 --library IBMLIB3B",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistdgnmap}{$clientVer}",
    "359B1B 3592   IBMLIB1B\n" .
    "359B3B 3592   IBMLIB3B");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterpool}{$clientVer}" .
    " --group st --name stager_dev04 --user stage",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer}",
    "stager_dev04    stage    st     CAPACITY" .
    "         0B FREE         0B (  0.0%)");
  # vmgrlistpool uses a different protocol with the -P option than without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
    "stager_dev04    stage    st     CAPACITY" .
    "         0B FREE         0B (  0.0%)");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrdeletepool}{$clientVer} --name stager_dev04",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer}",
    "");
  # vmgrlistpool uses a different protocol with the -P option than without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
    "vmgrlistpool stager_dev04: No such pool");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrenterpool}{$clientVer}" .
    " --group st --name stager_dev04 --user stage",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer}",
    "stager_dev04    stage    st     CAPACITY" .
    "         0B FREE         0B (  0.0%)");
  # vmgrlistpool uses a different protocol with the -P option than without
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer} -P stager_dev04",
    "stager_dev04    stage    st     CAPACITY" .
    "         0B FREE         0B (  0.0%)");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrmodifypool}{$clientVer}" .
    " --name stager_dev04 --user root --group root",
    "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer}",
    "stager_dev04    -        -      CAPACITY" .
    "         0B FREE         0B (  0.0%)");

  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrmodifypool}{$clientVer}" .
    " --name stager_dev04 --user stage --group st");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlistpool}{$clientVer}",
    "stager_dev04    stage    st     CAPACITY" .
    "         0B FREE         0B (  0.0%)");

  print("\n");
  print("ENTERING TAPES\n");
  &enterTapes($clients, $tapes, $clientVer);

  print("\n");
  print("DELETING TAPES\n");
  &deleteTapes($clients, $tapes, $clientVer);
exit(0);

  # Disable all tapes
  for $vid (sort keys %$tapes) {
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrmodifytape}{$clientVer} -V $vid --st DISABLED", "");

    if($clientVer eq "newVer") {
      $expectedOutput =
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}       1.00TiB" .
        " 00000000 DISABLED";
    } else {
      $expectedOutput =
        "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
        "   $tapes->{$vid}{ l} $tapes->{$vid}{po}    1024.00GiB" .
        " 00000000 DISABLED";
    }
    &testRunCmdAsOutput("root",
      "2>&1 $clients->{vmgrlisttape}{$clientVer} -V $vid",
      $expectedOutput);
  }

  # Enable the first tape
  $vid = $vids[0];
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrmodifytape}{$clientVer} -V $vid --st ''", "");
  if($clientVer eq "newVer") {
    $expectedOutput =
      "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
      "   $tapes->{$vid}{ l} $tapes->{$vid}{po}       1.00TiB 00000000 ";
  } else {
    $expectedOutput =
      "$vid   $vid $tapes->{$vid}{li} $tapes->{$vid}{ d}" .
      "   $tapes->{$vid}{ l} $tapes->{$vid}{po}    1024.00GiB 00000000 ";
  }
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrlisttape}{$clientVer} -V $vid",
    $expectedOutput);

  # Set the tag text of the second tape
  $vid = $vids[1];
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrsettag}{$clientVer} --tag 'The tag text' -V $vid", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrgettag}{$clientVer} -V $vid",
    "The tag text");

  # Delete the tag text of the second tape
  $vid = $vids[1];
  &testRunCmdAsOutput("root",
    "$clients->{vmgrdeltag}{$clientVer} -V $vid", "");
  &testRunCmdAsOutput("root",
    "2>&1 $clients->{vmgrgettag}{$clientVer} -V $vid",
    "I10486: No such file or directory");
}

###############################################################################
# MAIN PROGRAM STARTS HERE
###############################################################################

my $testVmgrHost    = "lxcastordev04";
my $nonRootUserName = "murrayc3";
my $productionHost  = "lxadm";
my $nsDir           = "/castor/cern.ch/dev/m/murrayc3/vmgr_bug_75722";
my %tapes = (
  I02023 => {
    mo  => "3592",
    ml  => "J",
    li  => "IBMLIB1B",
    d   => "1000GC",
    l   => "aul",
    po  => "stager_dev04",
    dgn => "359B1B"
  },
  I10486 => {
    mo  => "3592",
    ml  => "J",
    li  => "IBMLIB3B",
    d   => "1000GC",
    l   => "aul",
    po  => "stager_dev04",
    dgn => "359B3B"
  },
  I12035 => {
    mo  => "3592",
    ml  => "J",
    li  => "IBMLIB3B",
    d   => "1000GC",
    l   => "aul",
    po  => "stager_dev04",
    dgn => "359B3B"
  },
  I12038 => {
    mo  => "3592",
    ml  => "J",
    li  => "IBMLIB3B",
    d   => "1000GC",
    l   => "aul",
    po  => "stager_dev04",
    dgn => "359B3B"
  },
  I12438 => {
    mo  => "3592",
    ml  => "J",
    li  => "IBMLIB3B",
    d   => "1000GC",
    l   => "aul",
    po  => "stager_dev04",
    dgn => "359B3B"
  }
);
my $castor_src = $ENV{'CASTOR_SRC'};
my %clients = (
  vmgrquerytape => {
    oldVer => "$castor_src/test/vmgr/vmgrquerytape_trunk_r21843",
    newVer => "$castor_src/test/vmgr/vmgrquerytape"},
  vmgrenterdenmap => {
    oldVer => "$castor_src/test/vmgr/vmgrenterdenmap_trunk_r21843",
    newVer => "/usr/bin/vmgrenterdenmap"},
  vmgrlistdenmap => {
    oldVer => "$castor_src/test/vmgr/vmgrlistdenmap_trunk_r21843",
    newVer => "/usr/bin/vmgrlistdenmap"},
  vmgrentermodel => {
    oldVer => "$castor_src/test/vmgr/vmgrentermodel_trunk_r21843",
    newVer => "/usr/bin/vmgrentermodel"},
  vmgrlistmodel => {
    oldVer => "$castor_src/test/vmgr/vmgrlistmodel_trunk_r21843",
    newVer => "/usr/bin/vmgrlistmodel"},
  vmgrenterlibrary => {
    oldVer => "$castor_src/test/vmgr/vmgrenterlibrary_trunk_r21843",
    newVer => "/usr/bin/vmgrenterlibrary"},
  vmgrlistlibrary => {
    oldVer => "$castor_src/test/vmgr/vmgrlistlibrary_trunk_r21843",
    newVer => "/usr/bin/vmgrlistlibrary"},
  vmgrmodifylibrary => {
    oldVer => "$castor_src/test/vmgr/vmgrmodifylibrary_trunk_r21843",
    newVer => "/usr/bin/vmgrmodifylibrary"},
  vmgrenterdgnmap => {
    oldVer => "$castor_src/test/vmgr/vmgrenterdgnmap_trunk_r21843",
    newVer => "/usr/bin/vmgrenterdgnmap"},
  vmgrlistdgnmap => {
    oldVer => "$castor_src/test/vmgr/vmgrlistdgnmap_trunk_r21843",
    newVer => "/usr/bin/vmgrlistdgnmap"},
  vmgrenterpool => {
    oldVer => "$castor_src/test/vmgr/vmgrenterpool_trunk_r21843",
    newVer => "/usr/bin/vmgrenterpool"},
  vmgrlistpool => {
    oldVer => "$castor_src/test/vmgr/vmgrlistpool_trunk_r21843",
    newVer => "/usr/bin/vmgrlistpool"},
  vmgrmodifypool => {
    oldVer => "$castor_src/test/vmgr/vmgrmodifypool_trunk_r21843",
    newVer => "/usr/bin/vmgrmodifypool"},
  vmgrentertape => {
    oldVer => "$castor_src/test/vmgr/vmgrentertape_trunk_r21843",
    newVer => "/usr/bin/vmgrentertape"},
  vmgrlisttape => {
    oldVer => "$castor_src/test/vmgr/vmgrlisttape_trunk_r21843",
    newVer => "/usr/bin/vmgrlisttape"},
  vmgrmodifytape => {
    oldVer => "$castor_src/test/vmgr/vmgrmodifytape_trunk_r21843",
    newVer => "/usr/bin/vmgrmodifytape"},
  vmgrsettag => {
    oldVer => "$castor_src/test/vmgr/vmgrsettag_trunk_r21843",
    newVer => "/usr/bin/vmgrsettag"},
  vmgrgettag => {
    oldVer => "$castor_src/test/vmgr/vmgrgettag_trunk_r21843",
    newVer => "/usr/bin/vmgrgettag"},
  vmgrdeltag => {
    oldVer => "$castor_src/test/vmgr/vmgrdeltag_trunk_r21843",
    newVer => "/usr/bin/vmgrdeltag"},
  vmgrdeletedenmap => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletedenmap_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletedenmap"},
  vmgrdeletedgnmap => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletedgnmap_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletedgnmap"},
  vmgrdeletelibrary => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletelibrary_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletelibrary"},
  vmgrdeletemodel => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletemodel_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletemodel"},
  vmgrdeletepool => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletepool_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletepool"},
  vmgrdeletetape => {
    oldVer => "$castor_src/test/vmgr/vmgrdeletetape_trunk_r21843",
    newVer => "/usr/bin/vmgrdeletetape"}
);
my $client             = "";
my @vids               = sort keys %tapes;
my $originalDbSchema   = "";
my $originalDropSchema = "";
my $vid                = "";
my $tapePool           = "";
my $tapeStatus         = "";
my $freeSpaceStr       = "";
my $status             = 0;
my $uid                = POSIX::getuid;
my $gid                = POSIX::getgid;
my $cmdResultStr       = "";
my $i                  = 0;

# Abort if the user is not root
die("ABORT: This script must be ran as root\n") if ($uid != 0 || $gid !=0);

# Abort if the environment variable CASTOR_SRC is not set
die("ABORT: CASTOR_SRC not defined\n") if(! defined($ENV{'CASTOR_SRC'}));

print("Using CASTOR_SRC=$castor_src\n");

for $client (sort keys %clients) {
  &dieIfNoExecutable($clients{$client}{oldVer});
  &dieIfNoExecutable($clients{$client}{newVer});
}

# Determine the location of the database scripts to drop the vmgr and recreate
# the vmgr database
$originalDbSchema   = "$castor_src/vmgr/vmgr_oracle_create.sql";
$originalDropSchema = "$castor_src/castor/db/drop_oracle_schema.sql";

die "ABORT: $originalDbSchema does not exist\n"
  if ! -e $originalDbSchema;

die "ABORT: $originalDropSchema does not exist\n"
  if ! -e $originalDropSchema;

my $dbConnectionString = &getVmgrDbConnectionString();
my $dbUser   = "UNKNOWN";
my $dbPasswd = "UNKNOWN";
my $dbTNS    = "UNKNOWN";

if($dbConnectionString =~ m/^([^\/]+)\/([^\@]+)\@(.*)$/) {
  $dbUser   = $1;
  $dbPasswd = $2;
  $dbTNS    = $3;
} else {
  die("ABORT: Failed to extract database username from connection string\n");
}

die "Abort: Failed to tnsping database with TNS=$dbTNS\n"
  unless system("tnsping $dbTNS") == 0;

die("ABORT: Database user $dbUser is not vmgr_dev04\n")
  if($dbUser ne "vmgr_dev04");

# Abort if the test tapes are not in the tape_dev tape-pool and not DISABLED in
# the production vmgr
print("\n");
print("CHECKING TEST TAPES ARE IN TAPE_DEV AND DISABLED IN PRODUCTION\n");
for $vid (sort keys %tapes) {
  $cmdResultStr = &runCmdAs("root",
    "ssh $nonRootUserName\@$productionHost vmgrlisttape -V $vid");
  chomp($cmdResultStr);
  print("cmdResultStr=$cmdResultStr\n");
  $tapePool   = "UNKNOWN";
  $tapeStatus = "UNKNOWN";
  if($cmdResultStr =~
    m/$vid +$vid +\w+ +\w+ +$tapes{$vid}{l} +(\w+) +[^ ]+ +\w+ +(\w+)$/) {
    $tapePool   = $1;
    $tapeStatus = $2;
  }
  print("tapePool   = $tapePool\n");
  print("tapeStatus = $tapeStatus\n");
  die "$vid is not in tape_dev in production" unless $tapePool eq "tape_dev";
  die "$vid is not DISABLED in production" unless $tapeStatus eq "DISABLED";
}

# Abort if the test tapes have production files on them
print("\n");
print("CHECKING TEST_TAPES CONTAIN NO PRODUCTION FILES\n");
for $vid (sort keys %tapes) {
  $cmdResultStr = &runCmdAs("root",
    "2>&1 ssh $nonRootUserName\@$productionHost nslisttape -V $vid");
  chomp($cmdResultStr);
  print("cmdResultStr=\"$cmdResultStr\"\n");
  die "$vid contains production files"
    unless $cmdResultStr eq "$vid: No such volume or no files found";
}

# Abort if the new vmgr clients do not get refused by the old production vmgr
print("\n");
print("CHECKING OLD VMGR REFUSES NEW CLIENTS\n");
&testRunCmdAsOutput("root",
  "2>&1 VMGR_HOST=lxcastorsrv102 $clients{vmgrenterdenmap}{newVer}" .
  " -d 9999GC --ml J --mo 3592 --nc 1T",
  "VMG03 - illegal function 40\nvmgrenterdenmap 3592: Internal error");
&testRunCmdAsOutput("root",
  "2>&1 VMGR_HOST=lxcastorsrv102 $clients{vmgrlistdenmap}{newVer}",
  "VMG03 - illegal function 41\n" .
  "send2vmgr: VMG02 - send error : Internal error");
&testRunCmdAsOutput("root",
  "2>&1 VMGR_HOST=lxcastorsrv102 $clients{vmgrlisttape}{newVer} -V $vids[0]",
  "VMG03 - illegal function 42\nvmgrlisttape: Internal error");
&testRunCmdAsOutput("root",
  "2>&1 VMGR_HOST=lxcastorsrv102 $clients{vmgrquerytape}{newVer} $vids[0]",
  "VMG03 - illegal function 39\n" .
  "vmgr_querytape_byte_u64 failed: vid=\"$vids[0]\": Internal error");

if(&daemonIsRunning("vmgrd")) {
  print("\n");
  print("STOPPING THE VMGR\n");
  &runCmdAs("root", "/etc/init.d/vmgrd stop");
}

print("\n");
print("DROPPING DATABASE SCHEMA\n");
&dropVmgrDatabaseSchema($dbConnectionString, $originalDropSchema);

print("\n");
print("CREATING DATABASE SCHEMA\n");
&createVmgrDatabaseSchema($dbConnectionString, $originalDbSchema);

print("\n");
print("STARTING THE VMGR\n");
&runCmdAs("root", "/etc/init.d/vmgrd start");
die "Abort: vmgrd is not running\n" unless daemonIsRunning("vmgrd");
sleep(1); # Give the vmgrd a chance to get up and running

print("\n");
print("ENTERING META-DATA INTO VMGR USING OLD CLIENTS\n");

&enterMetadata(\%clients, \%tapes, "oldVer");

if(&daemonIsRunning("vmgrd")) {
  print("\n");
  print("STOPPING THE VMGR\n");
  &runCmdAs("root", "/etc/init.d/vmgrd stop");
}

print("\n");
print("DROPPING DATABASE SCHEMA\n");
&dropVmgrDatabaseSchema($dbConnectionString, $originalDropSchema);

print("\n");
print("CREATING DATABASE SCHEMA\n");
&createVmgrDatabaseSchema($dbConnectionString, $originalDbSchema);

print("\n");
print("STARTING THE VMGR\n");
&runCmdAs("root", "/etc/init.d/vmgrd start");
die "Abort: vmgrd is not running\n" unless daemonIsRunning("vmgrd");
sleep(1); # Give the vmgrd a chance to get up and running

print("\n");
print("ENTERING META-DATA INTO VMGR USING NEW CLIENTS\n");

&enterMetadata(\%clients, \%tapes, "newVer");

# Abort if the old vmgr_checktape function does not work with the new vmgr
print("\n");
print("CHECKING OLD VMGR_CHECKTAPE FUNCTION WORKS WITH NEW VMGR\n");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrquerytape}{oldVer} $vids[0]",
  "vmgr_querytape succeeded: vid=\"$vids[0]\" dgn=\"$tapes{$vids[0]}{dgn}\"");

# Abort if the old vmgr_enterdenmap function does not work with the new vmgr
print("\n");
print("CHECKING OLD VMGR_ENTERDENMAP FUNCTION WORKS WITH NEW VMGR\n");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrenterdenmap}{oldVer}" .
  " -d 10GC --ml J --mo 3592 --nc 10G", "");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrlistdenmap}{oldVer} | grep 10GC",
  "3592   J  10GC       10.00Gi");

# Abort if the new vmgr_checktape function does not work with the new vmgr
print("\n");
print("CHECKING NEW VMGR_CHECKTAPE FUNCTION WORKS WITH NEW VMGR\n");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrquerytape}{newVer} $vids[0]",
  "vmgr_querytape_byte_u64 succeeded:" .
  " vid=\"$vids[0]\" dgn=\"$tapes{$vids[0]}{dgn}\"");

# Abort if the old vmgr_listdenmap function does not work with the new vmgr
print("\n");
print("CHECKING OLD VMGR_LISTDENMAP FUNCTION WORKS WITH NEW VMGR\n");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrlistdenmap}{oldVer}",
  "3592   J  10GC       10.00Gi\n" .
  "3592   J  1000GC   1024.00Gi");

# Abort if the old vmgr_listtape function does not work with the new vmgr
print("\n");
print("CHECKING OLD VMGR_LISTTAPE FUNCTION WORKS WITH NEW VMGR\n");
&testRunCmdAsOutput("root",
  "2>&1 $clients{vmgrlisttape}{oldVer}",
  "I02023   I02023 IBMLIB1B 1000GC   aul stager_dev04    1024.00GiB 00000000 \n" .
  "I10486   I10486 IBMLIB3B 1000GC   aul stager_dev04    1024.00GiB 00000000 DISABLED\n" .
  "I12035   I12035 IBMLIB3B 1000GC   aul stager_dev04    1024.00GiB 00000000 DISABLED\n" .
  "I12038   I12038 IBMLIB3B 1000GC   aul stager_dev04    1024.00GiB 00000000 DISABLED\n" .
  "I12438   I12438 IBMLIB3B 1000GC   aul stager_dev04    1024.00GiB 00000000 DISABLED");

# Abort if the production clients do not work correctly with the new vmgr
print("\n");
print("CHECKING PRODUCTION CLIENTS WORK WITH NEW VMGR\n");
for $vid (sort keys %tapes) {
  $cmdResultStr = &runCmdAs("root",
    "ssh $nonRootUserName\@$productionHost VMGR_HOST=$testVmgrHost vmgrlisttape -V $vid");
  chomp($cmdResultStr);
  print("cmdResultStr=\"$cmdResultStr\"\n");
  $tapePool     = "UNKNOWN";
  $freeSpaceStr = "UNKNOWN";
  $tapeStatus   = "UNKNOWN";
  #if($cmdResultStr =~ m/$vid +$vid +$tapes{$vid}{li} +$tapes{$vid}{d} +$tapes{$vid}{l} +(\w+) +(\w+) +(\w+) $/) {
  if($cmdResultStr =~ m/$vid +$vid +$tapes{$vid}{li} +$tapes{$vid}{d} +$tapes{$vid}{l} +(\w+) +([^ ]+) +\d+ (.*)$/) {
    $tapePool     = $1;
    $freeSpaceStr = $2;
    $tapeStatus   = $3;
    $tapeStatus   =~ s/ //g;
  } else {
    die "vmgrlisttape -V $vid failed with production vmgr:" .
      " Failed to match output\n";
  }
  print("tapePool     = \"$tapePool\"\n");
  print("freeSpaceStr = \"$freeSpaceStr\"\n");
  print("tapeStatus   = \"$tapeStatus\"\n");
  die "vmgrlisttape -V $vid failed with production vmgr:" .
    " Incorrect tape-pool: expected=\"tape_dev\", actual=\"$tapePool\"\n"
    unless $tapePool eq $tapes{$vid}{po};
  die "vmgrlisttape -V $vid failed with production vmgr:" .
    " Incorrect free-space: expected=\"1.00TiB\", actual=\"$freeSpaceStr\"\n"
    unless $freeSpaceStr eq "1024.00GiB";
  if($vid eq $vids[0]) {
    die "vmgrlisttape -V $vid failed with production vmgr:" .
      " Incorrect status: expected=\"DISABLED\", actual=\"$tapeStatus\"\n"
      unless $tapeStatus eq "";
  } else {
    die "vmgrlisttape -V $vid failed with production vmgr:" .
      " Incorrect status: expected=\"DISABLED\", actual=\"$tapeStatus\"\n"
      unless $tapeStatus eq "DISABLED";
  }
}

exit(0);

# Create a seed file for migrations
my $tmpSeedFilename = `runuser murrayc3 -c mktemp`;
chomp($tmpSeedFilename);
print("tmpSeedFilename=$tmpSeedFilename\n");
print("dd if=/dev/urandom of=$tmpSeedFilename bs=1M count=100\n");
$status = system("runuser murrayc3 -c \"dd if=/dev/urandom of=$tmpSeedFilename bs=10M count=10\"");
die "dd failed: status=$status" unless $status == 0;

print("nsrm -rf $nsDir\n");
$status = system("runuser murrayc3 -c \"nsrm -rf $nsDir\"");
die "nsrm -rf $nsDir failed: status=$status" unless $status == 0;
print("nsmkdir $nsDir\n");
$status = system("runuser murrayc3 -c \"nsmkdir $nsDir\"");
die "nsmkdir -rf $nsDir failed: status=$status" unless $status == 0;

my $nsFilename       = "";
my $tmpLocalFilename = "";
for($i=1; $i<=1; $i++) {
  # Create the name-server filename
  $nsFilename = "$nsDir/test_100M_$i";
  print("nsFilename=$nsFilename\n");

  # Create a local temporary file from the temporary seed-file
  $tmpLocalFilename = `runuser murrayc3 -c mktemp`;
  chomp($tmpLocalFilename);
  print("tmpLocalFilename=$tmpLocalFilename\n");
  `runuser murrayc3 -c \"echo $nsFilename >> $tmpLocalFilename\"`;
  `runuser murrayc3 -c \"cat $tmpSeedFilename >> $tmpLocalFilename\"`;

  # Copy the temporary local file to castor
  print("rfcp $tmpLocalFilename $nsFilename\n");
  $status =
    system("runuser murrayc3 -c \"rfcp $tmpLocalFilename $nsFilename\"");
  die "rfcp failed: status=$status" unless $status == 0;

  # Delete the temporary local file
  `runuser murrayc3 -c \"rm $tmpLocalFilename\"`;
}

# Delete the seed file
print("rm $tmpSeedFilename\n");
`runuser murrayc3 -c \"rm $tmpSeedFilename\"`;
