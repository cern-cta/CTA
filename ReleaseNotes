-----------
- 2.1.0.0 -
-----------

  New Features and Changes (from 2.0.4-1)
  ---------------------------------------

  This version is strictly identical to 2.0.4-1.
  It is however prefered to 2.0.4-* since the soname of the libraries changed
  which was needed after we introduced some non backward compatible change in
  the interface.

  Upgrade from 2.0.4-1
  --------------------

    - nothing to do.
    - Note that for the client part, we advice to let castor-lib 2.0.* live
      aside the new one, so that application linked with libshift.2.0 don't
      break suddently. Once all users have relinked there applications with
      the new version, it can be removed.

-----------
- 2.0.4-1 -
-----------

  New Features and Changes (from 2.0.4-0)
  ---------------------------------------
    
    - Fixes concerning the TURL parsing in RFIO
    - Implementation of a port range for the ports used by the stager clients.
      Default range in [30000,30100], it can be overwritten in castor.conf
    - The file permission checks were fixed in the stager
    - The getNext functionnalities were made available to update requests
    - The cleaning daemon now has an init script
    - The flags given to RFIO when opening a file are now correctly handled
    - Queries on directories are now properly handled
    - SQL scripts are now also provided for sqlplus
    - The garbage collection was fixed (it was broken in 2.0.4-0 due to the new archiving of subrequests)
    - stager_qry -s was fixed (ordering was wrong)

  Upgrade from 2.0.4-0
  --------------------

    - The 2 releases are fully compatible and can be freely mixed
    - The database schema has not evolved. However, some fixes in the PL/SQL code
      were added. Use upgrades/2.0.4-0_to_2.0.4-1.sql to upgrade.
    - Clients can be updated completely independently (before or after the server
      update).

-----------
- 2.0.4-0 -
-----------

  New Features and Changes (from 2.0.3-0)
  ---------------------------------------

    - Fixes concerning the IBM 3592 tapes
    - Support for preallocation and direct i/o were added to RFIO
    - A Cleaning service was added that cleans up old requests
      and errors after some (configurable) time
    - stager_qry support for regexp was improved. Regexp is
      no more the default but can be activated using options.
      Directory listing is also supported and several fixes were applied.
    - stager_qry -s was implemented for getting statistics on diskpools
    - (prepareTo)Get/Put requests now detect directory names
    - RFIO was modified for supporting extended TURLs needed for
      SRM : rfio://stager:port//castor/.../file?svcclass=...&castorversion=...
    - /etc/castor/ORASTAGERCONFIG can now contain several lines in order
      to be able to switch between several CASTOR2 instances. The environment
      variable CASTOR_INSTANCE defines which line to use
    - VMGR now updates correctly the estimated free space, even for full tapes
    - rmnode has no more default for the RMMASTER_HOST. It raises an error
      if nothing is set.
    - Better logging of rmmaster to DLF

  Upgrade from 2.0.3-*
  --------------------

    - The database schema has evolved. Use upgrades/2.0.3_to_2.0.4.sql to upgrade.
      This can be done anytime before the software upgrade and does not imply any
      service interruption.
    - The server code can be updated after the DB, still without service interruption
      if you play with several processes.
    - Clients can be updated completely independently (before or after the server
      update). However, new functionnalities will lead to strange errors in case
      servers were not updated, typically :
          > stager_qry -s
          Error: Invalid argument
          stage_diskpoolsquery: Server Error 22 :
          Unable to read Request object from socket.
          No factory found for object type 103 and representation type 1

-----------
- 2.0.3-5 -
-----------

  Prerelease of future 2.0.4-0. To be tested.

-----------
- 2.0.3-4 -
-----------

  Bug fix release. Should again only be used for IBM 3592 taperservers

-----------
- 2.0.3-3 -
-----------

  Bug fix release. This release should be used in place of v2_0_3_0. It fixes
  a packaging bug that was introducing a symbol main in the library libshift.
  It is otherwise fully identical to v2_0_3_0.

-----------
- 2.0.3-2 -
-----------

  Bug fix release. Should again only be used for IBM 3592 taperservers

-----------
- 2.0.3-1 -
-----------

  Bug fix release. Should only be used for IBM 3592 taperservers

-----------
- 2.0.3-0 -
-----------

  New Features and Changes
  ------------------------

    - Support for ACLs in the nameserver
    - Regular expression support in stager_qry. The feature is
      limited on the server side via the FILEQUERY/MAXNBRESPONSES
      entry in the castor.conf.
    - LSF plugin is using new fixes coming with LSF 6.1-24. This
      allows to remove an internal fork. This change is incompatible
      with any old version of LSF
    - Interface for passing an authorization id to the stager on top
      of a user id.
    - Framework for multithreaded applications was ported to C++
    - Fixed compilation for x86_64 architecture
    - New package castor-dlf-gui
    - tpdaemon uses sg0 device instead of sga
    - Write filemarks with sg driver and immediate bit set

  Upgrade from 2.0.2-*
  --------------------

    - LSF 6.1-24 or higher must be used
    - The database schema has evolved. Use upgrades/2.0.2_to_2.0.3.sql to upgrade
    - Once the database is upgraded, the content of the lastKnownFileName column
      of the CastorFile table is still empty. It will be updated when the files
      are accessed but you can update it by hand using upgrades/2.0.2_to_2.0.3.pl
      Note that the only disadvantage of not updating is that stager_qry -M will
      not return files that were not updated.
    - For the nameserver, the database must be updated first, using the script
      ns/Cns_oracle_add_ACL.sql. Then the daemons can be updated and finally the
      clients. Note that each step is backward compatible, so that an old daemon
      can run on a new database and an old client can contact a new daemon.

