package cta.objectstore.serializers;

// The types of the objects. It will be used to allow introspection
// for the contents.
enum ObjectType {
  RootEntry_t = 0;
  AgentRegister_t = 1;
  Agent_t = 2;
  JobPool_t = 3;
  RecallFIFO_t = 4;
  MigrationFIFO_t = 5;
  RecallJob_t = 6;
  Counter_t = 7;
  FIFO_t = 8;
  AdminUsersList_t = 9;
  GenericObject_t = 1000;
}

// The base object header. This will allow introspection and automatic
// "garbage collection", i.e. returning an unprocessed object belonging
// to a dead agent to the right queue or container.
// - The type allows automatic management of the content without knowing its
// payload.
// - The version allows multi schema to be used at the object level (smooth schema 
// evolution, on an object by object basis).
// - The owner is the authoritative source of ownership for the object.
// It allows arbitration of the actual owner in case the object is pointed
// to by several containers (during a transition, or after a failure).
// - The backup owner allows the object to be returned to a previous container
// in case of failure of a owner (when it is an agent).
message ObjectHeader {
  required ObjectType type = 1;
  required uint64 version = 2;
  required string owner = 3;
  required string backupowner = 4;
  required bytes payload = 5;
}

// A placeholder object for the implementation of neutral object handlers
message GenericObject {
}

// The agent object represents a running process. It is a payload to an object
// itself, and it can be owned by a watchdog or a global agent registry, which
// lists the agents not yet watched by a watchdog.
// - The description is a freetext string used for logging.
// - The watchdogs themselves own the agents they are watching, so the agents can
// be returned to the agent registry when they fail.
// - The heartbeat is incremented from time to time by the agent.
// - The timeout_us is the amount of microseconds after which the absence of
// change to the heartbeat can be interpreted as agent failure.
// - The ownedobject list is an ownership intent log that points to the objects
// that the agent is about to create, intends to own, or fully owns.
// The objects in this list can be considered for being returned to a backup
// owner.
message Agent {
  required string description = 50;
  required uint64 heartbeat = 51;
  required uint64 timeout_us = 52;
  repeated string ownedobjects = 53;
}

// The root entry: it points to an agent register and a job pool register.
// There is an integrated intent log for the agent register, but the updates 
// should be very rare (besides first register creation). All other objects
// can be covered by the agents's ownership logs.
message RootEntry {
  optional string agentregister = 91;
  repeated string agentregisterintentlog = 92;
  optional string jobpool = 93;
  repeated string jobpoolintentlog = 94;
  optional string adminuserslist = 95;
  repeated string adminuserslistintentlog = 96;
}

// The registers (simple name arrays)
message Register {
  repeated string elements = 100;
}

// The agent register holds 2 lists:
// a full list, and a list of agents not yet watched
message AgentRegister {
  repeated string agents = 110;
  repeated string untrackedagents = 111;
}

// A basic FIFO
// poping is done by increasing the read pointer, and from time to time
// collapsing the name array.
// There is no write pointer because we always append at the end of the name
// array.
message FIFO {
  required uint64 readPointer = 200;
  repeated string name = 201;
}

// A basic shared counter
message Counter {
  required uint64 count = 300;
}

// The agents's elements:
message ObjectCreationIntent {
  required ObjectType type = 1101;
  required string name = 1102;
  required string container = 1103;
}

message ObjectOwnershipIntent {
  required ObjectType type = 1111;
  required string name = 1112;
}

// The tape record
message Tape {
  required string type = 2001;
  required string format = 2002;
  required string vid = 2003;
  required uint64 maxFseq = 2004;
  required string status = 2005 ;
}

// The drive record
message Drive {
  required string name = 3001;
  required string status = 3002;
}

// The jobs
message MigrationJob {
  required string owner = 4001;
  required string status = 4002;
  required string source = 4003;
  required string destination = 4004;
}

message RecallJob {
  required string owner = 5001;
  required string status = 5002;
  required string source = 5003;
  required string destination = 5004;
}

// The job pool
message JobPool {
  required string migration = 7001;
  required string recall = 7002;
  required string recallcounter = 7003;
}

message RecallFIFO {}

message MigrationFIFO {}

message UserIdentity {
  required uint32 uid = 8001;
  required uint32 gid = 8002;
}

message AdminUser  {
  required UserIdentity user = 8010;
  required UserIdentity creator = 8011;
  required uint64 creationTime = 8012;
  required string comment = 8013;
}

message AdminUsersList {
  repeated AdminUser element = 8020;
}


