.\"   $Id: Csetprocname.man,v 1.1 2001/11/20 09:47:35 jdurand Exp $
.\"
.\"   Man page for the CASTOR's sendmail's setproctitle() translation
.\"
.TH CSETPROCNAME "3" "$Date: 2001/11/20 09:47:35 $" "CASTOR" "Common Library Functions"
.SH NAME
\fBCsetprocname\fP \- \fBCASTOR\fP's sendmail's setproctitle() translation
.SH SYNOPSIS
.B #include <Csetprocname.h>
.P
.BI "int Cinitsetprocname(int " argc ", char **" argv ", char **" env ");"
.P
.BI "int Csetprocname(char *" format ", ...);"

.SH DESCRIPTION

\fBCinitsetprocname\fP is a \fBnecessary\fP call, highly recommended to be done at the beginning of your application. The
.BI argc
,
.BI argv
and
.BI env
parameters should be exactly those that you declare into your \fBmain()\fP entry point. This is, you are \fBHIGHLY INVITED\fP to use the \fBint main(int argc, char **argv, char **env)\fP syntax to get the environment, and to reuse \fBexactly\fP those same arguments into \fBCinitsetprocname\fP. See EXAMPLE section below. The only supported way of using \fBCinitsetprocname\fB, as well as \fBCsetprocname\fP is the one shown EXAMPLE.

.P
\fBCsetprocname\fP changes the name of your application as seen in 'ps' output using the
.BI format
string and eventual relevant arguments.

.SH NOTES
This routine is \fBdangerous\fP. In particular it really overwrite the argv[0] of your application. As soon as you call \fBCsetprocname\fP please don't rely anymore on \fBany\fP arguments in argv[] nor in the environment env[] : they all become unusable.
.P
The \fBint main(int argc, char **argc, char **env)\fP way to get environment is \fBNOT\fP compliant with the ISO of C language.
.P
On Platforms others than AIX, HP-UX, Linux and Tru64, this interface will do nothing.
.P
Finally this routine is declared \fBunsafe\fP from memory point of view on platforms that reuse the argv[] arguments. This means AIX, Linux and Tru64. This is neverthless the only known way to do this and, as far as we know, \fBsendmail\fP never crashed because of this hack.
.SH EXAMPLE
.ft CW
.nf
.sp
#include <stdlib.h>
#include <stdio.h>
#include <serrno.h>
#include <Csetprocname.h>

#define MYMSG "\\n\\n--> Look to process table, you should see '%s: %s'\\n (with blanks after)\\n\\n"


int main(argc,argv,envp)
     int argc;
     char **argv;
     char **envp;
{
  char savargv0[1024];
  char savargv1[1024];
  char savargv2[1024];
  char savargv3[1024];

  if (argc != 2 && argc != 3 && argc != 4) {
    fprintf(stderr,"Usage: %s <New program name> [<Next1> [<Next2>]] &\\n\\n... The '&' is to allow you to do 'ps'. Then look to process table!\\n", argv[0]);
    exit(1);
  }

  if (Cinitsetprocname(argc, argv, envp) != 0) {
    fprintf(stderr,"### Cinitsetprocname error, serrno=%d (%s)\\n", serrno, sstrerror(serrno));
    exit(1);
  }

  strcpy(savargv0, argv[0]);
  strcpy(savargv1, argv[1]);
  if (argc >= 3) strcpy(savargv2, argv[2]);
  if (argc >= 4) strcpy(savargv3, argv[3]);

  if (Csetprocname("%s: %s", savargv0, savargv1) != 0) {
    fprintf(stderr,"### Csetprocname error, serrno=%d (%s)\\n", serrno, sstrerror(serrno));
    exit(1);
  }

  fprintf(stderr, MYMSG, savargv0, savargv1);
  fprintf(stderr,"... Sleeping 5 seconds\\n");
  sleep(5);
  if (argc >= 3) {
    if (Csetprocname("%s: %s", savargv0, savargv2) != 0) {
      fprintf(stderr,"### Csetprocname error, serrno=%d (%s)\\n", serrno, sstrerror(serrno));
      exit(1);
    }
    
    fprintf(stderr, MYMSG, savargv0, savargv2);
    fprintf(stderr,"... Sleeping 5 seconds\\n");
    sleep(5);
  }
  if (argc >= 4) {
    if (Csetprocname("%s: %s", savargv0, savargv3) != 0) {
      fprintf(stderr,"### Csetprocname error, serrno=%d (%s)\\n", serrno, sstrerror(serrno));
      exit(1);
    }
    
    fprintf(stderr, MYMSG, savargv0, savargv3);
    fprintf(stderr,"... Sleeping 5 seconds\\n");
    sleep(5);
  }

  exit(0);

}
.ft
.LP
.fi

.SH RETURN VALUE
On success, return 0. On failure, return -1.
.SH ERRORS
Beyond the errno value, \fBCsetprocname\fP can set the serrno value to SEINTERNAL.

.SH SEE ALSO
\fBsendmail\fP(8)'s source code, \fBserrno\fP(3)

.SH AUTHOR
\fBCASTOR\fP Team <castor.support@cern.ch>
